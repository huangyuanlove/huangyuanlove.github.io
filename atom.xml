<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>放码过来</title>
  <icon>https://www.gravatar.com/avatar/771a5b96a1b55228dbb1eeb23619ef45</icon>
  <subtitle>技术宅 huangyuan@huangyuanlove.com</subtitle>
  <link href="https://blog.huangyuanlove.com/atom.xml" rel="self"/>
  
  <link href="https://blog.huangyuanlove.com/"/>
  <updated>2024-04-08T06:31:54.409Z</updated>
  <id>https://blog.huangyuanlove.com/</id>
  
  <author>
    <name>HuangYuan_xuan</name>
    <email>huangyuan@huangyuanlove.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Retrofit流程分析</title>
    <link href="https://blog.huangyuanlove.com/2024/04/07/Retrofit%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>https://blog.huangyuanlove.com/2024/04/07/Retrofit%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</id>
    <published>2024-04-07T07:35:44.000Z</published>
    <updated>2024-04-08T06:31:54.409Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章中介绍了《在kotlin协程中使用自定义CallAdapter处理错误》，既然选择了它，当然得先全面了解一下。<br>先下载一下源码，搭建一下环境，也没啥好说的，我下载的是2.11.0 版本的代码，使用的 IDEA2023.3.6。这都是小事情，只要能有代码跳转功能就好。首次配置需要下载相应依赖，时间会长一些，这不重要。等配置完成后，找到 simple module，有各种各样的示例代码。是可以直接运行的。</p><span id="more"></span><h2 id="创建Retrofit对象"><a href="#创建Retrofit对象" class="headerlink" title="创建Retrofit对象"></a>创建Retrofit对象</h2><p>我们先从如何创建的<code>Retrofit</code>对象开始<br>先看一下我们可以设置哪些参数，撸一下源码，找一下<code>Retrofit.Builder</code>类</p><h3 id="设置OkHttpClient"><a href="#设置OkHttpClient" class="headerlink" title="设置OkHttpClient"></a>设置<code>OkHttpClient</code></h3><p>这里的<code>OkHttpClient</code>实现了<code>Call.Factory</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">client</span><span class="hljs-params">(OkHttpClient client)</span> &#123;<br>  <span class="hljs-keyword">return</span> callFactory(Objects.requireNonNull(client, <span class="hljs-string">&quot;client == null&quot;</span>));<br>&#125;<br><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">callFactory</span><span class="hljs-params">(okhttp3.Call.Factory factory)</span> &#123;<br>  <span class="hljs-built_in">this</span>.callFactory = Objects.requireNonNull(factory, <span class="hljs-string">&quot;factory == null&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设置-baseUrl"><a href="#设置-baseUrl" class="headerlink" title="设置 baseUrl"></a>设置 baseUrl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">baseUrl</span><span class="hljs-params">(URL baseUrl)</span> &#123;<br>  Objects.requireNonNull(baseUrl, <span class="hljs-string">&quot;baseUrl == null&quot;</span>);<br>  <span class="hljs-keyword">return</span> baseUrl(HttpUrl.get(baseUrl.toString()));<br>&#125;<br><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">baseUrl</span><span class="hljs-params">(String baseUrl)</span> &#123;<br>  Objects.requireNonNull(baseUrl, <span class="hljs-string">&quot;baseUrl == null&quot;</span>);<br>  <span class="hljs-keyword">return</span> baseUrl(HttpUrl.get(baseUrl));<br>&#125;<br><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">baseUrl</span><span class="hljs-params">(HttpUrl baseUrl)</span> &#123;<br>  Objects.requireNonNull(baseUrl, <span class="hljs-string">&quot;baseUrl == null&quot;</span>);<br>  List&lt;String&gt; pathSegments = baseUrl.pathSegments();<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(pathSegments.get(pathSegments.size() - <span class="hljs-number">1</span>))) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;baseUrl must end in /: &quot;</span> + baseUrl);<br>  &#125;<br>  <span class="hljs-built_in">this</span>.baseUrl = baseUrl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">addConverterFactory</span><span class="hljs-params">(Converter.Factory factory)</span> &#123;<br>  converterFactories.add(Objects.requireNonNull(factory, <span class="hljs-string">&quot;factory == null&quot;</span>));<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="支持’Call’对象之外的返回类型"><a href="#支持’Call’对象之外的返回类型" class="headerlink" title="支持’Call’对象之外的返回类型"></a>支持’Call’对象之外的返回类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">addCallAdapterFactory</span><span class="hljs-params">(CallAdapter.Factory factory)</span> &#123;<br>  callAdapterFactories.add(Objects.requireNonNull(factory, <span class="hljs-string">&quot;factory == null&quot;</span>));<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="调用-callBack-时使用的Executor"><a href="#调用-callBack-时使用的Executor" class="headerlink" title="调用 callBack 时使用的Executor"></a>调用 callBack 时使用的Executor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">callbackExecutor</span><span class="hljs-params">(Executor executor)</span> &#123;<br>  <span class="hljs-built_in">this</span>.callbackExecutor = Objects.requireNonNull(executor, <span class="hljs-string">&quot;executor == null&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="是否提前验证接口中定义的方法"><a href="#是否提前验证接口中定义的方法" class="headerlink" title="是否提前验证接口中定义的方法"></a>是否提前验证接口中定义的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">validateEagerly</span><span class="hljs-params">(<span class="hljs-type">boolean</span> validateEagerly)</span> &#123;<br>  <span class="hljs-built_in">this</span>.validateEagerly = validateEagerly;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="调用-build-方法创建-Retrofit-对象"><a href="#调用-build-方法创建-Retrofit-对象" class="headerlink" title="调用 build()方法创建 Retrofit 对象"></a>调用 build()方法创建 Retrofit 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Retrofit <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (baseUrl == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Base URL required.&quot;</span>);<br>  &#125;<br><br>  okhttp3.Call.<span class="hljs-type">Factory</span> <span class="hljs-variable">callFactory</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.callFactory;<br>  <span class="hljs-keyword">if</span> (callFactory == <span class="hljs-literal">null</span>) &#123;<br>      callFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<br>  &#125;<br><br>  <span class="hljs-type">Executor</span> <span class="hljs-variable">callbackExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.callbackExecutor;<br>  <span class="hljs-keyword">if</span> (callbackExecutor == <span class="hljs-literal">null</span>) &#123;<br>      callbackExecutor = Platform.callbackExecutor;<br>  &#125;<br><br>  <span class="hljs-type">BuiltInFactories</span> <span class="hljs-variable">builtInFactories</span> <span class="hljs-operator">=</span> Platform.builtInFactories;<br><br>  <span class="hljs-comment">// Make a defensive copy of the adapters and add the default Call adapter.</span><br>  List&lt;CallAdapter.Factory&gt; callAdapterFactories = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-built_in">this</span>.callAdapterFactories);<br>  List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CallAdapter</span>.Factory&gt; defaultCallAdapterFactories =<br>  builtInFactories.createDefaultCallAdapterFactories(callbackExecutor);<br>  callAdapterFactories.addAll(defaultCallAdapterFactories);<br><br>  <span class="hljs-comment">// Make a defensive copy of the converters.</span><br>  List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Converter</span>.Factory&gt; defaultConverterFactories =<br>  builtInFactories.createDefaultConverterFactories();<br>  <span class="hljs-type">int</span> <span class="hljs-variable">defaultConverterFactoriesSize</span> <span class="hljs-operator">=</span> defaultConverterFactories.size();<br>  List&lt;Converter.Factory&gt; converterFactories =<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">1</span> + <span class="hljs-built_in">this</span>.converterFactories.size() + defaultConverterFactoriesSize);<br><br>  <span class="hljs-comment">// Add the built-in converter factory first. This prevents overriding its behavior but also</span><br>  <span class="hljs-comment">// ensures correct behavior when using converters that consume all types.</span><br>  converterFactories.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BuiltInConverters</span>());<br>  converterFactories.addAll(<span class="hljs-built_in">this</span>.converterFactories);<br>  converterFactories.addAll(defaultConverterFactories);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Retrofit</span>(<br>      callFactory,<br>      baseUrl,<br>      unmodifiableList(converterFactories),<br>      defaultConverterFactoriesSize,<br>      unmodifiableList(callAdapterFactories),<br>      defaultCallAdapterFactories.size(),<br>      callbackExecutor,<br>      validateEagerly);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>首先检查是否设置了 baseUrl，没设置直接抛异常</li><li>设置callFactory，默认为OkHttpClient</li><li>设置callbackExecutor默认为platform.defaultCallbackExecutor()，Android平台为MainThreadExecutor，其他平台为 null。这里的 AndroidMainExecutor 只是简单的使用 handler 转发到主线程<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AndroidMainExecutor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Executor</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(Looper.getMainLooper());<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable r)</span> &#123;<br>      handler.post(r);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>callAdapterFactories 默认添加 platform.defaultCallAdapterFactories,返回值为DefaultCallAdapterFactory，之后在 kotlin 中使用密闭类代替 callback 时就是抄的这个类中的方法</li><li>converterFactories<br>  ○ 先添加 new BuiltInConverters()<br>  ○ 再添加自定义的<br>  ○ 最后添加platform.defaultConverterFactories() 默认是空的<br>这样就配置好的 Retrofit 对象</li></ol><h2 id="如何发送请求"><a href="#如何发送请求" class="headerlink" title="如何发送请求"></a>如何发送请求</h2><p>我们在定义网络请求时是这么写的</p><h3 id="定义网络请求"><a href="#定义网络请求" class="headerlink" title="定义网络请求"></a>定义网络请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GitHub</span> &#123;<br>  <span class="hljs-meta">@GET(&quot;/repos/&#123;owner&#125;/&#123;repo&#125;/contributors&quot;)</span><br>  Call&lt;List&lt;Contributor&gt;&gt; <span class="hljs-title function_">contributors</span><span class="hljs-params">(<span class="hljs-meta">@Path(&quot;owner&quot;)</span> String owner, <span class="hljs-meta">@Path(&quot;repo&quot;)</span> String repo)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建GitHub对象-和发送请求"><a href="#创建GitHub对象-和发送请求" class="headerlink" title="创建GitHub对象 和发送请求"></a>创建<strong>GitHub对象</strong> 和发送请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// Create an instance of our GitHub API interface.</span><br><span class="hljs-type">GitHub</span> <span class="hljs-variable">github</span> <span class="hljs-operator">=</span> retrofit.create(GitHub.class);<br><span class="hljs-comment">// Create a call instance for looking up Retrofit contributors.</span><br>Call&lt;List&lt;Contributor&gt;&gt; call = github.contributors(<span class="hljs-string">&quot;square&quot;</span>, <span class="hljs-string">&quot;retrofit&quot;</span>);<br><span class="hljs-comment">// Fetch and print a list of the contributors to the library.</span><br>List&lt;Contributor&gt; contributors = call.execute().body();<br></code></pre></td></tr></table></figure><p>重点在我们调用<code>retrofit.create</code>方法时用到的动态代理商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;T&gt; service)</span> &#123;<br>  validateServiceInterface(service);<br>  <span class="hljs-keyword">return</span> (T)<br>      Proxy.newProxyInstance(<br>          service.getClassLoader(),<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123;service&#125;,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object[] emptyArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>];<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-meta">@Nullable</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, <span class="hljs-meta">@Nullable</span> Object[] args)</span><br>                <span class="hljs-keyword">throws</span> Throwable &#123;<br>              <span class="hljs-comment">// If the method is a method from Object then defer to normal invocation.</span><br>              <span class="hljs-keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;<br>                <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, args);<br>              &#125;<br>              args = args != <span class="hljs-literal">null</span> ? args : emptyArgs;<br>              <span class="hljs-type">Reflection</span> <span class="hljs-variable">reflection</span> <span class="hljs-operator">=</span> Platform.reflection;<br>              <span class="hljs-keyword">return</span> reflection.isDefaultMethod(method)<br>                  ? reflection.invokeDefaultMethod(method, service, proxy, args)<br>                  : loadServiceMethod(service, method).invoke(proxy, args);<br>            &#125;<br>          &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="validateServiceInterface"><a href="#validateServiceInterface" class="headerlink" title="validateServiceInterface"></a>validateServiceInterface</h3><p>创建 Github 对象时使用了动态代理，不过在创建之前，先调用了<code>validateServiceInterface(service);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validateServiceInterface</span><span class="hljs-params">(Class&lt;?&gt; service)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!service.isInterface()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;API declarations must be interfaces.&quot;</span>);<br>    &#125;<br><br>    Deque&lt;Class&lt;?&gt;&gt; check = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>    check.add(service);<br>    <span class="hljs-keyword">while</span> (!check.isEmpty()) &#123;<br>      Class&lt;?&gt; candidate = check.removeFirst();<br>      <span class="hljs-keyword">if</span> (candidate.getTypeParameters().length != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Type parameters are unsupported on &quot;</span>).append(candidate.getName());<br>        <span class="hljs-keyword">if</span> (candidate != service) &#123;<br>          message.append(<span class="hljs-string">&quot; which is an interface of &quot;</span>).append(service.getName());<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(message.toString());<br>      &#125;<br>      Collections.addAll(check, candidate.getInterfaces());<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (validateEagerly) &#123;<br>      <span class="hljs-type">Reflection</span> <span class="hljs-variable">reflection</span> <span class="hljs-operator">=</span> Platform.reflection;<br>      <span class="hljs-keyword">for</span> (Method method : service.getDeclaredMethods()) &#123;<br>        <span class="hljs-keyword">if</span> (!reflection.isDefaultMethod(method)<br>            &amp;&amp; !Modifier.isStatic(method.getModifiers())<br>            &amp;&amp; !method.isSynthetic()) &#123;<br>          loadServiceMethod(service, method);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>先检查 Github 类是不是 Interface，接着定义一个双端队列，对当前接口及其父接口进行递归检查，这里是不支持泛型参数的。<br>在接下来判断一下在创建 Retrofit 时传入的validateEagerly参数，如果是 true，并且声明的方法不是默认、不是静态、不是合成方法，则调用loadServiceMethod方法解析接口中声明的方法。</p><h3 id="loadServiceMethod"><a href="#loadServiceMethod" class="headerlink" title="loadServiceMethod"></a>loadServiceMethod</h3><p>首先调用<code>ServiceMethod.parseAnnotations(this, service, method);</code>，先从缓存的map中获取有没有已经解析好的ServiceMethod。如果没有则调用ServiceMethod.parseAnnotations(this, method)方法进行解析。</p><h4 id="第一步创建requestFactory对象"><a href="#第一步创建requestFactory对象" class="headerlink" title="第一步创建requestFactory对象"></a>第一步创建requestFactory对象</h4><p>调用了 <code>RequestFactory requestFactory = RequestFactory.parseAnnotations(retrofit, service, method); </code>，解析了例如请求方式（即 POST 还是 GET 等请求），请求头，contentType 等等参数并返回了一个<code>RequestFactory</code>对象</p><h4 id="第二步创建HttpServiceMethod子类CallAdapted"><a href="#第二步创建HttpServiceMethod子类CallAdapted" class="headerlink" title="第二步创建HttpServiceMethod子类CallAdapted"></a>第二步创建HttpServiceMethod子类CallAdapted</h4><p>接着通过<code>HttpServiceMethod</code>的静态方法<code>parseAnnotations</code>进一步解析，入参有<code>Retrofit</code>对象，<code>Method</code>对象和刚才创建的<code>RequestFactory </code>对象。<code>HttpServiceMethod</code>继承自<code>ServiceMethod</code>，但也是个抽象类，这个类提供的<code>parseAnnotations</code>方法的主要内容是进一步解析，并通过<code>createCallAdapter</code>创建适配器、通过<code>createResponseConverter</code>创建转换器，最后利用<code>RequestFactory</code>对象，<code>OkHttp</code>对象，<code>转换器</code>对象，<code>适配器</code>对象创建了一个<code>CallAdapted</code>类型的对象并返回。</p><h5 id="创建适配器"><a href="#创建适配器" class="headerlink" title="创建适配器"></a>创建适配器</h5><p>如果我们前面没有调用<code>addCallAdapterFactory(CallAdapter.Factory factory)</code>添加自定义的Factory的话，这里返回的是默认的<code>DefaultCallAdapterFactory</code>对象。<br>在该类的<code>adapt</code>方法中返回的<code>CallAdapter</code>对象中，先判断了<code>executor</code>是不是空，这里的<code>executor</code>就是在创建<code>Retrofit</code>时调用<code>public Builder callbackExecutor(Executor executor)</code>方法时传入的对象，前面也说过，在**Android(Dalvik)**平台上默认是<code>AndroidMainExecutor</code>,其他平台默认为空。</p><p>简单讲，<code>DefaultCallAdapterFactory</code>大致如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultCallAdapterFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CallAdapter</span>.Factory &#123;<br>    <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-meta">@Nullable</span> CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span><br>        Utils.isAnnotationPresent(annotations, SkipCallbackExecutor.class)<br>            ? <span class="hljs-literal">null</span><br>            : callbackExecutor;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CallAdapter</span>&lt;Object, Call&lt;?&gt;&gt;() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> Type <span class="hljs-title function_">responseType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> responseType;<br>      &#125;<br><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> Call&lt;Object&gt; <span class="hljs-title function_">adapt</span><span class="hljs-params">(Call&lt;Object&gt; call)</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span>= <span class="hljs-literal">null</span> ? call : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorCallbackCall</span>&lt;&gt;(executor, call);<br>      &#125;<br>    &#125;;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecutorCallbackCall</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Call</span>&lt;T&gt; &#123;<br>   ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;<br>      <span class="hljs-built_in">this</span>.callbackExecutor = callbackExecutor;<br>      <span class="hljs-built_in">this</span>.delegate = delegate;<br>    &#125;<br>    <span class="hljs-comment">//。。。。一系列的方法，除了enqueue(final Callback&lt;T&gt; callback)方法外，都是调用delegate中对应的方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="创建转换器"><a href="#创建转换器" class="headerlink" title="创建转换器"></a>创建转换器</h5><p>我们在使用的时候一般会传入一个ConverterFactory对象，比如MoshiConverterFactory、GsonConverterFactory等。最主要的就两个方法<br><code>responseBodyConverter</code> and <code>requestBodyConverter</code>.在调用<code>HttpServiceMethod.createResponseConverter</code>时，兜兜转转最终还是调用了 <code>Retrofit.nextCallAdapter</code>方法，从我们一开始构建的 Retrofit 对象中查找对应的转换器</p><h5 id="创建CallAdapted对象"><a href="#创建CallAdapted对象" class="headerlink" title="创建CallAdapted对象"></a>创建CallAdapted对象</h5><p>这里直接调用的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CallAdapted</span>&lt;&gt;(requestFactory, callFactory, responseConverter, callAdapter);<br></code></pre></td></tr></table></figure><p>注意这里传入的<code>callAdapter</code>对象就是前面提到的调用<code>createCallAdapter</code>返回的默认<code>DefaultCallAdapterFactory</code>示例。<br><code>CallAdapted</code>类是<code>HttpServiceMethod</code>的子类，实现了父类的抽象方法<code>adapt</code>。而<code>HttpServiceMethod</code>又实现了<code>ServiceMethod</code>的抽象方法<code>invoke</code>，在<code>invoke</code>方法里调用了<code>adapt</code>方法。</p><h4 id="loadServiceMethod过程总结"><a href="#loadServiceMethod过程总结" class="headerlink" title="loadServiceMethod过程总结"></a>loadServiceMethod过程总结</h4><p>所以前面说到的加载过程(loadServiceMethod)，最终就是返回了一个<code>CallAdapted</code>类型的对象，并存到缓存中。接下去就是调用了<code>CallAdapted</code>对象的<code>invoke</code>方法，显然最终调用了<code>CallAdapted</code>自身的<code>adapt</code>方法。<code>CallAdapted</code>提供的<code>adapt</code>方法里就一句，那就是调用适配器的<code>adapt</code>方法，并返回一个值。这个值就是我们定义的接口类型的代理对象.之后调用调用定义的接口方法获取到Call对象，调用enqueue异步执行；调用execute同步执行；</p><h3 id="invoke过程"><a href="#invoke过程" class="headerlink" title="invoke过程"></a>invoke过程</h3><p>前面知道了<code>loadServiceMethod</code>返回的是一个<code>CallAdapted</code>对象，然后紧接着调用了<code>invoke</code>方法。但<code>CallAdapted</code>并没有重写该方法，所以实际上还是调用的<code>HttpServiceMethod</code>类中的<code>invoke</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">final</span> <span class="hljs-meta">@Nullable</span> ReturnT <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object instance, Object[] args)</span> &#123;<br>  Call&lt;ResponseT&gt; call =<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpCall</span>&lt;&gt;(requestFactory, instance, args, callFactory, responseConverter);<br>  <span class="hljs-keyword">return</span> adapt(call, args);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/Android/retrofit/NewOkHttpCall.png"><br><img src="/image/Android/retrofit/NewOkhttpCallArgs.png"></p><p>接着调用了<code>adapt(call, args)</code>方法，这个方法就需要子类实现了，这里的子类是<code>CallAdapted</code>,在<code>CallAdapted</code>中接着调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ReturnT <span class="hljs-title function_">adapt</span><span class="hljs-params">(Call&lt;ResponseT&gt; call, Object[] args)</span> &#123;<br>  <span class="hljs-keyword">return</span> callAdapter.adapt(call);<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法中的<code>callAdapter</code>对象就是前面提到的<code>DefaultCallAdapterFactory.get</code>方法中返回的<code>CallAdapter</code>,调用了该对应的<code>adapt</code>方法。在上面的介绍的<strong>创建适配器</strong>小结中提到，在**Android(Dalvik)**平台上默认有<code>AndroidMainExecutor</code>,其他平台默认为空。所以在没有额外添加<code>callbackExecutor</code>的情况下，Android 平台上返回的是<code>ExecutorCallbackCall</code>,在其他平台上默认返回的就是参数中的<code>call</code>对象，也就是<code>retrofit2.OkHttpCall</code>。 这个对象也就是我们调用接口中的方法返回的对象。</p><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><p>上面提到在 Android 平台上会返回<code>ExecutorCallbackCall</code>对象，其他平台返回<code>retrofit2.OkHttpCall</code>对象。但在创建<code>ExecutorCallbackCall</code><br>对象的时候也会将<code>retrofit2.OkHttpCall</code>传进去，在调用各种方法的时候还是调用的<code>retrofit2.OkHttpCall</code>对象的方法，只不过在调用<code>void enqueue(Callback&lt;T&gt; callback);</code>方法的<code>callback</code>回调中使用<code>callbackExecutor</code>将回调切换回主线程而已。</p><p>在调用<code>retrofit2.OkHttpCall</code>的<code>enqueue</code>或者<code>execute</code>方法时，会调用<code>createRawCall</code>方法创建一个<code>okhttp3.Call</code>对象，实际上的网络请求还是 okhttp 发出的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> okhttp3.Call <span class="hljs-title function_">createRawCall</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>  okhttp3.<span class="hljs-type">Call</span> <span class="hljs-variable">call</span> <span class="hljs-operator">=</span> callFactory.newCall(requestFactory.create(instance, args));<br>  <span class="hljs-keyword">if</span> (call == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;Call.Factory returned null.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> call;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>requestFactory</code>是上面提到的<code>parseAnnotations</code>时创建的<code>RequestFactory</code>对象，包含了部分请求信息。这里又用它创建了<code>okhttp3.Request</code>对象。创建好之后接着就创建了<code>okhttp3.Call</code>对象，接下来就是调用<code>enqueue</code>或者<code>execute</code>方法发送请求。<br>当请求数据返回时，会调用<code>parseResponse(okhttp3.Response rawResponse)</code>方法，最终调用的是<code>responseConverter.convert(catchingBody)</code>方法，这里的<code>responseConverter</code>就是我们在创建<code>Retrofit</code>对象调用<code>addConverterFactory</code>时传入的解析方法.<br>至此，完成了一次网络请求。</p><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在之前的文章中介绍了《在kotlin协程中使用自定义CallAdapter处理错误》，既然选择了它，当然得先全面了解一下。&lt;br&gt;先下载一下源码，搭建一下环境，也没啥好说的，我下载的是2.11.0 版本的代码，使用的 IDEA2023.3.6。这都是小事情，只要能有代码跳转功能就好。首次配置需要下载相应依赖，时间会长一些，这不重要。等配置完成后，找到 simple module，有各种各样的示例代码。是可以直接运行的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
    <category term="Retrofit" scheme="https://blog.huangyuanlove.com/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>在kotlin协程中使用自定义CallAdapter处理错误</title>
    <link href="https://blog.huangyuanlove.com/2024/03/29/kotlin%E4%B8%ADRetrofit2-x%E8%87%AA%E5%AE%9A%E4%B9%89CallAdapter%E5%81%9A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://blog.huangyuanlove.com/2024/03/29/kotlin%E4%B8%ADRetrofit2-x%E8%87%AA%E5%AE%9A%E4%B9%89CallAdapter%E5%81%9A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</id>
    <published>2024-03-29T10:14:05.000Z</published>
    <updated>2024-04-07T07:36:41.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Retrofit在2019-06-05发布的2.6.0版本中就已经支持Kotlin 中的 suspend修饰符了，目前正准备在项目中使用 Kotlin，顺便替换一下网络库。这里先做一下调研和基础建设，方便后续的接入工作。<br>问就是15 年 16 年的老项目，之前并没有使用 Kotlin 的打算。</p><p>Retrofit已经在2024-03-28更新到2.11.0版本了，就用这个来做调研好了。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-string">&#x27;com.squareup.retrofit2:retrofit:2.11.0&#x27;</span><br>implementation <span class="hljs-string">&#x27;com.squareup.retrofit2:converter-gson:2.11.0&#x27;</span><br>implementation <span class="hljs-string">&#x27;com.squareup.okhttp3:okhttp:4.12.0&#x27;</span><br></code></pre></td></tr></table></figure><p>由于需要对 OKHttpClient 做一些操作和定制，这里添加了 okhttp 的依赖。实体类的转换使用了 gson，为啥用 gson，问就是项目里面就是用的 gson，后面再介绍一下其他的converter。</p><ul><li>Gson: com.squareup.retrofit2:converter-gson</li><li>Jackson: com.squareup.retrofit2:converter-jackson</li><li>Moshi: com.squareup.retrofit2:converter-moshi</li><li>Protobuf: com.squareup.retrofit2:converter-protobuf</li><li>Wire: com.squareup.retrofit2:converter-wire</li><li>Simple XML: com.squareup.retrofit2:converter-simplexml</li><li>JAXB: com.squareup.retrofit2:converter-jaxb</li><li>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</li></ul><h3 id="声明请求接口"><a href="#声明请求接口" class="headerlink" title="声明请求接口"></a>声明请求接口</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MainPageApi</span></span>&#123;<br>  <span class="hljs-meta">@GET(<span class="hljs-string">&quot;app_interface/home_pag/&quot;</span>)</span><br>  <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getMainPageInfoWithRow</span><span class="hljs-params">()</span></span>:Call&lt;MainPageInfo&gt;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建-Retrofit-对象"><a href="#创建-Retrofit-对象" class="headerlink" title="创建 Retrofit 对象"></a>创建 Retrofit 对象</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> retrofit = Retrofit.Builder()<br>    .baseUrl(BASE_URL)<br>    .addConverterFactory(GsonConverterFactory.create())<br>    .build()<br></code></pre></td></tr></table></figure><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> mainPageApi = retrofit.create(MainPageApi::<span class="hljs-keyword">class</span>.java)<br>mainPageApi.getMainPageInfoWithCall().enqueue(<span class="hljs-keyword">object</span>:retrofit2.Callback&lt;MainPageInfo&gt;&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        call: <span class="hljs-type">Call</span>&lt;<span class="hljs-type">MainPageInfo</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        response: <span class="hljs-type">retrofit2</span>.<span class="hljs-type">Response</span>&lt;<span class="hljs-type">MainPageInfo</span>&gt;</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span> &#123;<br>        Log.e(<span class="hljs-string">&quot;KotlinActivity&quot;</span>,<span class="hljs-string">&quot;getMainPageInfoWithCall onResponse&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(call: <span class="hljs-type">Call</span>&lt;<span class="hljs-type">MainPageInfo</span>&gt;, t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>        Log.e(<span class="hljs-string">&quot;KotlinActivity&quot;</span>,<span class="hljs-string">&quot;getMainPageInfoWithCall onFailure&quot;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>到这里为止，我们还没有使用任何协程相关的特性，并且没有都得写回调，和 Java 写起来也没啥差别。</p><h3 id="支持协程"><a href="#支持协程" class="headerlink" title="支持协程"></a>支持协程</h3><p>我们对接口的声明加上<code>suspend</code>修饰</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-meta">@GET(<span class="hljs-string">&quot;app_interface/home_pag/&quot;</span>)</span><br><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getMainPageInfoWithRow</span><span class="hljs-params">()</span></span>:Call&lt;MainPageInfo&gt;<br></code></pre></td></tr></table></figure><p>这时候上面直接发送请求的代码会报错：<br><img src="/image/Android/kotlin/suspend_retrofit_error.png" alt="suspend_retrofit_error"><br>提示我们需要在协程中调用，这也简单，kotlin 对 activity 有个扩展的<code>lifecycleScope</code>成员变量，稍微修改一下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">lifecycleScope.launch(Dispatchers.IO) &#123;<br>  mainPageApi.getMainPageInfoWithCall().enqueue(.....)<br>&#125;<br></code></pre></td></tr></table></figure><p>不习惯这么写的话，可以将网络请求写在 ViewModel 中，通过 LiveData创建一个可观察对象实现数据绑定。</p><p>不出意外的出意外了，应用崩溃，错误信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">java.lang.IllegalArgumentException: Suspend functions should not return Call, as they already execute asynchronously.<br>Change its return type to class com.huangyuanlove.androidtest.kotlin.retrofit.MainPageInfo<br></code></pre></td></tr></table></figure><p>意思是在协程中发起请求已经是异步的了，不需要再返回 Call 对象了，直接返回对应的实体即可。<br>简单，修改一下接口声明</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-meta">@GET(<span class="hljs-string">&quot;app_interface/home_page/&quot;</span>)</span><br><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getMainPageInfoWithRow</span><span class="hljs-params">()</span></span>:MainPageInfo<br></code></pre></td></tr></table></figure><p>然后修改一下请求</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">lifecycleScope.launch(Dispatchers.IO) &#123;<br>  <span class="hljs-keyword">val</span> mainPageInfo = mainPageApi.getMainPageInfo()<br>  withContext(Dispatchers.Main) &#123;<br>    refreshUI(mainPageInfo)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行一下，一切正常。我们修改一下接口，请求一个不存在的地址，会返回404，不出意外，应用还是崩溃</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">retrofit2.HttpException: HTTP 404 <br>at retrofit2.KotlinExtensions$await$2$2.onResponse(KotlinExtensions.kt:53)<br>at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:164)<br>at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:519)<br>at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)<br>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)<br>at java.lang.Thread.run(Thread.java:929)<br>Suppressed: kotlinx.coroutines.internal.DiagnosticCoroutineContextException: [StandaloneCoroutine&#123;Cancelling&#125;@ffa6ad2, Dispatchers.IO]<br></code></pre></td></tr></table></figure><p>哦~异常没有处理，粗暴点，直接 try-catch，kotlin 中还有<code>runCatching</code>这个语法糖</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> mainPageInfoRow = runCatching &#123; mainPageApi.getMainPageInfoWithRow() &#125;<br><span class="hljs-keyword">if</span> (mainPageInfoRow.isFailure) &#123;<br>    ToastUtils.showToast(<span class="hljs-string">&quot;请求失败&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mainPageInfoRow.isSuccess) &#123;<br>    ToastUtils.showToast(<span class="hljs-string">&quot;请求成功&quot;</span>)<br>    withContext(Dispatchers.Main) &#123;<br>        <span class="hljs-keyword">if</span> (mainPageInfoRow.getOrNull() == <span class="hljs-literal">null</span>) &#123;<br>            ToastUtils.showToast(<span class="hljs-string">&quot;请求结果为空&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            refreshViewWithLaunch(mainPageInfoRow.getOrNull()!!)<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是有时候我们会用<code>HTTP状态码</code>来表示一些业务上逻辑错误，并且不同的状态码返回的 JSON 结构还可能不一样。 别问为啥要这么搞，应该是HTTP 状态码就应该表示网络请求的状态，业务状态应该放在返回的数据中约定字段来处理。问就是15年的老代码，之前就是这么搞的，并且大范围应用，涉及到的部门、业务占半数以上。<br>这时候我们需要自定义<code>CallAdapter</code>了</p><h3 id="自定义-CallAdapter"><a href="#自定义-CallAdapter" class="headerlink" title="自定义 CallAdapter"></a>自定义 CallAdapter</h3><p>这时候就应该翻一下源码了，在<code>example</code>有个<code>ErrorHandlingAdapter.java</code>,路径在<a href="https://github.com/square/retrofit/blob/trunk/samples/src/main/java/com/example/retrofit/ErrorHandlingAdapter.java">samples&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;retrofit&#x2F;ErrorHandlingAdapter.java</a>。<br>我们来仿写一下，最关键的点在实现自己的 Call 类的时候，对callback 的处理。</p><h4 id="定义不同的返回状态"><a href="#定义不同的返回状态" class="headerlink" title="定义不同的返回状态"></a>定义不同的返回状态</h4><p>第一步，创建密闭类，来表示不同的状态，这里暂且定义了三种情况</p><ul><li>Success:HTTP状态码在<code>[200,300)</code>这个区间</li><li>NetError:HTTP状态码不在<code>[200,300)</code>这个区间</li><li>UnknownError:其他错误</li></ul><p>sealed class NetworkResponse&lt;out T : Any, out U : Any&gt; {<br>    data class Success<T : Any>(val body: T) : NetworkResponse&lt;T, Nothing&gt;()<br>    data class NetError(val httpCode:Int?,val errorMsg:String?,val exception: Throwable?) : NetworkResponse&lt;Nothing, Nothing&gt;()<br>    data class UnknownError(val error: Throwable?) : NetworkResponse&lt;Nothing, Nothing&gt;()<br>}</p><h4 id="创建自己的Call类"><a href="#创建自己的Call类" class="headerlink" title="创建自己的Call类"></a>创建自己的Call类</h4><p>这里为了简化方便，除了<code>enqueue</code>之外必须重写的方法，都是直接调用<code>delegate</code>对应的方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">internal</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkResponseCall</span>&lt;<span class="hljs-type">S : Any, E : Any</span>&gt;</span>(<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> delegate: Call&lt;S&gt;,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> errorConverter: Converter&lt;ResponseBody, E&gt;<br>) : Call&lt;NetworkResponse&lt;S, E&gt;&gt; &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>: Call&lt;NetworkResponse&lt;S, E&gt;&gt; &#123;<br>        <span class="hljs-keyword">return</span> NetworkResponseCall(delegate.clone(), errorConverter);<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>: Response&lt;NetworkResponse&lt;S, E&gt;&gt; &#123;<br>        <span class="hljs-keyword">throw</span> UnsupportedOperationException(<span class="hljs-string">&quot;NetworkResponseCall doesn&#x27;t support execute&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isExecuted</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> delegate.isExecuted;<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cancel</span><span class="hljs-params">()</span></span> &#123;<br>        delegate.cancel()<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isCanceled</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> delegate.isCanceled<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">request</span><span class="hljs-params">()</span></span>: Request &#123;<br>        <span class="hljs-keyword">return</span> delegate.request()<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">timeout</span><span class="hljs-params">()</span></span>: Timeout &#123;<br>        <span class="hljs-keyword">return</span> delegate.timeout();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是关键的<code>enqueue</code>方法,在这里面，将所有的请求都用<code>Response.success</code>返回，不再走<code>Response.error</code>.并且根据不同的 HTTP 状态码，返回的数据等条件转成一开始定义的密闭类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(callback: <span class="hljs-type">Callback</span>&lt;<span class="hljs-type">NetworkResponse</span>&lt;<span class="hljs-type">S</span>, E&gt;&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.enqueue(<span class="hljs-keyword">object</span> : Callback&lt;S&gt; &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(call: <span class="hljs-type">Call</span>&lt;<span class="hljs-type">S</span>&gt;, response: <span class="hljs-type">Response</span>&lt;<span class="hljs-type">S</span>&gt;)</span></span> &#123;<br>            <span class="hljs-keyword">val</span> body = response.body()<br>            <span class="hljs-keyword">val</span> code = response.code()<br>            <span class="hljs-keyword">val</span> error = response.errorBody()<br><br>            <span class="hljs-keyword">if</span> (response.isSuccessful) &#123;<br>                <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>                    callback.onResponse(<br>                        <span class="hljs-keyword">this</span><span class="hljs-symbol">@NetworkResponseCall</span>,<br>                        Response.success(NetworkResponse.Success(body))<br>                    )<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <br>                    callback.onResponse(<br>                        <span class="hljs-keyword">this</span><span class="hljs-symbol">@NetworkResponseCall</span>,<br>                        Response.success(NetworkResponse.UnknownError(<span class="hljs-literal">null</span>))<br>                    )<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">val</span> errorBody = <span class="hljs-keyword">when</span> &#123;<br>                    error == <span class="hljs-literal">null</span> -&gt; <span class="hljs-literal">null</span><br>                    error.contentLength() == <span class="hljs-number">0L</span> -&gt; <span class="hljs-literal">null</span><br>                    <span class="hljs-keyword">else</span> -&gt; NetworkResponse.NetError(code, error.toString(), <span class="hljs-literal">null</span>)<br>                &#125;<br>                <span class="hljs-keyword">if</span> (errorBody != <span class="hljs-literal">null</span>) &#123;<br>                    callback.onResponse(<br>                        <span class="hljs-keyword">this</span><span class="hljs-symbol">@NetworkResponseCall</span>,<br>                        Response.success(errorBody)<br>                    )<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    callback.onResponse(<br>                        <span class="hljs-keyword">this</span><span class="hljs-symbol">@NetworkResponseCall</span>,<br>                        Response.success(NetworkResponse.UnknownError(<span class="hljs-literal">null</span>))<br>                    )<br>                &#125;<br>            &#125;<br><br><br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(call: <span class="hljs-type">Call</span>&lt;<span class="hljs-type">S</span>&gt;, t: <span class="hljs-type">Throwable</span>)</span></span> &#123;<br>            <span class="hljs-keyword">val</span> networkResponse = <span class="hljs-keyword">when</span> (t) &#123;<br>                <span class="hljs-keyword">is</span> Exception -&gt; NetworkResponse.NetError(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,t)<br>                <span class="hljs-keyword">else</span> -&gt; NetworkResponse.UnknownError(t)<br>            &#125;<br>            callback.onResponse(<span class="hljs-keyword">this</span><span class="hljs-symbol">@NetworkResponseCall</span>, Response.success(networkResponse))<br>        &#125;<br><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建-CallAdapter"><a href="#创建-CallAdapter" class="headerlink" title="创建 CallAdapter"></a>创建 CallAdapter</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkResponseAdapter</span>&lt;<span class="hljs-type">S : Any, E : Any</span>&gt;</span>(<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> successType: Type,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> errorBodyConverter: Converter&lt;ResponseBody, E&gt;<br>) : CallAdapter&lt;S, Call&lt;NetworkResponse&lt;S, E&gt;&gt;&gt; &#123;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">responseType</span><span class="hljs-params">()</span></span>: Type = successType<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">adapt</span><span class="hljs-params">(call: <span class="hljs-type">Call</span>&lt;<span class="hljs-type">S</span>&gt;)</span></span>: Call&lt;NetworkResponse&lt;S, E&gt;&gt; &#123;<br>        <span class="hljs-keyword">return</span> NetworkResponseCall(call, errorBodyConverter)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建CallAdapterFactory"><a href="#创建CallAdapterFactory" class="headerlink" title="创建CallAdapterFactory"></a>创建CallAdapterFactory</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">NetworkResponseAdapterFactory</span>:<span class="hljs-type">CallAdapter.Factory</span></span>()&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">get</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        returnType: <span class="hljs-type">Type</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        annotations: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">out</span> <span class="hljs-type">Annotation</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        retrofit: <span class="hljs-type">Retrofit</span></span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>: CallAdapter&lt;*, *&gt;? &#123;<br>        <span class="hljs-comment">// suspend functions wrap the response type in `Call`</span><br>        <span class="hljs-keyword">if</span>(Call::<span class="hljs-keyword">class</span>.java != getRawType(returnType))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        &#125;<br>        check(returnType <span class="hljs-keyword">is</span> ParameterizedType)&#123;<br>            <span class="hljs-string">&quot;return type must be parameterized as Call&lt;NetworkResponse&lt;&lt;Foo&gt;&gt; or Call&lt;NetworkResponse&lt;out Foo&gt;&gt;&quot;</span><br>        &#125;<br>        <span class="hljs-comment">// get the response type inside the `Call` type</span><br>        <span class="hljs-keyword">val</span> responseType = getParameterUpperBound(<span class="hljs-number">0</span>,returnType)<br>        <span class="hljs-comment">// if the response type is not ApiResponse then we can&#x27;t handle this type, so we return null</span><br>        <span class="hljs-keyword">if</span>(getRawType(responseType) != NetworkResponse::<span class="hljs-keyword">class</span>.java)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        &#125;<br><br><br>        <span class="hljs-comment">// the response type is ApiResponse and should be parameterized</span><br>        check(responseType <span class="hljs-keyword">is</span> ParameterizedType) &#123; <span class="hljs-string">&quot;Response must be parameterized as NetworkResponse&lt;Foo&gt; or NetworkResponse&lt;out Foo&gt;&quot;</span> &#125;<br><br>        <span class="hljs-keyword">val</span> successBodyType = getParameterUpperBound(<span class="hljs-number">0</span>, responseType)<br>        <span class="hljs-keyword">val</span> errorBodyType = getParameterUpperBound(<span class="hljs-number">1</span>, responseType)<br><br>        <span class="hljs-keyword">val</span> errorBodyConverter =<br>            retrofit.nextResponseBodyConverter&lt;Any&gt;(<span class="hljs-literal">null</span>, errorBodyType, annotations)<br><br>        <span class="hljs-keyword">return</span> NetworkResponseAdapter&lt;Any, Any&gt;(successBodyType, errorBodyConverter)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="构建-Retrofit-实例时添加该-Factory"><a href="#构建-Retrofit-实例时添加该-Factory" class="headerlink" title="构建 Retrofit 实例时添加该 Factory"></a>构建 Retrofit 实例时添加该 Factory</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">val</span> retrofit = Retrofit.Builder()<br>    .baseUrl(BASE_URL)<br>    .addCallAdapterFactory(NetworkResponseAdapterFactory())<br>    .addConverterFactory(GsonConverterFactory.create())<br>    .build()<br></code></pre></td></tr></table></figure><h4 id="使用typealias简化返回类型-可选"><a href="#使用typealias简化返回类型-可选" class="headerlink" title="使用typealias简化返回类型(可选)"></a>使用typealias简化返回类型(可选)</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpError</span></span>(<span class="hljs-keyword">val</span> httpCode:<span class="hljs-built_in">Int</span>,<span class="hljs-keyword">val</span> errorMsg:String?,<span class="hljs-keyword">val</span> exception: Throwable?)<br><span class="hljs-comment">// before</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DemoApiService</span> </span>&#123;<br>    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">mainPageInfo</span><span class="hljs-params">()</span></span>: NetworkResponse&lt;MainPageInfo, HttpError&gt;<br>&#125;<br><span class="hljs-comment">// after</span><br><span class="hljs-keyword">typealias</span> GenericResponse&lt;S&gt; = NetworkResponse&lt;S, HttpError&gt;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ApiService</span> </span>&#123;<br>    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">mainPageInfo</span><span class="hljs-params">()</span></span>: GenericResponse&lt;MainPageInfo&gt;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在 Activity 中直接使用lifecycleScope启动协程。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">lifecycleScope.launch(Dispatchers.IO) &#123;<br>    Log.e(<span class="hljs-string">&quot;KotlinActivity&quot;</span>, <span class="hljs-string">&quot;lifecycleScope.launch --&gt;&gt;&quot;</span> + Thread.currentThread().name);<br>    <span class="hljs-keyword">val</span> mainPageInfo = mainPageApi.getMainPageInfo()<br><br>    withContext(Dispatchers.Main) &#123;<br>        Log.e(<br>            <span class="hljs-string">&quot;KotlinActivity&quot;</span>,<br>            <span class="hljs-string">&quot;withContext(Dispatchers.Main) --&gt;&gt;&quot;</span> + Thread.currentThread().name<br>        );<br>        <span class="hljs-keyword">when</span>(mainPageInfo)&#123;<br><br>            <span class="hljs-keyword">is</span> NetworkResponse.NetError -&gt; Log.e(<span class="hljs-string">&quot;KotlinActivity&quot;</span>,<br>                <span class="hljs-string">&quot;NetError-&gt;<span class="hljs-variable">$mainPageInfo</span>&quot;</span><br>            )<br>            <span class="hljs-keyword">is</span> NetworkResponse.Success -&gt;  refreshViewWithLaunch(mainPageInfo.body)<br>            <span class="hljs-keyword">is</span> NetworkResponse.UnknownError -&gt; Log.e(<span class="hljs-string">&quot;KotlinActivity&quot;</span>,<span class="hljs-string">&quot;UnknownError-&gt;&quot;</span> + mainPageInfo.error)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者在 ViewModel 中借助 LiveData 将返回值转化为可观察对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainPageInfoViewModel</span>:<span class="hljs-type">ViewModel</span></span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> _mainPageInfo  = MutableLiveData&lt;MainPageInfo&gt;()<br>    <span class="hljs-keyword">val</span> mainPageInfo: LiveData&lt;MainPageInfo&gt; <span class="hljs-keyword">get</span>() = _mainPageInfo<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getMainPageInfo</span><span class="hljs-params">()</span></span>&#123;<br>        viewModelScope.launch(Dispatchers.IO)&#123;<br>            <span class="hljs-keyword">val</span> result = mainPageApi.getMainPageInfo()<br>            withContext(Dispatchers.Main)&#123;<br>                <span class="hljs-keyword">when</span>(result)&#123;<br>                    <span class="hljs-keyword">is</span> NetworkResponse.NetError -&gt; Log.e(<span class="hljs-string">&quot;MainPageInfoViewModel&quot;</span>,<br>                        <span class="hljs-string">&quot;NetError-&gt;<span class="hljs-variable">$result</span>&quot;</span><br>                    )<br>                    <span class="hljs-keyword">is</span> NetworkResponse.Success -&gt;  _mainPageInfo.value =  result.body<br>                    <span class="hljs-keyword">is</span> NetworkResponse.UnknownError -&gt; Log.e(<span class="hljs-string">&quot;MainPageInfoViewModel&quot;</span>,<span class="hljs-string">&quot;UnknownError-&gt;&quot;</span> + result.error)<br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在 Activity 中使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin">mainPageInfoModel = ViewModelProvider(<span class="hljs-keyword">this</span>).<span class="hljs-keyword">get</span>(MainPageInfoViewModel::<span class="hljs-keyword">class</span>.java)<br>mainPageInfoModel.mainPageInfo.observe(<span class="hljs-keyword">this</span>, Observer &#123;<br>    <span class="hljs-keyword">if</span> (it != <span class="hljs-literal">null</span>) &#123;<br>        Log.e(<span class="hljs-string">&quot;KotlinActivity&quot;</span>, <span class="hljs-string">&quot;viewmodel获取结果成功&quot;</span>)<br>        refreshViewWithViewModelResult(it);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Log.e(<span class="hljs-string">&quot;KotlinActivity&quot;</span>, <span class="hljs-string">&quot;viewmodel获取结果为空&quot;</span>)<br>    &#125;<br>&#125;)<br>mainPageInfoModel.getMainPageInfo()<br></code></pre></td></tr></table></figure><p>暂时先这样吧，基本上够用了</p><hr><p>以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Retrofit在2019-06-05发布的2.6.0版本中就已经支持Kotlin 中的 suspend修饰符了，目前正准备在项目中使用 K</summary>
      
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
    <category term="Retrofit" scheme="https://blog.huangyuanlove.com/tags/Retrofit/"/>
    
    <category term="Kotlin" scheme="https://blog.huangyuanlove.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙ArkUI-X 跨平台通信：从入土到复活</title>
    <link href="https://blog.huangyuanlove.com/2024/03/27/%E9%B8%BF%E8%92%99ArkUI-X-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%80%9A%E4%BF%A1%EF%BC%9A%E4%BB%8E%E5%85%A5%E5%9C%9F%E5%88%B0%E5%A4%8D%E6%B4%BB/"/>
    <id>https://blog.huangyuanlove.com/2024/03/27/%E9%B8%BF%E8%92%99ArkUI-X-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%80%9A%E4%BF%A1%EF%BC%9A%E4%BB%8E%E5%85%A5%E5%9C%9F%E5%88%B0%E5%A4%8D%E6%B4%BB/</id>
    <published>2024-03-27T06:21:02.000Z</published>
    <updated>2024-03-27T06:24:39.185Z</updated>
    
    <content type="html"><![CDATA[<hr><p>2024.01.31 更新<br>在上一篇 <a href="https://juejin.cn/post/7327910163628294154">鸿蒙跨平台 ArkUI-X从入门到入土 </a>中提到创建 Bridge 对象时失败的问题，在本文中提到的问题又重新验证了几次，咨询了一下相关人员，结论是这样的</p><ol><li>在 Arkui-X 中，如果 Bridge 对象声明为成员变量并且立即创建，这时候 preview 会白屏，是加载界面时就挂了，因为这个bridge对象，是需要 native 侧的文件支持的，比如Android中的libbridge.so(集成产物到 Android 工程时复制过去的)。这时候集成到 Android 工程中是正常运行的。</li><li>DevEco 中的 preview 相当于纯鸿蒙系统(HarmonyOS next),在纯鸿蒙系统中是无法使用Bridge 的，因为纯鸿蒙上没有这个 so 库。所以在创建这个 Bridge 对象的时候需要判断一下是不是跨平台，一般从deviceInfo.osFullName判断：<br><code>let osName: string = deviceInfo.osFullName;</code>获取对应OS名字，该接口已支持跨平台，不同平台上其返回值如下:</li></ol><ul><li>OpenHarmony上，osName等于<code>OpenHarmony XXX</code></li><li>Android上，osName等于<code>Android XXX</code></li><li>iOS上，osName等于<code>iOS XXX</code><br>具体文档在这里 <a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/quick-start/platform-different-introduction.md#%E5%B9%B3%E5%8F%B0%E5%B7%AE%E5%BC%82%E5%8C%96">平台差异化</a></li></ul><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>话说前两天刚调研了 ArkUI-X 跨平台方案，最终卡死在了跨平台和 native 通信上，文章在这里<a href="https://juejin.cn/post/7327910163628294154">鸿蒙跨平台 ArkUI-X从入门到入土</a>，今天在社区的帮助下跑通了通信方案，该挖出来复活了。<br><strong>注意文章所说的官方是指社区，并不是指华为公司，更不是其他</strong></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>这里只对 Android 侧进行了实现，iOS 侧因为没有实体机的原因，先放一放，原理都一样，代码也差不多。官方文档先放在这里了 <a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/tutorial/how-to-use-bridge-on-android.md#%E5%B9%B3%E5%8F%B0%E6%A1%A5%E6%8E%A5%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97">平台桥接开发指南</a></p><blockquote><p>平台桥接用于客户端（ArkUI）和平台（Android或iOS）之间传递消息，即用于ArkUI与平台双向数据传递、ArkUI侧调用平台的方法、平台调用ArkUI侧的方法。本文主要介绍Android平台与ArkUI交互，ArkUI侧具体用法请参考<a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/reference/apis/js-apis-bridge.md">Bridge API</a>，Android侧参考<a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/reference/arkui-for-android/BridgePlugin.md">BridgePlugin</a>。</p></blockquote><p>官方在 Android 侧提供了一个抽象类<code>BridgePlugin</code>，我们需要继承它实现一些方法来进行通信。在 ArkUI-X 侧同样提供了<code>&#39;@arkui-x.bridge</code>包来进行通信。</p><h4 id="ArkUI-X-侧-Bridge"><a href="#ArkUI-X-侧-Bridge" class="headerlink" title="ArkUI-X 侧 Bridge"></a>ArkUI-X 侧 Bridge</h4><p>先看下ArkUI-X 侧提供的方案，官方文档在这里 <a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/reference/apis/js-apis-bridge.md#arkui-xbridgedts-%E5%B9%B3%E5%8F%B0%E6%A1%A5%E6%8E%A5">@arkui-x.bridge.d.ts (平台桥接)</a>。<br>在官方提供的<a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/tutorial/how-to-use-bridge-on-android.md#%E5%9C%BA%E6%99%AF%E7%A4%BA%E4%BE%8B">场景示例中</a>中，是在页面(也就是被<code>@Entry</code>装饰的类)中创建的，但是在实践中发现不能正常运行，会创建 Bridge 对象时会报错</p><blockquote><p>Error message: Cannot read property createBridge of undefined</p></blockquote><p>指向了<code>private bridgeImpl = bridge.createBridge(&#39;Bridge&#39;);</code>这一行代码，向官方提交了 issue，在其帮助下，将创建 Bridge 对象的代码放在了另外的 ets 文件中可以正常运行。</p><h5 id="创建-Bridge"><a href="#创建-Bridge" class="headerlink" title="创建 Bridge"></a>创建 Bridge</h5><p>先导包 <code>import Bridge from &#39;@arkui-x.bridge&#39;;</code><br>再创建<code> bridgeObj: BridgeObject = Bridge.createBridge(&#39;Bridge&#39;);</code><br>需要注意的是，这里传入的参数值需要<strong>和 native 侧一致，否则无法调用</strong>。 </p><h4 id="Android-侧-BridgePlugin"><a href="#Android-侧-BridgePlugin" class="headerlink" title="Android 侧 BridgePlugin"></a>Android 侧 BridgePlugin</h4><p>看先 Android 侧提供的方案，官方文档在这里 <a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/reference/arkui-for-android/BridgePlugin.md#bridgeplugin-%E5%B9%B3%E5%8F%B0%E6%A1%A5%E6%8E%A5">BridgePlugin (平台桥接)</a> 。<br>暴露的 api 也不多，包括构造方法、callMethod、sendMessage，两个回调监听：setMessageListener和setMethodResultListener。</p><h5 id="创建-BridgePlugin"><a href="#创建-BridgePlugin" class="headerlink" title="创建 BridgePlugin"></a>创建 BridgePlugin</h5><p>一般来讲，我们会自己写个类继承<code>BridgePlugin</code>来进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArkUIBridge</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BridgePlugin</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ArkUIBridge&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArkUIBridge</span><span class="hljs-params">(Context context, String bridgeName, <span class="hljs-type">int</span> instanceId)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, bridgeName, instanceId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里的<code>bridgeName</code>参数，传入的值<strong>必须</strong>与 ArkUI-X 侧一致，至于 instanceId 则是<code>StageActivity</code>这个用来展示 ArkUI-X 内容的容器提供的方法，其实也就是调用的<code>InstanceIdGenerator.getAndIncrement()</code>，具体实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> ohos.stage.ability.adapter;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstanceIdGenerator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">ID_GENERATOR</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InstanceIdGenerator</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndIncrement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ID_GENERATOR.getAndIncrement();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ID_GENERATOR.get();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以在其他位置调用<code>InstanceIdGenerator.get()</code>来获取到 id。但需要注意，每次创建 ArkUI-X 产物的容器页面也就是StageActivity时，该 id 都会自增，如果 id 无法对应则无法互相通信</p><h4 id="ArkUI侧向Android侧传递数据"><a href="#ArkUI侧向Android侧传递数据" class="headerlink" title="ArkUI侧向Android侧传递数据"></a>ArkUI侧向Android侧传递数据</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// xxx.ets</span><br>bridgeImpl.<span class="hljs-title function_">sendMessage</span>(<span class="hljs-string">&#x27;text&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 监听Android侧的回执</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;response: &#x27;</span> + res);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error: &#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err));<br>&#125;);<br></code></pre></td></tr></table></figure><p>在 Android 侧接收消息,在构造方法里面设置一下监听事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//ArkUIBridge extends BridgePlugin</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArkUIBridge</span><span class="hljs-params">(Context context, String bridgeName, <span class="hljs-type">int</span> instanceId)</span> &#123;<br>    <span class="hljs-built_in">super</span>(context, bridgeName, instanceId);<br>    setMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IMessageListener</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">onMessage</span><span class="hljs-params">(Object o)</span> &#123;<br>            Log.e(TAG,<span class="hljs-string">&quot;onMessage--&gt;&quot;</span> + o.toString());<br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>            <span class="hljs-keyword">try</span> &#123;<br>                result.put(<span class="hljs-string">&quot;platform&quot;</span>,<span class="hljs-string">&quot;Android&quot;</span>);<br>                result.put(<span class="hljs-string">&quot;result_code&quot;</span>,<span class="hljs-number">0</span>);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">return</span> result.toString();<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessageResponse</span><span class="hljs-params">(Object o)</span> &#123;<br>            Log.e(TAG,<span class="hljs-string">&quot;onMessageResponse--&gt;&quot;</span> + o.toString());<br>        &#125;<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Android侧向ArkUI-X侧传递数据"><a href="#Android侧向ArkUI-X侧传递数据" class="headerlink" title="Android侧向ArkUI-X侧传递数据"></a>Android侧向ArkUI-X侧传递数据</h4><p>方式都一样，需要在 ArkUI-X 侧设置一下监听事件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">bridge</span> = <span class="hljs-title class_">Bridge</span>.<span class="hljs-title function_">createBridge</span>(<span class="hljs-string">&#x27;BridgeCommon&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">bridge</span>!.<span class="hljs-title function_">setMessageListener</span>(<span class="hljs-function">(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (message) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`receive message：<span class="hljs-subst">$&#123;message&#125;</span>`</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">scanResult</span> = message<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ArkUI-X setMessageListener&quot;</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在 Android 侧，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">////ArkUIBridge extends BridgePlugin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessageToArkUI</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>        jsonObject.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;扫描结果&quot;</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;scan result from Android&quot;</span>);<br><br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>    Log.e(TAG,<span class="hljs-string">&quot;toScan before sendMessage&quot;</span> );<br>    sendMessage(jsonObject.toString());<br><br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，在 Android 中调用 sendMessage 方法是没有返回值的，ArkUI-X 侧收到消息后的返回值是在<code>setMessageListener</code>的<code>onMessageResponse</code>回调中接收的。</p><h4 id="ArkUI-X-侧调用-Android-侧的方法"><a href="#ArkUI-X-侧调用-Android-侧的方法" class="headerlink" title="ArkUI-X 侧调用 Android 侧的方法"></a>ArkUI-X 侧调用 Android 侧的方法</h4><p>在 ArkUI-X 中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">getAppVersion</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt; &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initBridge</span>();<span class="hljs-comment">//创建 bridge 对象</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">params</span>:<span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-title class_">Bridge</span>.<span class="hljs-property">Parameter</span>&gt; =&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;xuan&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">bridge</span>!.<span class="hljs-title function_">callMethod</span>(<span class="hljs-string">&#x27;getAppVersion&#x27;</span>,params);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getAppVersion返回值：&#x27;</span> + result)<br>  <span class="hljs-keyword">return</span> result!.<span class="hljs-title function_">toString</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Android</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAppVersion</span><span class="hljs-params">(JSONObject params)</span>&#123;<br>    Log.e(TAG,<span class="hljs-string">&quot;getAppVersion from arkui-x，params--&gt; &quot;</span>  );<br>    <span class="hljs-keyword">if</span>(params == <span class="hljs-literal">null</span>)&#123;<br>        Log.e(TAG,<span class="hljs-string">&quot;is null&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        Log.e(TAG,params.toString());<br>    &#125;<br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>        jsonObject.put(<span class="hljs-string">&quot;version&quot;</span>,BuildConfig.VERSION_NAME);<br>        jsonObject.put(<span class="hljs-string">&quot;buildVersion&quot;</span>,<span class="hljs-string">&quot;getAppVersion(Object params)&quot;</span>);<br><br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> jsonObject.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，两侧都不支持方法重载，在 Android 侧是通过 HashMap 保存的在 BridgePlugin 中的方法并且是以方法名为 key，java.lang.reflect.Method为值。在 Android 侧的方法会被自动注册，不需要我们调用代码注册。</p><h4 id="Android-侧调用-ArkUI-X-侧-的方法"><a href="#Android-侧调用-ArkUI-X-侧-的方法" class="headerlink" title="Android 侧调用 ArkUI-X 侧 的方法"></a>Android 侧调用 ArkUI-X 侧 的方法</h4><p>在 ArkUI-X 中，需要自己调用registerMethod方法来注册供 native 调用的方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//方法声明</span><br><span class="hljs-title function_">getString</span>(parameters?: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-title class_">Bridge</span>.<span class="hljs-property">Message</span>&gt;):<span class="hljs-title class_">Bridge</span>.<span class="hljs-property">ResultValue</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`----调用 getString：parameters--&gt;<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(parameters)&#125;</span>`</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;call js getString success&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//注册方法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">bridge</span>!.<span class="hljs-title function_">registerMethod</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;getString&quot;</span>,<span class="hljs-attr">method</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">getString</span>&#125;)<br></code></pre></td></tr></table></figure><p>在 Android 侧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">JSONObject</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br><span class="hljs-keyword">try</span> &#123;<br>    params.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;xuan&quot;</span>);<br>    params.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    e.printStackTrace();<br>&#125;<br>Object[] paramObject = &#123;params&#125;;<br><span class="hljs-type">MethodData</span> <span class="hljs-variable">methodData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodData</span>(<span class="hljs-string">&quot;getString&quot;</span>, paramObject);<br>callMethod(methodData);<br></code></pre></td></tr></table></figure><p>同样的，Android 调用 ArkUI 的方法并没有返回值，需要在<code>setMethodResultListener</code>的<code>onSuccess</code>方法中获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//设置调用 ArkUI-X 方法的结果回调</span><br>setMethodResultListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IMethodResult</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(Object o)</span> &#123;<br>        Log.e(TAG,<span class="hljs-string">&quot;IMethodResult#onSuccess--&gt;&quot;</span> +o.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> i, String s1)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMethodCancel</span><span class="hljs-params">(String s)</span> &#123;<br><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="BridgePlugin-中提供给-ArkUI-X-调用的方法不支持方法重载"><a href="#BridgePlugin-中提供给-ArkUI-X-调用的方法不支持方法重载" class="headerlink" title="BridgePlugin 中提供给 ArkUI-X 调用的方法不支持方法重载"></a>BridgePlugin 中提供给 ArkUI-X 调用的方法不支持方法重载</h4><p>原因上面也说了，是因为保存的时候是用方法名作为 key 保存在 HashMap 中的，重载也没用，虽然写了不报错，但结果不保证。也看一下为啥 Android 不用自己写代码注册供 ArkUI-X调用的方法。<br>在<code>ohos.ace.adapter.capability.bridge.BridgePlugin</code>这个类中，重点关注<code>HashMap&lt;String, Method&gt; methodsMap_</code>这个成员变量和这几个方法：  </p><ul><li>protected Object jsCallMethod(Object object, MethodData methodData) </li><li>private Method findMethod(String methodName)</li><li>private void registerMethod(String methodName, Method methods)</li></ul><p>当 ArkUI-X 调用 Android 方法时，首先调用的是<code>jsCallMethod</code>，在<code>jsCallMethod</code>中首先调用<code>findMethod</code>方法从<code>methodsMap_</code>中获取对应的方法，找了则直接调用。没找到则反射获取 BridgePlugin 实现类中的方法，然后使用方法名做匹配，找到对应的方法。到这里也就解释了为啥不支持方法重载。也解释了为啥方法参数对应不上会有异常。<br>cpp 的源码在 <a href="https://gitee.com/arkui-x/arkui_for_android/tree/master/capability/java/jni/bridge">https://gitee.com/arkui-x/arkui_for_android&#x2F;tree&#x2F;master&#x2F;capability&#x2F;java&#x2F;jni&#x2F;bridge</a><br>Java 源码在 <a href="https://gitee.com/arkui-x/arkui_for_android/tree/master/capability/java/src/ohos/ace/adapter/capability/bridge">https://gitee.com/arkui-x/arkui_for_android&#x2F;tree&#x2F;master&#x2F;capability&#x2F;java&#x2F;src&#x2F;ohos&#x2F;ace&#x2F;adapter&#x2F;capability&#x2F;bridge</a></p><p><img src="/image/HarmonyOS/arkui-x_debug.png" alt="image.png"></p><h4 id="参数类型对应关系"><a href="#参数类型对应关系" class="headerlink" title="参数类型对应关系"></a>参数类型对应关系</h4><p>Arkui-X 中callMethod是这么声明的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">callMethod</span>(<span class="hljs-attr">methodName</span>: <span class="hljs-built_in">string</span>, parameters?: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-title class_">Parameter</span>&gt;):<br><span class="hljs-title function_">callMethod</span>(<span class="hljs-attr">methodName</span>: <span class="hljs-built_in">string</span>, ...<span class="hljs-attr">parameters</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">ResultValue</span>&gt;;<br></code></pre></td></tr></table></figure><p>sendMessage是这么声明的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">sendMessage</span>(<span class="hljs-attr">message</span>: <span class="hljs-title class_">Message</span>, <span class="hljs-attr">callback</span>: <span class="hljs-title class_">AsyncCallback</span>&lt;<span class="hljs-title class_">Response</span>&gt;): <span class="hljs-built_in">void</span>;<br><span class="hljs-title function_">sendMessage</span>(<span class="hljs-attr">message</span>: <span class="hljs-title class_">Message</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Response</span>&gt;;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> S = <span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span> | <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">type</span> T = S | <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; | <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">boolean</span>&gt; | <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">string</span>&gt;;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Message</span> = T | <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, T&gt;;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Parameter</span> = <span class="hljs-title class_">Message</span>;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Response</span> = <span class="hljs-title class_">Message</span>;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ResultValue</span> = T | <span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">string</span>, T&gt;;<br></code></pre></td></tr></table></figure><p>在 Android 中sendMessage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(Object data)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>callMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callMethod</span><span class="hljs-params">(MethodData methodData)</span><br></code></pre></td></tr></table></figure><p>而 MethodData 只有两个成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodData</span> &#123;<br>    <span class="hljs-keyword">private</span> String methodName_;<br>    <span class="hljs-keyword">private</span> Object[] Parameters_;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MethodData</span><span class="hljs-params">(String methodName, Object[] parameter)</span> &#123;<br>        <span class="hljs-built_in">this</span>.methodName_ = methodName;<br>        <span class="hljs-built_in">this</span>.Parameters_ = parameter;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMethodName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.methodName_;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object[] getMethodParameter() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.Parameters_;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么在使用的时候可以这样:  </p><h5 id="ArkUI-X主动调用-Android"><a href="#ArkUI-X主动调用-Android" class="headerlink" title="ArkUI-X主动调用 Android"></a>ArkUI-X主动调用 Android</h5><p>在 ArkUI-X 中调用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">params</span>:<span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-title class_">Bridge</span>.<span class="hljs-property">Parameter</span>&gt; =&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;xuan&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">bridge</span>!.<span class="hljs-title function_">callMethod</span>(<span class="hljs-string">&#x27;getAppVersion&#x27;</span>,params);<br><br></code></pre></td></tr></table></figure><p>在 Android 端对应参数类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAppVersion</span><span class="hljs-params">(JSONObject params)</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Android-主动调用-ArkUI-X"><a href="#Android-主动调用-ArkUI-X" class="headerlink" title="Android 主动调用 ArkUI-X"></a>Android 主动调用 ArkUI-X</h5><p>在 Android 中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">JSONObject</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br><span class="hljs-keyword">try</span> &#123;<br>    params.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;xuan&quot;</span>);<br>    params.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    e.printStackTrace();<br>&#125;<br>Object[] paramObject = &#123;params&#125;;<br><span class="hljs-type">MethodData</span> <span class="hljs-variable">methodData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodData</span>(<span class="hljs-string">&quot;getString&quot;</span>, paramObject);<br>callMethod(methodData);<br></code></pre></td></tr></table></figure><p>在 ArkUI-X 中对应类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">getString</span>(parameters?: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-title class_">Bridge</span>.<span class="hljs-property">Message</span>&gt;):<span class="hljs-title class_">Bridge</span>.<span class="hljs-property">ResultValue</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`----调用 getString：parameters--&gt;<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(parameters)&#125;</span>`</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;call js getString success&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BrigePlugin的bridgeType"><a href="#BrigePlugin的bridgeType" class="headerlink" title="BrigePlugin的bridgeType_"></a>BrigePlugin的bridgeType_</h4><p>BrigePlugin提供了一个可以指定<code>bridgeType_</code>的构造方法，<br><img src="/image/HarmonyOS/arkui-x_bridge_type.png" alt="image.png"><br>如果我们不指定类型的话，默认就是 <code>BridgeType.JSON_TYPE</code>，传一些非二进制的数据。但假如我们需要穿一些二进制数据，比如图片、音视频数据等，可以指定为<code>BridgeType.BINARY_TYPE</code>。</p><hr><p>以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;2024.01.31 更新&lt;br&gt;在上一篇 &lt;a href=&quot;https://juejin.cn/post/7327910163628294154&quot;&gt;鸿蒙跨平台 ArkUI-X从入门到入土 &lt;/a&gt;中提到创建 Bridge 对象时失败的问题，在本文中提到的问题又重</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙跨平台 ArkUI-X从入门到入土</title>
    <link href="https://blog.huangyuanlove.com/2024/03/27/%E9%B8%BF%E8%92%99%E8%B7%A8%E5%B9%B3%E5%8F%B0-ArkUI-X%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://blog.huangyuanlove.com/2024/03/27/%E9%B8%BF%E8%92%99%E8%B7%A8%E5%B9%B3%E5%8F%B0-ArkUI-X%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2024-03-27T03:13:02.000Z</published>
    <updated>2024-03-27T06:20:14.729Z</updated>
    
    <content type="html"><![CDATA[<hr><p>2024.01.31 更新<br>码完了<br><a href="https://juejin.cn/post/7329310941106421811">鸿蒙ArkUI-X 跨平台通信：从入土到复活</a><br>在本文中提到的问题又重新验证了几次，咨询了一下相关人员，结论是这样的</p><ol><li>在 Arkui-X 中，如果 Bridge 对象声明为成员变量并且立即创建，这时候 preview 会白屏，是加载界面时就挂了，因为这个bridge对象，是需要 native 侧的文件支持的，比如Android中的libbridge.so(集成产物到 Android 工程时复制过去的)。这时候集成到 Android 工程中是正常运行的。</li><li>DevEco 中的 preview 相当于纯鸿蒙系统(HarmonyOS next),在纯鸿蒙系统中是无法使用Bridge 的，因为纯鸿蒙上没有这个 so 库。所以在创建这个 Bridge 对象的时候需要判断一下是不是跨平台，一般从deviceInfo.osFullName判断：<br><code>let osName: string = deviceInfo.osFullName;</code>获取对应OS名字，该接口已支持跨平台，不同平台上其返回值如下:</li></ol><ul><li>OpenHarmony上，osName等于<code>OpenHarmony XXX</code></li><li>Android上，osName等于<code>Android XXX</code></li><li>iOS上，osName等于<code>iOS XXX</code><br>具体文档在这里 <a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/quick-start/platform-different-introduction.md#%E5%B9%B3%E5%8F%B0%E5%B7%AE%E5%BC%82%E5%8C%96">平台差异化</a></li></ul><hr><p>2024.01.28 更新<br><del>上面</del>文章中提到跨平台通信(Bridge)的问题在社区的帮助下解决了，方案就不要在页面(也就是@Entry修饰)中进行初始化，可以写个工具类，在工具类中初始化，虽然 debug 也是提示 undefined，但运行的时候可以正常工作。<br>新的博客记录已经在码了。。。。</p><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>喊了好长时间要做鸿蒙应用，自己也写了一点，但要同时照顾三个移动平台有点恶心，大致看了一下鸿蒙社区的 arkui-x 跨平台方案 <a href="https://gitee.com/arkui-x">https://gitee.com/arkui-x</a> ,先调研一下试试水<br><strong>注意文章所说的官方是指社区，并不是指华为公司，更不是其他</strong></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>丑话说在前头，先说限制，按照官方文档说法，忘记在哪里看到了<br>Android系统版本8+ 且仅 arm 设备支持<br>iOS系统版本 10+ 且仅 arm 设备支持</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>官方文档看这里：<a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/README.md">https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/README.md</a></p><p>官方仓库在这里：<a href="https://gitee.com/arkui-x">https://gitee.com/arkui-x</a></p><p>使用官方的套件还是需要申请，方式和之前一样，就是找商务谈合作，签协议。然后给账号开通下载权限然后去下载。</p><h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><p>这里我们可以使用 OpenHarmony 社区提供的开发套件</p><p><img src="/image/HarmonyOS/deveco.png" alt="image.png"><br>下载链接：</p><p><a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/release-notes/OpenHarmony-v4.0-release.md#%E9%85%8D%E5%A5%97%E5%85%B3%E7%B3%BB">https://gitee.com/openharmony/docs/blob/master/zh-cn/release-notes/OpenHarmony-v4.0-release.md#%E9%85%8D%E5%A5%97%E5%85%B3%E7%B3%BB</a></p><p>安装步骤都一样，<strong>注意 node 和ohpm版本</strong>，选择ide建议的版本，可以重新下载，也可以使用本机上已经安装好的，我这里用的 node是 16.20.0，不要头铁搞个 18.x.x 20.x.x的版本，可能会有一些诡异的问题</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>启动 IDE，页面左侧有diagnose可以检测一些基础配置和网络连接情况。点击左侧Customize，在右侧底部点击”All settings”进入首选项配置</p><p><img src="/image/HarmonyOS/deveco_customize.png" alt="image.png"></p><p>选择 SDK，安装 OpenHarmony SDK api 10，安装完成之后再安装 ArkUI-X</p><p><img src="/image/HarmonyOS/deveco_sdk.png" alt="image.png"></p><p>安装完成后就可以了，没有其他需要安装的了</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><p>没有提供直接创建跨平台应用的地方，目前只能用 import 的形式</p><p><img src="/image/HarmonyOS/deveco_import_project.png" alt="image.png"></p><p>找到 import Sample,新页面左上角选择 OpenHarmony，下面会出现 ArkUI-X，这里用 HelloWorld 来做示例。</p><p><img src="/image/HarmonyOS/select_sample_to_improt.png" alt="image.png"></p><p>打开工程后开始自动同步，但这里会失败，因为各种插件版本不适配，点一下蓝色的文字，会帮你全部修改好，重新同步，到这里就已经全部准备好了。</p><p><img src="/image/HarmonyOS/sync_failed.png" alt="image.png"></p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>窗口顶部菜单 Build–&gt; Build Hap(s)&#x2F;APP(s)–&gt;Build APP(s)。会同时构建 Android 和 iOS 产物</p><p><img src="/image/HarmonyOS/build_result.png" alt="image.png"></p><p>不出意外的话出意外了，打包失败，但这时对应的资源都已经复制到相应的文件夹中了。对应的说明可以看这里</p><p><a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/quick-start/package-structure-guide.md">https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/quick-start/package-structure-guide.md</a></p><p>这时候我们进入到项目工程的 .arkui-x&#x2F;android目录下，执行 <strong>.&#x2F;gradlew assembleDebug</strong> 来编译 android 安装包。注意这里 gradlew 可能没有执行权限，<strong>chmod +x gradlew</strong> 给一下执行权限就好了。</p><p>对于 iOS 工程，可以用 Xcode 打开之后配置一下签名然后打包。</p><p>到这里，新建工程编译多平台就已经完成了。但我们有很多项目不是从头开始，部分新增内容需要使用 add-on方式，这里以 Android 为例</p><h3 id="添加到现有工程"><a href="#添加到现有工程" class="headerlink" title="添加到现有工程"></a>添加到现有工程</h3><p>接上面 <strong>窗口顶部菜单 Build–&gt; Build Hap(s)&#x2F;APP(s)–&gt;Build APP(s)。会同时构建 Android 和 iOS 产物</strong> 之后，对应资源文件已经复制到对相应文件夹了。</p><p>先准备一个 Android 项目，注意一个 ArkUI-x 跨平台的版本要求，Android 系统 8 以上，只支持 arm 设备。</p><p>看一下 .arkui-x&#x2F;android的代码，就一个<strong>继承自StageApplication的MyApplication</strong>和一个继承自 <strong>Activity 的EntryEntryAbilityActivity，</strong> 该类名通过通过module名和ability名拼接而得，一个ability对应一个Android工程侧的Activity类。</p><h4 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h4><ol><li>libs 下面的 jar 包和so 文件复制到 Android 工程中，注意arkui-x 的 Android 工程中指定了存放 so 文件的文件夹就是 libs，复制到 Android 工程中的时候别整错了</li><li>assets文件夹下的文件也原封不动的复制到 Android 工程的 assets 文件夹中</li><li>Android 工程中的 Application改造，这里提供了三种方式<br>  3.1 继承StageApplication</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> ohos.stage.ability.adapter.StageApplication;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HiStageApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">StageApplication</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   3.2 在 Application 中使用StageApplicationDelegate</p><p>这个方法和 StageApplication 源码一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">StageApplicationDelegate</span> <span class="hljs-variable">appDelegate</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StageApplication</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        Log.i(<span class="hljs-string">&quot;StageApplication&quot;</span>, <span class="hljs-string">&quot;StageApplication onCreate called&quot;</span>);<br>        <span class="hljs-built_in">super</span>.onCreate();<br>        <span class="hljs-built_in">this</span>.appDelegate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StageApplicationDelegate</span>();<br>        <span class="hljs-built_in">this</span>.appDelegate.initApplication(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onConfigurationChanged</span><span class="hljs-params">(Configuration newConfig)</span> &#123;<br>        Log.i(<span class="hljs-string">&quot;StageApplication&quot;</span>, <span class="hljs-string">&quot;StageApplication onConfigurationChanged called&quot;</span>);<br>        <span class="hljs-built_in">super</span>.onConfigurationChanged(newConfig);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.appDelegate == <span class="hljs-literal">null</span>) &#123;<br>            Log.e(<span class="hljs-string">&quot;StageApplication&quot;</span>, <span class="hljs-string">&quot;appDelegate is null&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.appDelegate.onConfigurationChanged(newConfig);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.3 在 Activity 中使用 StageApplicationDelegat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.app.Activity;<br><span class="hljs-keyword">import</span> ohos.stage.ability.adapter.StageApplicationDelegate;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EntryEntryAbilityActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Activity</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">StageApplicationDelegate</span> <span class="hljs-variable">appDelegate_</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        appDelegate_ = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StageApplicationDelegate</span>();<br>        appDelegate_.initApplication(<span class="hljs-built_in">this</span>.getApplication());<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>用于展示内容的 Activity</li></ol><p>直接复制也行，自己创建一个同名 Activity 把内容复制过来，清单文件中注册一下也行。</p><ol><li>原生拉起 arkui-x 跨平台页面并传参</li></ol><p>使用原生Activity拉起Ability时，需使用原生应用的startActivity方法，参数的传递需要通过Intent中的putExtra()进行设置，规则如下：</p><p>key值为params</p><p>value为json格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>        intent.setClass(<span class="hljs-built_in">this</span>, EntryEntryAbilityTwoActivity.class);<br>        intent.putExtra(<span class="hljs-string">&quot;params&quot;</span>,<br>                <span class="hljs-string">&quot;&#123;&quot;</span>params<span class="hljs-string">&quot;:[&#123;&quot;</span>key<span class="hljs-string">&quot;:&quot;</span>bool<span class="hljs-string">&quot;,&quot;</span>type<span class="hljs-string">&quot;:1,&quot;</span>value<span class="hljs-string">&quot;:&quot;</span><span class="hljs-literal">true</span><span class="hljs-string">&quot;&#125;,&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;&quot;</span>key<span class="hljs-string">&quot;:&quot;</span><span class="hljs-type">double</span><span class="hljs-string">&quot;,&quot;</span>type<span class="hljs-string">&quot;:9,&quot;</span>value<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">2.3</span><span class="hljs-string">&quot;&#125;,&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;&quot;</span>key<span class="hljs-string">&quot;:&quot;</span><span class="hljs-type">int</span><span class="hljs-string">&quot;,&quot;</span>type<span class="hljs-string">&quot;:5,&quot;</span>value<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">2</span><span class="hljs-string">&quot;&#125;,&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;&quot;</span>key<span class="hljs-string">&quot;:&quot;</span>string<span class="hljs-string">&quot;,&quot;</span>type<span class="hljs-string">&quot;:10,&quot;</span>value<span class="hljs-string">&quot;:&quot;</span>test<span class="hljs-string">&quot;&#125;]&#125;&quot;</span>);<br>        startActivity(intent);<br></code></pre></td></tr></table></figure><p>至此，集成完成。<br>在 Android 项目中调用一下就可以看到页面了</p><h3 id="arkui-x-和-native-通信"><a href="#arkui-x-和-native-通信" class="headerlink" title="arkui-x 和 native 通信"></a>arkui-x 和 native 通信</h3><p>原生和跨平台通信是非常重要的一个功能，也是不可或缺的一部分，官方给出了桥接平台 Bridge，在 Android、iOS 和 arkui-x 侧都有配套说明：</p><blockquote><p>平台桥接用于客户端（ArkUI）和平台（Android或iOS）之间传递消息，即用于ArkUI与平台双向数据传递、ArkUI侧调用平台的方法、平台调用ArkUI侧的方法。本文主要介绍Android平台与ArkUI交互，ArkUI侧具体用法请参考Bridge API，Android侧参考BridgePlugin。  </p></blockquote><p>这里也给出了一个<br><a href="https://gitee.com/arkui-x/docs/blob/master/zh-cn/application-dev/tutorial/how-to-use-bridge-on-android.md#%E5%9C%BA%E6%99%AF%E7%A4%BA%E4%BE%8B">场景示例</a>，但奇怪的是不能正常运行，复现步骤和现象放在这个 <a href="https://gitee.com/arkui-x/docs/issues/I8YWM2?from=project-issue">issue</a> 中了。目前是待确认状态。</p><p>到这里也没有需要继续下去的东西，就先入土吧，上面这个问题有答案了再挖出来继续。</p><hr><p>以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;2024.01.31 更新&lt;br&gt;码完了&lt;br&gt;&lt;a href=&quot;https://juejin.cn/post/7329310941106421811&quot;&gt;鸿蒙ArkUI-X 跨平台通信：从入土到复活&lt;/a&gt;&lt;br&gt;在本文中提到的问题又重新验证了几次，咨询了一下相关</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙--canvas 画时钟</title>
    <link href="https://blog.huangyuanlove.com/2024/03/27/%E9%B8%BF%E8%92%99-canvas-%E7%94%BB%E6%97%B6%E9%92%9F/"/>
    <id>https://blog.huangyuanlove.com/2024/03/27/%E9%B8%BF%E8%92%99-canvas-%E7%94%BB%E6%97%B6%E9%92%9F/</id>
    <published>2024-03-27T03:01:33.000Z</published>
    <updated>2024-03-27T03:10:26.782Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你在 Android 上能画出来的东西，在鸿蒙上画不出来？<br>画个时钟嘛，有啥难的？<br>你行你上！<br>给钱就上！<br>给钱？早说嘛，来来来，现在就画</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>画时钟需要画哪些元素？<br>圆圈、直线，没了，就这些，临时看一下canvas 相关的 api，这不都有么？直接画。<br>看看需要用的方法  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">arc</span>(<span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">radius</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">startAngle</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">endAngle</span>: <span class="hljs-built_in">number</span>, counterclockwise?: <span class="hljs-built_in">boolean</span>): <span class="hljs-built_in">void</span><br></code></pre></td></tr></table></figure><p>看下参数含义</p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">必填</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">x</td><td align="left">number</td><td align="left">是</td><td align="left">0</td><td align="left">弧线圆心的x坐标值。</td></tr><tr><td align="left">y</td><td align="left">number</td><td align="left">是</td><td align="left">0</td><td align="left">弧线圆心的y坐标值。</td></tr><tr><td align="left">radius</td><td align="left">number</td><td align="left">是</td><td align="left">0</td><td align="left">弧线的圆半径。</td></tr><tr><td align="left">startAngle</td><td align="left">number</td><td align="left">是</td><td align="left">0</td><td align="left">弧线的起始弧度。</td></tr><tr><td align="left">endAngle</td><td align="left">number</td><td align="left">是</td><td align="left">0</td><td align="left">弧线的终止弧度。</td></tr><tr><td align="left">counterclockwise</td><td align="left">boolean</td><td align="left">否</td><td align="left">false</td><td align="left">是否逆时针绘制圆弧。</td></tr></tbody></table><p>弧度制，一圈是 2π，这个需要注意一下，还有endAngle，是终止弧度，而不是需要画多少弧度，浅浅的尝试。  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br>struct <span class="hljs-title class_">ClockViewTest</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">settings</span>: <span class="hljs-title class_">RenderingContextSettings</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RenderingContextSettings</span>(<span class="hljs-literal">true</span>)<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">canvasRendering</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CanvasRenderingContext2D</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">settings</span>)<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;100%&quot;</span>)<br>      .<span class="hljs-title function_">onReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>        <span class="hljs-keyword">let</span> width = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">width</span><br>        <span class="hljs-keyword">let</span> height = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">height</span><br><br>        <span class="hljs-keyword">let</span> centerX = width / <span class="hljs-number">2</span><br>        <span class="hljs-keyword">let</span> centerY = height / <span class="hljs-number">2</span><br>        <span class="hljs-comment">//取长宽中小的一个做直径</span><br>        <span class="hljs-keyword">let</span> maxRadius = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(width, height) / <span class="hljs-number">2</span><br><br>        <span class="hljs-comment">//设置线的粗细</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">4</span><br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">arc</span>(centerX, centerY, maxRadius-<span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>)<br>        <span class="hljs-comment">//设置线的颜色</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#ff0000&quot;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">stroke</span>()<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">beginPath</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">arc</span>(centerX, centerY, maxRadius - <span class="hljs-number">30</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>)<br>        <span class="hljs-comment">//设置线的颜色</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#00ff00&quot;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">stroke</span>()<br><br>      &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果是这样的：  </p><p><img src="/image/HarmonyOS/canvas_circle.png" alt="image.png"><br>画直线就不用多说了，开干~~  </p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><p>指针是需要根据时间变化来转动的，表盘画好一次就不需要重绘了，偷个懒，搞两个 canvas 摞起来，底层画表盘，上层画指针，时间变了只重画上层指针就行了。  </p><h4 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h4><p>简单的三角函数，但要注意是弧度制，数值别搞错了。<br>另外需要注意的是画布左上角坐标是(0,0)，右下角坐标为(width,height)。  </p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol><li>先画一大一小两个圆圈组成一个圆环。  </li><li>再划线把圆环均分 60 份，每 5 条线加粗一下。  </li><li>再把圆周分成 12 份，对应位置画上1~12 数字。  </li><li>获取当前时间，计算出指针位置，划线。  </li><li>定时更新指针位置。  </li><li>结束。</li></ol><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="第一步-画圆环"><a href="#第一步-画圆环" class="headerlink" title="第一步 画圆环"></a>第一步 画圆环</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;100%&quot;</span>)<br>  .<span class="hljs-title function_">onReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>    <span class="hljs-keyword">let</span> width = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">width</span><br>    <span class="hljs-keyword">let</span> height = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">height</span><br><br>    <span class="hljs-keyword">let</span> centerX = width / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">let</span> centerY = height / <span class="hljs-number">2</span><br>    <span class="hljs-comment">//取长宽中小的一个做直径</span><br>    <span class="hljs-keyword">let</span> maxRadius = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(centerX, centerY)<br><br>    <span class="hljs-comment">//留一些外边距</span><br>    <span class="hljs-keyword">let</span> outerCircleRadius = maxRadius - <span class="hljs-number">20</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#1b91e0&quot;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span><br>    <span class="hljs-comment">//最中间的小圈圈</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">arc</span>(centerX, centerY, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>, <span class="hljs-literal">false</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">stroke</span>()<br><br>    <span class="hljs-comment">//画内圈</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">beginPath</span>()<br>    <span class="hljs-keyword">let</span> innerCircleRadius = outerCircleRadius -<span class="hljs-number">20</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">arc</span>(centerX, centerY, innerCircleRadius, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>, <span class="hljs-literal">false</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">stroke</span>()<br><br>    <span class="hljs-comment">//画外圈</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">beginPath</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">arc</span>(centerX, centerY, outerCircleRadius, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">stroke</span>()<br>    <br>  &#125;)<br></code></pre></td></tr></table></figure><p>效果图  </p><p><img src="/image/HarmonyOS/canvas_ring.png" alt="image.png"></p><p>看着还行，颜色和粗细大家自己调。</p><h4 id="第二步-画格子"><a href="#第二步-画格子" class="headerlink" title="第二步 画格子"></a>第二步 画格子</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//画 60 个格子，5 的倍数则线条粗一些</span><br><span class="hljs-keyword">let</span> perMinuteDegree = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span> / <span class="hljs-number">60</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">60</span>; i++) &#123;<br>  <span class="hljs-comment">//结束坐标，也就是在外圆上的点</span><br>  <span class="hljs-keyword">let</span> endX = centerX + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(i * perMinuteDegree) * outerCircleRadius<br>  <span class="hljs-keyword">let</span> endY = centerY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(i * perMinuteDegree + <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) * outerCircleRadius<br>  <span class="hljs-comment">//起始坐标，也就是在内圆上的点</span><br>  <span class="hljs-keyword">let</span> startX = centerX + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(i * perMinuteDegree) * innerCircleRadius<br>  <span class="hljs-keyword">let</span> startY = centerY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(i * perMinuteDegree + <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) * innerCircleRadius<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#000000&quot;</span><br>  <span class="hljs-keyword">let</span> path2D = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path2D</span>()<br>  path2D.<span class="hljs-title function_">moveTo</span>(startX, startY)<br>  path2D.<span class="hljs-title function_">lineTo</span>(endX, endY)<br>  <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">6</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span><br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">stroke</span>(path2D)<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图  </p><p><img src="/image/HarmonyOS/canvas_ring_clock.png" alt="image.png"><br>马马虎虎，不太好看。<br>这里需要注意一下，画布是以垂直向下为 Y 轴的正方向，计算时加了 <code>Math.PI</code> 弧度纠正一下  </p><h4 id="第三步-画数字"><a href="#第三步-画数字" class="headerlink" title="第三步 画数字"></a>第三步 画数字</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//画 1~12 数字圆形分布</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">font</span> = <span class="hljs-string">&quot;40px&quot;</span><br><span class="hljs-keyword">let</span> perNumberDegree = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span> / <span class="hljs-number">12</span><br><span class="hljs-keyword">let</span> numberRadius = outerCircleRadius - <span class="hljs-number">40</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">12</span>; i++) &#123;<br>  <span class="hljs-keyword">let</span> x = centerX + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(i * perNumberDegree) * numberRadius<br>  <span class="hljs-keyword">let</span> y = centerY + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(i * perNumberDegree + <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) * numberRadius<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">text</span>: <span class="hljs-built_in">string</span> = i + <span class="hljs-string">&quot;&quot;</span><br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#000000&quot;</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">textMetrics</span>: <span class="hljs-title class_">TextMetrics</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">measureText</span>(text)<br>  <span class="hljs-comment">//填充文字时，传入的坐标是文字的左下角坐标</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">fillText</span>(text, x-textMetrics.<span class="hljs-property">width</span>/<span class="hljs-number">2</span> , y+textMetrics.<span class="hljs-property">height</span>/<span class="hljs-number">2</span>)<br>  <span class="hljs-comment">//把下面这两行注释掉就没有小方块了</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#aaff6134&quot;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">fillRect</span>(x,y,textMetrics.<span class="hljs-property">width</span>,textMetrics.<span class="hljs-property">height</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>效果图</p><p><img src="/image/HarmonyOS/canvas_ring_clock_number.png" alt="image.png"><br>图上的方块是为了对比画文字和画方块的坐标区别展示出来的：填充文字时传入的坐标是<code>文字左下角的坐标</code>，而画方块时是传入的<code>方块左上角坐标</code>,这里注意一下就好了，代码中测量了一下文字宽高，粗暴的做了一下纠偏。  </p><h4 id="第四、五步-画指针-amp-定时更新"><a href="#第四、五步-画指针-amp-定时更新" class="headerlink" title="第四、五步 画指针&amp;定时更新"></a>第四、五步 画指针&amp;定时更新</h4><p>上面也说要把指针画在另外一个 <code>canvas</code> 上，减少一下绘制时的内容，没做对比，也不知道有没有作用。<br>准备另外个画布，把两个画布用 <code>Stack</code> 包一下。  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">onReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">minute</span> = date.<span class="hljs-title function_">getMinutes</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hour</span> = date.<span class="hljs-title function_">getHours</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">second</span> = date.<span class="hljs-title function_">getSeconds</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">draw</span>()<br>  &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">500</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>这里需要把第一块代码中的 <code>innerCircleRadius</code> 变量提到外部，作为类成员两个画布共用一下，主要是计算指针终点坐标用的。<code>centerX</code> 和 <code>centerY</code> 无所谓，只要两个画布对齐了，用哪个都行，这里还是提到了外部，用的第一块画布的。  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">private</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123;<br>  清空一下画布<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerX</span> * <span class="hljs-number">2</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerY</span> * <span class="hljs-number">2</span>)<br><br>  <span class="hljs-comment">//画秒针</span><br>  <span class="hljs-comment">//计算秒针的角度</span><br>  <span class="hljs-keyword">let</span> secondDegree = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span> / <span class="hljs-number">60</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">second</span><br>  <span class="hljs-keyword">let</span> secondStartX = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerX</span><br>  <span class="hljs-keyword">let</span> secondStartY = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerY</span><br>  <span class="hljs-keyword">let</span> secondEndX = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerX</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(secondDegree) * <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerCircleRadius</span><br>  <span class="hljs-keyword">let</span> secondEndY = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerY</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(secondDegree + <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) * <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerCircleRadius</span><br>  <span class="hljs-keyword">let</span> secondPath = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path2D</span>()<br>  secondPath.<span class="hljs-title function_">moveTo</span>(secondStartX, secondStartY)<br>  secondPath.<span class="hljs-title function_">lineTo</span>(secondEndX, secondEndY)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>.<span class="hljs-title function_">stroke</span>(secondPath)<br><br><br>  <span class="hljs-comment">//画分针 颜色弄点透明度，要不然重合的时候看不清楚</span><br>  <span class="hljs-comment">//秒针走一圈，分针走一格，其实可以忽略不计</span><br>  <span class="hljs-keyword">let</span> minuteDegree = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span> / <span class="hljs-number">60</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">minute</span><br>  <span class="hljs-keyword">let</span> minuteStartX = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerX</span><br>  <span class="hljs-keyword">let</span> minuteStartY = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerY</span><br>  <span class="hljs-keyword">let</span> minuteEndX = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerX</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(minuteDegree) * (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerCircleRadius</span> / <span class="hljs-number">5</span> * <span class="hljs-number">4</span>)<br>  <span class="hljs-keyword">let</span> minuteEndY = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerY</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(minuteDegree + <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) * (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerCircleRadius</span> / <span class="hljs-number">5</span> * <span class="hljs-number">4</span>)<br>  <span class="hljs-keyword">let</span> minutePath = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path2D</span>()<br>  minutePath.<span class="hljs-title function_">moveTo</span>(minuteStartX, minuteStartY)<br>  minutePath.<span class="hljs-title function_">lineTo</span>(minuteEndX, minuteEndY)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#aa1b91e0&quot;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">4</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>.<span class="hljs-title function_">stroke</span>(minutePath)<br><br>  <span class="hljs-comment">//画时针</span><br>  <span class="hljs-comment">//分针走一圈，时针走 5 小格</span><br>  <span class="hljs-keyword">let</span> hourDegree = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span> / <span class="hljs-number">12</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">hour</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">minute</span> / <span class="hljs-number">60</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span> / <span class="hljs-number">12</span><br>  <span class="hljs-keyword">let</span> hourStartX = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerX</span><br>  <span class="hljs-keyword">let</span> hourStartY = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerY</span><br>  <span class="hljs-keyword">let</span> hourEndX = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerX</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(hourDegree) * (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerCircleRadius</span> / <span class="hljs-number">4</span> * <span class="hljs-number">3</span>)<br>  <span class="hljs-keyword">let</span> hourEndY = <span class="hljs-variable language_">this</span>.<span class="hljs-property">centerY</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(hourDegree + <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) * (<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerCircleRadius</span> / <span class="hljs-number">4</span> * <span class="hljs-number">3</span>)<br>  <span class="hljs-keyword">let</span> hourPath = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path2D</span>()<br>  hourPath.<span class="hljs-title function_">moveTo</span>(hourStartX, hourStartY)<br>  hourPath.<span class="hljs-title function_">lineTo</span>(hourEndX, hourEndY)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">6</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#aa39d167&quot;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRenderingClock</span>.<span class="hljs-title function_">stroke</span>(hourPath)<br>&#125;<br></code></pre></td></tr></table></figure><p>计算指针角度的时候也偷懒了，时针只考虑了当前分钟数，没有考虑秒数，实际差不多，先这样吧。  </p><h4 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h4><p>效果图</p><p><img src="/image/HarmonyOS/canvas_clock_finish.png" alt="image.png"><br>就先这样吧，勉勉强强，可以自己调调颜色，调调样式，或者搞一些图片来代替这些元素也行。  </p><p>源码在这里 <a href="https://github.com/huangyuanlove/HelloArkUI/blob/main/entry/src/main/ets/pages/playground/AlarmClockPage.ets">github</a> ,<br><a href="https://gitee.com/huangyuan/HelloArkUI/blob/main/entry/src/main/ets/pages/playground/AlarmClockPage.ets">gitee</a></p><p>仓库地址：<a href="https://github.com/huangyuanlove/HelloArkUI">https://github.com/huangyuanlove/HelloArkUI</a>  </p><p><a href="https://gitee.com/huangyuan/HelloArkUI">https://gitee.com/huangyuan/HelloArkUI</a></p><hr><p>以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;你在 Android 上能画出来的东西，在鸿蒙上画不出来？&lt;br&gt;画个时钟嘛，有啥难的？&lt;br&gt;你行你上！&lt;br&gt;给钱就上！&lt;br&gt;给钱？早</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙--canvas 实现波浪效果</title>
    <link href="https://blog.huangyuanlove.com/2024/03/27/%E9%B8%BF%E8%92%99-canvas-%E5%AE%9E%E7%8E%B0%E6%B3%A2%E6%B5%AA%E6%95%88%E6%9E%9C/"/>
    <id>https://blog.huangyuanlove.com/2024/03/27/%E9%B8%BF%E8%92%99-canvas-%E5%AE%9E%E7%8E%B0%E6%B3%A2%E6%B5%AA%E6%95%88%E6%9E%9C/</id>
    <published>2024-03-27T02:44:55.000Z</published>
    <updated>2024-03-27T02:53:17.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Android 中 canvas 能画出来的东西鸿蒙的 canvas 还画不了，不大可能吧？有个朋友问鸿蒙应用中想实现波浪效果，应该咋画？这个问题，你能在 Android 上用 canvas 画出来，在鸿蒙里面用 canvas 画不出来？还是 api 不熟悉吧？</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>波浪效果嘛，首先想到的是正弦、余弦函数、贝塞尔曲线，还有一个傅里叶变换，不过这个有点搞不定。这里选择使用贝塞尔曲线，因为之前在 Android 中画过，应该可以很丝滑的迁移过来<br>先复习一下在 Android 中怎么实现：<a href="https://blog.huangyuanlove.com/2019/01/20/%E8%87%AA%E5%AE%9A%E4%B9%89View-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E3%80%81Shader/">https://blog.huangyuanlove.com/2019/01/20/%E8%87%AA%E5%AE%9A%E4%B9%89View-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E3%80%81Shader/</a></p><p>确认起始点，确认终点，计算控制点，然后调用 api 划线，最后填充一下就好了。<br>怎么动起来？Android 这边用的动画，其实用 handler 或者其他东西搞个定时更新也行。<br>先看效果图<br><img src="/image/HarmonyOS/wave.gif" alt="wave.gif">  </p><p>看下鸿蒙对应的 api，目前开放的最新的HarmonyOS文档是 3.1&#x2F;4.0的，对应地址是这个 <a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-canvasrenderingcontext2d-0000001478181441-V3#ZH-CN_TOPIC_0000001573928937__quadraticcurveto">https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-canvasrenderingcontext2d-0000001478181441-V3#ZH-CN_TOPIC_0000001573928937__quadraticcurveto</a><br>目前开放的最新的 OpenHarmony 文档是4.0 的，对应地址在这里 <a href="https://docs.openharmony.cn/pages/v4.0/zh-cn/application-dev/ui/arkts-drawing-customization-on-canvas.md/#%E7%94%BB%E5%B8%83%E7%BB%84%E4%BB%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">https://docs.openharmony.cn/pages/v4.0/zh-cn/application-dev/ui/arkts-drawing-customization-on-canvas.md/#%E7%94%BB%E5%B8%83%E7%BB%84%E4%BB%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95</a><br>步骤都差不多，只不过鸿蒙中没有画笔的概念，需要对<code>CanvasRenderingContext2D</code>对象进行操作设置，包括设置线条颜色、线条宽度、图型填充颜色等。<br>想要画线、画出各种形状，可以直接操作<code>CanvasRenderingContext2D</code>对象，也可以创建<code>Path2D</code>对象进行操作。其余 api 可以查看对应的文档。  </p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>这还有啥好设计的，直接<del>抄</del>移植 Android 上面的实现就好了<br>由于需要动起来，为了避免移动后左右有空白，这里需要<strong>多画一个波浪</strong></p><p><img src="/image/HarmonyOS/wave.png" alt="WX20240108-233545@2x.png">  </p><p>这里需要注意的是，我们需要上面这条蓝色的线，而不是下面这条绿色的。</p><p>在 Android 中画二阶贝塞尔曲线有两个 api,一个是<br><code>public void rQuadTo(float dx1, float dy1, float dx2, float dy2)</code><br>这个表示的是控制点和终点相对于上一个控制点和终点的偏移量<br>另外一个是<br><code>public void quadTo(float x1, float y1, float x2, float y2)</code><br>这个表示是控制点和终点的绝对坐标值<br>但在鸿蒙中没有找到对应的 api，我们可以自己计算一下：这里的控制点的横坐标是起点和终点的中间值，控制点的纵坐标取的是波浪高度<br>所以上面两条线的画法是这样的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;30%&quot;</span>)<br>        .<span class="hljs-title function_">onAreaChange</span>(<span class="hljs-function">(<span class="hljs-params">oldValue,newValue</span>)=&gt;</span>&#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#39d167&quot;</span><br><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#39d167&quot;</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">10</span><br>          <span class="hljs-keyword">let</span> canvasWidth = <span class="hljs-built_in">parseInt</span>(newValue.<span class="hljs-property">width</span>.<span class="hljs-title function_">toString</span>())<br>          <span class="hljs-keyword">let</span> canvasHeight = <span class="hljs-built_in">parseInt</span>(newValue.<span class="hljs-property">height</span>.<span class="hljs-title function_">toString</span>())<br><br>          <span class="hljs-keyword">let</span> waveWidth = canvasWidth/<span class="hljs-number">2</span><br>          <span class="hljs-keyword">let</span> waveHeight = <span class="hljs-number">100</span><br>          <span class="hljs-keyword">let</span> baseHeight =canvasHeight<br><br>          <span class="hljs-keyword">let</span> <span class="hljs-attr">path</span>:<span class="hljs-title class_">Path2D</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path2D</span>()<br>          <br>          path.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,baseHeight)<br>          <span class="hljs-comment">//波浪宽度是画布的一半，这里偷懒直接写了</span><br>          path.<span class="hljs-title function_">quadraticCurveTo</span>( waveWidth/<span class="hljs-number">2</span>,baseHeight-waveHeight ,waveWidth,baseHeight)<br>          path.<span class="hljs-title function_">quadraticCurveTo</span>(waveWidth+waveWidth/<span class="hljs-number">2</span>,  baseHeight-waveHeight ,canvasWidth,baseHeight)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">stroke</span>(path)<br><br><br>          path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path2D</span>()<br>          baseHeight /=<span class="hljs-number">3</span><br>          path.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,baseHeight)<br>          <span class="hljs-comment">//波浪宽度是画布的一半，这里偷懒直接写了</span><br>          path.<span class="hljs-title function_">quadraticCurveTo</span>( waveWidth/<span class="hljs-number">2</span>,baseHeight-waveHeight ,waveWidth,baseHeight)<br>          path.<span class="hljs-title function_">quadraticCurveTo</span>(waveWidth+waveWidth/<span class="hljs-number">2</span>,  baseHeight+waveHeight ,canvasWidth,baseHeight)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#1b91e0&quot;</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">stroke</span>(path)<br>          <br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现也一样，直接<del>抄</del> 移植过来就好了，对应的 api 怎么用也搞定了，代码如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">export</span> struct <span class="hljs-title class_">WaveView</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">settings</span>: <span class="hljs-title class_">RenderingContextSettings</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RenderingContextSettings</span>(<span class="hljs-literal">true</span>)<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">canvasRendering</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CanvasRenderingContext2D</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">settings</span>)<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">canvasHeight</span>: <span class="hljs-built_in">number</span> = -<span class="hljs-number">1</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">canvasWidth</span>: <span class="hljs-built_in">number</span> = -<span class="hljs-number">1</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-attr">dx</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span> <span class="hljs-comment">//最大值等于 waveWidth，每次移动的距离</span><br>  <span class="hljs-keyword">private</span> waveHeight = <span class="hljs-number">50</span> <span class="hljs-comment">//拍脑袋订的数值</span><br>  <span class="hljs-keyword">private</span> baseHeight = <span class="hljs-number">300</span> <span class="hljs-comment">//拍脑袋订的数值</span><br>  <span class="hljs-keyword">private</span> waveWidth = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">intervalTimer</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-title function_">drawWave</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dx</span> += <span class="hljs-number">4</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">dx</span> &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">dx</span> = <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span>)<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span> == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span> / <span class="hljs-number">2</span><br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">path</span>: <span class="hljs-title class_">Path2D</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path2D</span>()<br>    <span class="hljs-comment">//需要在屏幕外多画一个波浪，这里先将画笔移动到画布|屏幕外，记得加上动画的偏移量 dx</span><br>    path.<span class="hljs-title function_">moveTo</span>(-<span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">dx</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">baseHeight</span>)<br>    <span class="hljs-keyword">let</span> startX = -<span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">dx</span><span class="hljs-comment">//记录开始点的横坐标</span><br>    <span class="hljs-comment">//需要多画一个波浪，直接循环开始画就好了</span><br>    <span class="hljs-keyword">while</span> (startX &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">dx</span>) &#123;<br><br>      <span class="hljs-keyword">let</span> endY = <span class="hljs-variable language_">this</span>.<span class="hljs-property">baseHeight</span><br>      <span class="hljs-comment">//画向下和向上的波浪，全靠控制点的纵坐标控制波浪的上线</span><br>      path.<span class="hljs-title function_">quadraticCurveTo</span>(startX + <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span> / <span class="hljs-number">4</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">baseHeight</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveHeight</span>, startX + <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span>/<span class="hljs-number">2</span>, endY)<br>      path.<span class="hljs-title function_">quadraticCurveTo</span>(startX + <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span> / <span class="hljs-number">4</span>*<span class="hljs-number">3</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">baseHeight</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveHeight</span>, startX + <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span>, endY)<br>      <span class="hljs-comment">//画完一上一下这一组波浪后更新起始点坐标</span><br>      startX += <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span><br>    &#125;<br>    <span class="hljs-comment">//需要将波浪线下方的区域填满颜色，这里取巧圈起来一个框，使用 fill 方法填充</span><br>    path.<span class="hljs-title function_">lineTo</span>(startX ,<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span>) <span class="hljs-comment">//波浪线最右侧画一条到画布底部的垂线</span><br>    path.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">0</span> ,<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span>)<span class="hljs-comment">//画布底部的横线</span><br>    path.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">0</span> ,<span class="hljs-variable language_">this</span>.<span class="hljs-property">baseHeight</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveHeight</span>) <span class="hljs-comment">//波浪线最左侧到画布底部的垂线</span><br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#39d167&quot;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#39d167&quot;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">10</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">fill</span>(path)<br><br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>).<span class="hljs-title function_">layoutWeight</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>)<br>        .<span class="hljs-title function_">onAreaChange</span>(<span class="hljs-function">(<span class="hljs-params">oldValue, newValue</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span> = <span class="hljs-built_in">parseInt</span>(newValue.<span class="hljs-property">width</span>.<span class="hljs-title function_">toString</span>())<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span> = <span class="hljs-built_in">parseInt</span>(newValue.<span class="hljs-property">height</span>.<span class="hljs-title function_">toString</span>())<br><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">baseHeight</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span> - <span class="hljs-number">300</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">waveWidth</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span> / <span class="hljs-number">2</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawWave</span>()<br><br>        &#125;)<br>      <span class="hljs-title class_">Row</span>() &#123;<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">intervalTimer</span> != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">intervalTimer</span>)<br>          &#125;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">intervalTimer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawWave</span>()<br>          &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">10</span>)<br>        &#125;)<br>        <span class="hljs-title class_">Blank</span>().<span class="hljs-title function_">width</span>(<span class="hljs-number">15</span>)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;停止&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">intervalTimer</span> != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">intervalTimer</span>)<br>          &#125;<br>        &#125;)<br>      &#125;.<span class="hljs-title function_">margin</span>(&#123; <span class="hljs-attr">bottom</span>: <span class="hljs-number">10</span> &#125;)<br><br>    &#125;<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>上面就是完整的代码了，github 仓库在这里：<a href="https://github.com/huangyuanlove/HelloArkUI/blob/main/entry/src/main/ets/pages/playground/WaveView.ets">https://github.com/huangyuanlove/HelloArkUI/blob/main/entry/src/main/ets/pages/playground/WaveView.ets</a><br><a href="https://github.com/huangyuanlove/HelloArkUI/blob/main/entry/src/main/ets/pages/playground/WaveLinePage.ets">https://github.com/huangyuanlove/HelloArkUI/blob/main/entry/src/main/ets/pages/playground/WaveLinePage.ets</a></p><h3 id="进化"><a href="#进化" class="headerlink" title="进化"></a>进化</h3><p>稍微修改一下就可以做成其他效果<br>比如将<code>baseHeight</code>也用<code>@State</code>修饰一下，同时在定时器中更新一下，就可以实现注水效果<br>再将画布裁成圆形，就是一个简单的充电、内存加速球效果。再做点随机的粒子效果或者多画几条浅色的波浪线，效果就更好了</p><hr><p>以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Android 中 canvas 能画出来的东西鸿蒙的 canvas 还画不了，不大可能吧？有个朋友问鸿蒙应用中想实现波浪效果，应该咋画？这</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>riverpod2中的修饰符及注解</title>
    <link href="https://blog.huangyuanlove.com/2024/03/27/riverpod2%E4%B8%AD%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6%E5%8F%8A%E6%B3%A8%E8%A7%A3/"/>
    <id>https://blog.huangyuanlove.com/2024/03/27/riverpod2%E4%B8%AD%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6%E5%8F%8A%E6%B3%A8%E8%A7%A3/</id>
    <published>2024-03-27T02:43:24.000Z</published>
    <updated>2024-03-27T02:44:14.329Z</updated>
    
    <content type="html"><![CDATA[<p>原文来自：<a href="https://codewithandrea.com/articles/flutter-state-management-riverpod/">https://codewithandrea.com/articles/flutter-state-management-riverpod/</a></p><h3 id="监听、观察、选择、记录、重建"><a href="#监听、观察、选择、记录、重建" class="headerlink" title="监听、观察、选择、记录、重建"></a>监听、观察、选择、记录、重建</h3><h4 id="ref-read-or-ref-watch"><a href="#ref-read-or-ref-watch" class="headerlink" title="ref.read or ref.watch"></a>ref.read or ref.watch</h4><p>在上一篇中，我们使用了 ref.read和 ref.watch，那么这两者在什么情况下使用？<br>一般来讲，如果需要在Provider 值发生改变时更新依赖它的 widget，就使用 watch。比如 我们在 build 函数中使用watch,这确保了如果提供者的值发生更改，我们会重建依赖它的widget.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterStateProvider = StateProvider&lt;<span class="hljs-built_in">int</span>&gt;((_) =&gt; <span class="hljs-number">0</span>);<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CounterWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>    <span class="hljs-meta">@override</span><br>    Widget build(BuildContext context, WidgetRef ref) &#123;<br>      <span class="hljs-comment">// 1. watch the provider and rebuild when the value changes</span><br>      <span class="hljs-keyword">final</span> counter = ref.watch(counterStateProvider);<br>      <span class="hljs-keyword">return</span> ElevatedButton(<br>        <span class="hljs-comment">// 2. use the value</span><br>        child: Text(<span class="hljs-string">&#x27;Value: <span class="hljs-subst">$counter</span>&#x27;</span>),<br>        <span class="hljs-comment">// 3. change the state inside a button callback</span><br>        onPressed: () =&gt; ref.read(counterStateProvider.notifier).state++,<br>      );<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>如果我们只是读取到 Provider 的值做操作，一般使用 read，比如上面点击 ElevatedButton 时我们获取到 notifier 之后对count 做了++操作<br>需要注意的是：notifier语法仅适用于StateProvider和StateNotifierProvider，其工作方式如下：</p><ul><li>在StateProvider上调用ref.read(provider.notifier)，以返回底层的StateController，我们可以使用它来修改状态。</li><li>在StateNotifierProvider上调用ref.read(provider.notifier)，以返回底层的StateNotifier，以便我们可以调用其方法。</li></ul><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>我们有时候也会遇到这种需求：一个对象有多个属性，希望只有特定属性发生变化时才更新页面，这时候我们就可以使用 select 来完成</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>  Student(<span class="hljs-keyword">this</span>.firstName, <span class="hljs-keyword">this</span>.lastName, <span class="hljs-keyword">this</span>.age);<br><br>  <span class="hljs-built_in">String</span> firstName;<br>  <span class="hljs-built_in">String</span> lastName;<br>  <span class="hljs-built_in">int</span> age;<br>  Student copy() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Student(firstName, lastName, age);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们只需要在年龄发生改变时更新页面</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> age = ref.watch( provider.select((value) =&gt; value.age) );<br>    <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&quot;<span class="hljs-subst">$age</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h4><p>除此之外，我们还有 listen， 比如我们希望在 Provider 内容发生变化时弹出一个 SnakeBar提示用户，我们可以这样做:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterStateProvider = StateProvider&lt;<span class="hljs-built_in">int</span>&gt;((_) =&gt; <span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CounterWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-comment">// if we use a StateProvider&lt;T&gt;, the type of the previous and current </span><br>    <span class="hljs-comment">// values is StateController&lt;T&gt;</span><br>    ref.listen&lt;StateController&lt;<span class="hljs-built_in">int</span>&gt;&gt;(counterStateProvider.state, (previous, current) &#123;<br>      <span class="hljs-comment">// note: this callback executes when the provider value changes,</span><br>      <span class="hljs-comment">// not when the build method is called</span><br>      ScaffoldMessenger.of(context).showSnackBar(<br>        SnackBar(content: Text(<span class="hljs-string">&#x27;Value is <span class="hljs-subst">$&#123;current.state&#125;</span>&#x27;</span>)),<br>      );<br>    &#125;);<br>    <span class="hljs-comment">// watch the provider and rebuild when the value changes</span><br>    <span class="hljs-keyword">final</span> counter = ref.watch(counterStateProvider);<br>    <span class="hljs-keyword">return</span> ElevatedButton(<br>      <span class="hljs-comment">// use the value</span><br>      child: Text(<span class="hljs-string">&#x27;Value: <span class="hljs-subst">$counter</span>&#x27;</span>),<br>      <span class="hljs-comment">// change the state inside a button callback</span><br>      onPressed: () =&gt; ref.read(counterStateProvider.notifier).state++,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>我们需要在 Provider 内容发生改变时打印日志，以方便我们进行调试，但又不想在每个 Provider 中都加上打印代码，应该怎么办？<br>在 Rivepod 中有一个ProviderObserver类，我们可以继承它实现自己的逻辑</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProviderLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ProviderObserver</span> </span>&#123;<br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-keyword">void</span> didUpdateProvider(<br>      ProviderBase provider,<br>      <span class="hljs-built_in">Object?</span> previousValue,<br>      <span class="hljs-built_in">Object?</span> newValue,<br>      ProviderContainer container,<br>    ) &#123;<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[<span class="hljs-subst">$&#123;provider.name ?? provider.runtimeType&#125;</span>] value: <span class="hljs-subst">$newValue</span>&#x27;</span>);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>同样的，需要将它添加到 ProviderScope内的观察者列表中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>    runApp(<br>      ProviderScope(observers: [ProviderLogger()], child: MyApp()),<br>    );<br>  &#125;<br></code></pre></td></tr></table></figure><p>为了方便我们区分是哪一个 Provider 的日志，我们在声明 Provider 时可以提供一个名字</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterStateProvider = StateProvider&lt;<span class="hljs-built_in">int</span>&gt;((ref) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;, name: <span class="hljs-string">&#x27;main_page_counter&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="autoDispose"><a href="#autoDispose" class="headerlink" title="autoDispose"></a>autoDispose</h4><p>上一篇中提到Riverpod 作者强烈建议将 Provider 声明为全局的而不是类内部，这样有一个问题，页面销毁时也就是provider没有任何监听者时并不会被重置。再次进入页面后还是页面销毁之前的值，比如 StateProvider 实现的计数功能。当我们在页面中点击加号，将数字变为 5 后，返回上一个页面后再次打开该页面，会发现页面还是 5。这有时不符合我们的需求，这里我们可以使用autoDispose来实现：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> autoDisposeProvider = StateProvider.autoDispose&lt;<span class="hljs-built_in">int</span>&gt;(((ref) &#123;<br>  ref.onDispose(() &#123;<br>    debugPrint(<span class="hljs-string">&quot;countProvider onDispose&quot;</span>);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;));<br><br><span class="hljs-keyword">final</span> countProvider = StateProvider&lt;<span class="hljs-built_in">int</span>&gt;((ref) =&gt; <span class="hljs-number">1</span>);<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RiverpodAutoDisposeWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">final</span> autoDisposeValue = ref.watch(autoDisposeProvider);<br>    <span class="hljs-keyword">final</span> normalValue = ref.watch(countProvider);<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;AutoDispose&quot;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: Column(children: [<br>        Text(<span class="hljs-string">&quot;autoDispose:当privder不被使用时，可以被自动释放&quot;</span>),<br>        Text(<span class="hljs-string">&quot;autoDisposeValue-&gt; <span class="hljs-subst">$&#123;autoDisposeValue&#125;</span>&quot;</span>),<br>        Text(<span class="hljs-string">&quot;normalValue-&gt; <span class="hljs-subst">$&#123;normalValue&#125;</span>&quot;</span>),<br>        Row(<br>          children: [<br>            ElevatedButton(<br>                onPressed: (() &#123;<br>                  ref.read(autoDisposeProvider.notifier).state++;<br>                  ref.read(countProvider.notifier).state++;<br>                &#125;),<br>                child: Text(<span class="hljs-string">&quot;增加计数&quot;</span>))<br>          ],<br>        )<br>      ]),<br>    );<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>可以看到当页面被销毁时，被autoDispose修饰的 provider 会被释放并重置。这里的 ref.onDispose会在没有监听者之后调用。</p><h4 id="keepAlive"><a href="#keepAlive" class="headerlink" title="keepAlive"></a>keepAlive</h4><p>我们可以使用 ref.keepAlive实现超时缓存。<br>简单粗暴点就是这样：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> tmpProvider = StateProvider.autoDispose&lt;<span class="hljs-built_in">int</span>&gt;((ref)&#123;<br><br>    <span class="hljs-comment">// get the [KeepAliveLink]</span><br>    <span class="hljs-keyword">final</span> link = ref.keepAlive();<br>    <span class="hljs-comment">// start a 30 second timer</span><br>    <span class="hljs-keyword">final</span> timer = Timer(<span class="hljs-keyword">const</span> <span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">30</span>), () &#123;<br>      <span class="hljs-comment">// dispose on timeout</span><br>      link.close();<br>    &#125;);<br>    <span class="hljs-comment">// make sure to cancel the timer when the provider state is disposed</span><br>    <span class="hljs-comment">// (prevents undesired test failures)</span><br>    ref.onDispose(() =&gt; timer.cancel());<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>我们可以使用<code>extension</code>封装一下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">extension</span> AutoDisposeRefCache <span class="hljs-keyword">on</span> AutoDisposeRef &#123;<br>  <span class="hljs-keyword">void</span> cacheFor(<span class="hljs-built_in">Duration</span> duration) &#123;<br>    <span class="hljs-keyword">final</span> link = keepAlive();<br>    <span class="hljs-keyword">final</span> timer = Timer(duration, () &#123;<br>      link.close();<br>    &#125;);<br>    onDispose(() &#123;<br>      timer.cancel();<br>    &#125;);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//使用</span><br><span class="hljs-keyword">final</span> timerCachedProvider = Provider.autoDispose&lt;<span class="hljs-built_in">int</span>&gt;((ref) &#123;<br>  ref.cacheFor(<span class="hljs-built_in">Duration</span>(minutes: <span class="hljs-number">5</span>));<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="family"><a href="#family" class="headerlink" title="family"></a>family</h4><p>我们可以用它向 Provider 提供参数，比如我们的计数器示例，比如想从指定的数字开始</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> countProviderBase = StateProvider.autoDispose.family&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt; ((ref,start)&#123;<br>  <span class="hljs-keyword">return</span> start;<br>&#125;);<br><span class="hljs-comment">//使用</span><br><span class="hljs-keyword">final</span> startValue =  ref.watch(countProviderBase(<span class="hljs-number">10</span>));<br></code></pre></td></tr></table></figure><h4 id="依赖覆盖"><a href="#依赖覆盖" class="headerlink" title="依赖覆盖"></a>依赖覆盖</h4><p>有时候我们希望使用 Provider 存储无法立即获取的对象或者值，比如做本地存储时用的<code>shared_preferences</code>。但是它的初始化是异步的，如果我们直接在 Provider 中使用则会提示</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> spProvider = Provider&lt;SharedPreferences&gt;((ref) &#123;<br>  <span class="hljs-keyword">return</span> SharedPreferences.getInstance();<span class="hljs-comment">//不可以这样使用</span><br>  <span class="hljs-comment">//The return type &#x27;Future&lt;SharedPreferences&gt;&#x27; isn&#x27;t a &#x27;SharedPreferences&#x27;, as required by the closure&#x27;s context.</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>这时候我们可以先抛出一个为实现的异常</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> sharedPreferencesProvider = Provider&lt;SharedPreferences&gt;((ref) &#123;<br>    <span class="hljs-keyword">throw</span> UnimplementedError();<br>  &#125;);<br></code></pre></td></tr></table></figure><p>然后我们可以在 ProviderScope 组件中进行依赖覆盖</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">Future&lt;<span class="hljs-keyword">void</span>&gt; main() <span class="hljs-keyword">async</span> &#123;<br>  WidgetsFlutterBinding.ensureInitialized();<br>  <span class="hljs-keyword">final</span> sharedPreferences = <span class="hljs-keyword">await</span> SharedPreferences.getInstance();<br>  runApp(ProviderScope(<br>    overrides: [<br>      <span class="hljs-comment">// override the previous value with the new object</span><br>      sharedPreferencesProvider.overrideWithValue(sharedPreferences),<br>    ],<br>    child: MyApp(),<br>  ));<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就可以在任何地方观察sharedPreferencesProvider对象，而无需使用基于Future的API</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>我们在使用 Provider 时都需要手动编写，我们是否可以使用 build_runner生成？Riverpod 中已经提供了这种方式，但当前只支持以下几种</p><ul><li>Provider</li><li>FutureProvider</li><li>StreamProvider</li><li>NotifierProvider</li><li>AsyncNotifierProvider</li></ul><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-comment"># or flutter_riverpod/hooks_riverpod as per https://riverpod.dev/docs/getting_started</span><br>  <span class="hljs-attr">riverpod:</span> <span class="hljs-string">^2.4.10</span><br>  <span class="hljs-comment"># the annotation package containing @riverpod</span><br>  <span class="hljs-attr">riverpod_annotation:</span> <span class="hljs-string">^2.3.4</span><br><span class="hljs-attr">dev_dependencies:</span><br>  <span class="hljs-comment"># a tool for running code generators</span><br>  <span class="hljs-attr">build_runner:</span><br>  <span class="hljs-comment"># the code generator</span><br>  <span class="hljs-attr">riverpod_generator:</span> <span class="hljs-string">^2.3.9</span><br>  <span class="hljs-comment"># riverpod_lint makes it easier to work with Riverpod</span><br>  <span class="hljs-attr">riverpod_lint:</span> <span class="hljs-string">^2.3.7</span><br>  <span class="hljs-comment"># import custom_lint too as riverpod_lint depends on it</span><br>  <span class="hljs-attr">custom_lint:</span><br></code></pre></td></tr></table></figure><p>其中<code>riverpod_lint</code>和<code>custom_lint</code>这两个包是可选的。<br>之后我们需要在<code>watch</code>模式下启动代码生成器<br><code>flutter pub run build_runner watch -d</code>,较新的flutter版本会提示使用<code>dart run build_runner watch -d</code>。</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>我们来看个简单的示例，从 Provider 开始<br>没有使用注解生成器之前：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// dio_provider.dart</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:dio/dio.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;</span>;<br><span class="hljs-comment">// a provider for the Dio client to be used by the rest of the app</span><br><span class="hljs-keyword">final</span> dioProvider = Provider&lt;Dio&gt;((ref) &#123;<br>  <span class="hljs-keyword">return</span> Dio();<br>&#125;);<br></code></pre></td></tr></table></figure><p>使用注解生成器之后</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:dio/dio.dart&#x27;</span>;<br><span class="hljs-comment">// 1. import the riverpod_annotation package</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:riverpod_annotation/riverpod_annotation.dart&#x27;</span>;<br><span class="hljs-comment">// 2. add a part file</span><br><span class="hljs-keyword">part</span> <span class="hljs-string">&#x27;dio_provider.g.dart&#x27;</span>;<br><br><br><span class="hljs-comment">//需要执行 flutter pub run build_runner watch -d 来生成对应代码</span><br><span class="hljs-meta">@riverpod</span><br>Dio dio(DioRef ref)&#123;<br>  <span class="hljs-keyword">return</span> Dio();<br>&#125;<br></code></pre></td></tr></table></figure><p>会生成<code>dio_provider.g.dart</code>文件，内容如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// GENERATED CODE - DO NOT MODIFY BY HAND</span><br><br><span class="hljs-keyword">part</span> of <span class="hljs-string">&#x27;dio_provider.dart&#x27;</span>;<br><br><span class="hljs-comment">// **************************************************************************</span><br><span class="hljs-comment">// RiverpodGenerator</span><br><span class="hljs-comment">// **************************************************************************</span><br><br><span class="hljs-built_in">String</span> _$dioHash() =&gt; <span class="hljs-string">r&#x27;58eeefbd0832498ca2574c1fe69ed783c58d1d8f&#x27;</span>;<br><br><span class="hljs-comment">/// <span class="language-markdown">See also [dio].</span></span><br><span class="hljs-meta">@ProviderFor</span>(dio)<br><span class="hljs-keyword">final</span> dioProvider = AutoDisposeProvider&lt;Dio&gt;.internal(<br>  dio,<br>  name: <span class="hljs-string">r&#x27;dioProvider&#x27;</span>,<br>  debugGetCreateSourceHash:<br>      <span class="hljs-keyword">const</span> <span class="hljs-built_in">bool</span>.fromEnvironment(<span class="hljs-string">&#x27;dart.vm.product&#x27;</span>) ? <span class="hljs-keyword">null</span> : _$dioHash,<br>  dependencies: <span class="hljs-keyword">null</span>,<br>  allTransitiveDependencies: <span class="hljs-keyword">null</span>,<br>);<br><br><span class="hljs-keyword">typedef</span> DioRef = AutoDisposeProviderRef&lt;Dio&gt;;<br><span class="hljs-comment">// ignore_for_file: type=lint</span><br><span class="hljs-comment">// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member</span><br><br></code></pre></td></tr></table></figure><h4 id="autoDispose和-keepAlive"><a href="#autoDispose和-keepAlive" class="headerlink" title="autoDispose和 keepAlive"></a>autoDispose和 keepAlive</h4><p>在使用注解生成代码时，autoDispose 现在默认启用，并已重命名为 keepAlive。如果不想销毁 provider，可以将keepAlive设置为 true</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@Riverpod</span>(keepAlive: <span class="hljs-keyword">true</span>)<br><span class="hljs-built_in">int</span> counter(CounterRef ref)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的代码是这样的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">String</span> _$counterHash() =&gt; <span class="hljs-string">r&#x27;6b26baf29ab7c65258c6367ad62133458d88a2b3&#x27;</span>;<br><br><span class="hljs-comment">/// <span class="language-markdown">See also [counter].</span></span><br><span class="hljs-meta">@ProviderFor</span>(counter)<br><span class="hljs-keyword">final</span> counterProvider = Provider&lt;<span class="hljs-built_in">int</span>&gt;.internal(<br>  counter,<br>  name: <span class="hljs-string">r&#x27;counterProvider&#x27;</span>,<br>  debugGetCreateSourceHash:<br>      <span class="hljs-keyword">const</span> <span class="hljs-built_in">bool</span>.fromEnvironment(<span class="hljs-string">&#x27;dart.vm.product&#x27;</span>) ? <span class="hljs-keyword">null</span> : _$counterHash,<br>  dependencies: <span class="hljs-keyword">null</span>,<br>  allTransitiveDependencies: <span class="hljs-keyword">null</span>,<br>);<br><br><span class="hljs-keyword">typedef</span> CounterRef = ProviderRef&lt;<span class="hljs-built_in">int</span>&gt;;<br><span class="hljs-comment">// ignore_for_file: type=lint</span><br><span class="hljs-comment">// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member</span><br><br></code></pre></td></tr></table></figure><p>可以看到，当 keepAlive 是默认值(true)时，使用的是<code>AutoDisposeProvider</code>,为 false 时，使用的是<code>Provider</code></p><h4 id="FutureProvider-和-StreamProvider"><a href="#FutureProvider-和-StreamProvider" class="headerlink" title="FutureProvider 和 StreamProvider"></a>FutureProvider 和 StreamProvider</h4><p>几乎是一样的写法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@riverpod</span><br>Future&lt;<span class="hljs-built_in">String</span>&gt; generateName(GenerateNameRef ref) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">await</span> Future.delayed(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">5</span>));<br>    <span class="hljs-keyword">final</span> wordPair = generateWordPairs().first;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;wordPair.first&#125;</span>  <span class="hljs-subst">$&#123;wordPair.second&#125;</span>&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@riverpod</span><br>Stream&lt;<span class="hljs-built_in">int</span>&gt; timeCount(TimeCountRef ref)&#123;<br>  <span class="hljs-keyword">return</span> Stream.periodic(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">1</span>),(number)&#123;<br>    <span class="hljs-keyword">return</span> number +<span class="hljs-number">1</span>;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NotifierProvider"><a href="#NotifierProvider" class="headerlink" title="NotifierProvider"></a>NotifierProvider</h4><p>我们把上一篇中<code>NotifierProvider</code>例子简化一下，还是那个万能的计数器</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//声明一个Notifier对象</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Notifier</span>&lt;<span class="hljs-title">int</span>&gt;</span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">int</span> build() &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br> <span class="hljs-comment">//对 state 进行操作，也可以在外部直接操作</span><br>  <span class="hljs-keyword">void</span> increment()&#123;<br>    state ++;<br>  &#125;<br><br>&#125;<br><span class="hljs-comment">//两种 provider 的声明方式</span><br><span class="hljs-keyword">final</span> counterProvider = NotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;(() &#123;<br>  <span class="hljs-keyword">return</span> Counter();<br>&#125;);<br><span class="hljs-comment">// final counterProvider = NotifierProvider&lt;Counter, int&gt;(Counter.new);</span><br></code></pre></td></tr></table></figure><p>在 widget 中使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RiverpodGeneratorWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">final</span> count = ref.watch(counterProvider);<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: Text(<span class="hljs-string">&quot;RiverpodGeneratorWidget&quot;</span>),centerTitle: <span class="hljs-keyword">true</span>,),<br>      body: Column(children: [<br>        Text(<span class="hljs-string">&quot;count <span class="hljs-subst">$count</span>&quot;</span>)<br>      ],),<br>      floatingActionButton: FloatingActionButton(onPressed: ()&#123;<br>        <span class="hljs-comment">//调用 notifier 中定义的方法</span><br>        ref.read(counterProvider.notifier).increment();<br>        <span class="hljs-comment">//直接获取到 state 进行操作</span><br>        ref.read(counterProvider.notifier).state++;<br>      &#125;,child: Icon(Icons.add),<br>      ),<br>    );<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们如是用注解代码生成？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//counter.dart</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:riverpod_annotation/riverpod_annotation.dart&#x27;</span>;<br><span class="hljs-keyword">part</span> <span class="hljs-string">&#x27;counter.g.dart&#x27;</span>;<br><span class="hljs-meta">@riverpod</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">_</span>$<span class="hljs-title">Counter</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">int</span> build() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">void</span> increment()&#123;<br>    state ++;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，这里我们需要继承<code>_$Counter</code>而不是<code>Notifier</code>。<br>因为 <code>Counter</code>中的 <code>build</code> 方法返回值是<code>int</code>类型，生成的代码中也就使用了 <code>int</code>类型。简单来讲就是<code>build</code>方法的返回值类型决定了 <code>state</code> 的类型.</p><p>还是需要运行 <code>flutter pub run build_runner watch</code> 或者 <code>dart run build_runner watch</code>,这时会生成<code>counter.g.dart</code>文件，内容如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// GENERATED CODE - DO NOT MODIFY BY HAND</span><br><br><span class="hljs-keyword">part</span> of <span class="hljs-string">&#x27;counter.dart&#x27;</span>;<br><br><span class="hljs-comment">// **************************************************************************</span><br><span class="hljs-comment">// RiverpodGenerator</span><br><span class="hljs-comment">// **************************************************************************</span><br><br><span class="hljs-built_in">String</span> _$counterHash() =&gt; <span class="hljs-string">r&#x27;7015b4a05f8ed24a914f6b3aad12be335d0c73d7&#x27;</span>;<br><br><span class="hljs-comment">/// <span class="language-markdown">See also [Counter].</span></span><br><span class="hljs-meta">@ProviderFor</span>(Counter)<br><span class="hljs-keyword">final</span> counterProvider = AutoDisposeNotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;.internal(<br>  Counter.<span class="hljs-keyword">new</span>,<br>  name: <span class="hljs-string">r&#x27;counterProvider&#x27;</span>,<br>  debugGetCreateSourceHash:<br>      <span class="hljs-keyword">const</span> <span class="hljs-built_in">bool</span>.fromEnvironment(<span class="hljs-string">&#x27;dart.vm.product&#x27;</span>) ? <span class="hljs-keyword">null</span> : _$counterHash,<br>  dependencies: <span class="hljs-keyword">null</span>,<br>  allTransitiveDependencies: <span class="hljs-keyword">null</span>,<br>);<br><br><span class="hljs-keyword">typedef</span> _$Counter = AutoDisposeNotifier&lt;<span class="hljs-built_in">int</span>&gt;;<br><span class="hljs-comment">// ignore_for_file: type=lint</span><br><span class="hljs-comment">// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member</span><br><br></code></pre></td></tr></table></figure><h4 id="AsyncNotifierProvider"><a href="#AsyncNotifierProvider" class="headerlink" title="AsyncNotifierProvider"></a>AsyncNotifierProvider</h4><p>也是同样的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@riverpod</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncCounters</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">_</span>$<span class="hljs-title">AsyncCounters</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  FutureOr&lt;<span class="hljs-built_in">int</span>&gt; build()&#123;<br>    <span class="hljs-keyword">return</span> Future.delayed(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">3</span>),()&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// GENERATED CODE - DO NOT MODIFY BY HAND</span><br><br><span class="hljs-keyword">part</span> of <span class="hljs-string">&#x27;async_counter.dart&#x27;</span>;<br><br><span class="hljs-comment">// **************************************************************************</span><br><span class="hljs-comment">// RiverpodGenerator</span><br><span class="hljs-comment">// **************************************************************************</span><br><br><span class="hljs-built_in">String</span> _$asyncCountersHash() =&gt; <span class="hljs-string">r&#x27;787b7c6513c7794fa310550d32594b97238e7e3c&#x27;</span>;<br><br><span class="hljs-comment">/// <span class="language-markdown">See also [AsyncCounters].</span></span><br><span class="hljs-meta">@ProviderFor</span>(AsyncCounters)<br><span class="hljs-keyword">final</span> asyncCountersProvider =<br>    AutoDisposeAsyncNotifierProvider&lt;AsyncCounters, <span class="hljs-built_in">int</span>&gt;.internal(<br>  AsyncCounters.<span class="hljs-keyword">new</span>,<br>  name: <span class="hljs-string">r&#x27;asyncCountersProvider&#x27;</span>,<br>  debugGetCreateSourceHash: <span class="hljs-keyword">const</span> <span class="hljs-built_in">bool</span>.fromEnvironment(<span class="hljs-string">&#x27;dart.vm.product&#x27;</span>)<br>      ? <span class="hljs-keyword">null</span><br>      : _$asyncCountersHash,<br>  dependencies: <span class="hljs-keyword">null</span>,<br>  allTransitiveDependencies: <span class="hljs-keyword">null</span>,<br>);<br><br><span class="hljs-keyword">typedef</span> _$AsyncCounters = AutoDisposeAsyncNotifier&lt;<span class="hljs-built_in">int</span>&gt;;<br><span class="hljs-comment">// ignore_for_file: type=lint</span><br><span class="hljs-comment">// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member</span><br><br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="Notifier-和-AsyncNotifier：是否值得使用？"><a href="#Notifier-和-AsyncNotifier：是否值得使用？" class="headerlink" title="Notifier 和 AsyncNotifier：是否值得使用？"></a>Notifier 和 AsyncNotifier：是否值得使用？</h4><p>长时间以来，StateNotifier 一直在为我们提供服务，提供了一个存储复杂状态和修改状态逻辑的地方，使其不再依赖于小部件树。</p><p>Notifier 和 AsyncNotifier 旨在取代 StateNotifier 并带来一些新的好处：</p><p>更容易执行复杂的异步初始化<br>更符合人体工程学的 API：不再需要传递 ref<br>不再需要手动声明提供者（如果使用 Riverpod Generator）<br>对于新项目来说，这些好处是值得的，因为新的类可以帮助您用更少的代码实现更多的功能。</p><p>但如果您有很多现有代码使用 StateNotifier，则由您决定是否（或何时）迁移到新的语法。</p><p>无论如何，StateNotifier 还会存在一段时间，如果您愿意，可以逐个迁移您的提供者。</p><h4 id="使用-generator-还是手动编写-provider"><a href="#使用-generator-还是手动编写-provider" class="headerlink" title="使用 generator 还是手动编写 provider"></a>使用 generator 还是手动编写 provider</h4><p>使用 generator 需要我们执行额外的代码来生成对应的代码文件，并且在编写生成代码时体验不是那么的友好。但另外一方面，能省去我们编写模板的代码的时间。如何使用，看个人喜好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文来自：&lt;a href=&quot;https://codewithandrea.com/articles/flutter-state-management-riverpod/&quot;&gt;https://codewithandrea.com/articles/flutter-state-m</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
    <category term="riverpod" scheme="https://blog.huangyuanlove.com/tags/riverpod/"/>
    
  </entry>
  
  <entry>
    <title>riverpod2.x中的 Provider 简介</title>
    <link href="https://blog.huangyuanlove.com/2024/03/27/riverpod2-x%E4%B8%AD%E7%9A%84-Provider-%E7%AE%80%E4%BB%8B/"/>
    <id>https://blog.huangyuanlove.com/2024/03/27/riverpod2-x%E4%B8%AD%E7%9A%84-Provider-%E7%AE%80%E4%BB%8B/</id>
    <published>2024-03-27T02:13:58.000Z</published>
    <updated>2024-04-01T02:18:11.659Z</updated>
    
    <content type="html"><![CDATA[<p>原文来自：<a href="https://codewithandrea.com/articles/flutter-state-management-riverpod/">https://codewithandrea.com/articles/flutter-state-management-riverpod/</a></p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>Riverpod是一个响应式缓存和数据绑定框架，由Provider软件包演化而来。根据官方文档的说法，riverpod 是把 provider 重写了，实现了原来无法实现的功能。</p><h3 id="为什么使用-riverpod"><a href="#为什么使用-riverpod" class="headerlink" title="为什么使用 riverpod"></a>为什么使用 riverpod</h3><p>从设计上来说，Provider是对<code>InheritedWidget</code>的改进，因此它依赖于小部件树。<br>这是一个不幸的设计决策，可能会导致常见的<code>ProviderNotFoundException</code>：<br><img src="/image/riverpod/provider_demo.png" alt="provider_demo"><br>另一方面，Riverpod是编译时安全的，因为所有的 provider 都被声明为全局的，可以在任何地方访问，这也意味着这些 provider 可以不依赖于widget tree 来存储应用状态和业务逻辑。由于 Riverpod 是一个反应式框架，因此只需在需要时重建providers和widgets即可。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>3.0 已经有 preview 版本了，但还没有出正式版，这里使用稍微旧一点的版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">flutter_riverpod:</span> <span class="hljs-string">^2.4.10</span><br></code></pre></td></tr></table></figure><p>为了简单起见，这里没有使用<code>hooks_riverpod</code>,至于使用注解来生成 provier，会在后续介绍。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先我们需要改造一下程序入口，提供一个<code>ProviderScope</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<br>    ProviderScope(<br>      child: MyApp(),<br>    ),<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>接着声明一个全局的<code>Provider</code>，和这个 main 方法平级就可以</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> authorNameProvider = Provider&lt;<span class="hljs-built_in">String</span>&gt;(<br>  (ref) =&gt; <span class="hljs-string">&quot;xuan&quot;</span>,<br>);<br></code></pre></td></tr></table></figure><p>然后改造一下<code>MyApp</code>,让它可以读取到数据。改造前是继承<code>StatelessWidget</code>,这里需要改成继承自<code>ConsumerWidget</code>.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> value = ref.watch(helloWorldProvider);<br><br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(title:  Text(<span class="hljs-string">&#x27;ProviderWidget&#x27;</span>)),<br>        body: Center(<br>          child: Text(value),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，继承<code>ConsumerWidget</code>之后，<code>build</code>方法的签名变了，多了一个<code>WidgetRef</code>对象，我们就是使用这个对象来读取、观察、监听各种 provider。</p><p>除了继承<code>ConsumerWidget</code>之外，还有其他方案可供使用</p><h4 id="使用-Consumer"><a href="#使用-Consumer" class="headerlink" title="使用 Consumer"></a>使用 Consumer</h4><p>在旧代码中新增使用 riverpod，但又不打算大面积重构时，可以考虑这种方案:使用<code>Consumer</code>包裹需要更新的控件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_widget/third_part/riverpod/riverpod_widget.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:widget_with_codeview/widget_with_codeview.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProviderWithConsumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;ProviderWithConsumer&quot;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: WidgetWithCodeView(<br>        child: Column(children: [<br>          Text(<br>            <span class="hljs-string">&quot;有一个包含复杂布局的大型小部件类，您可以使用 Consumer 来仅重新构建依赖于提供者的小部件\n创建小而可重用的小部件有利于组合，使代码更加简洁、性能更高，更易于理解。\n如果您遵循这一原则并创建小而可重用的小部件，那么大部分时间您将自然而然地使用 ConsumerWidget。&quot;</span>,<br>            style: TextStyle(color: Colors.blue, fontSize: <span class="hljs-number">16</span>),<br>          ),<br>          Consumer(builder: (_, ref, __) &#123;<br>            <span class="hljs-keyword">return</span> Text(ref.read(helloWorldProvider));<br>          &#125;)<br>        ]),<br>        filePath: <span class="hljs-string">&quot;lib/third_part/riverpod/provider_with_consumer.dart&quot;</span>,<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中的<code>WidgetWithCodeView</code>是三方库<code>widget_with_codeview</code>用来展示代码的控件。去除后没有影响。</p><h4 id="使用ConsumerStatefulWidget"><a href="#使用ConsumerStatefulWidget" class="headerlink" title="使用ConsumerStatefulWidget"></a>使用ConsumerStatefulWidget</h4><p>相对于<code>ConsumerWidget</code>来代替<code>StatelessWidget</code>,<code>使用ConsumerStatefulWidget</code>是用来代替<code>StatefulWidget</code>.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_widget/third_part/riverpod/riverpod_widget.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:widget_with_codeview/widget_with_codeview.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProviderWithConsumerStatefulWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerStatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  ConsumerState&lt;ProviderWithConsumerStatefulWidget&gt; createState() &#123;<br>    <span class="hljs-keyword">return</span> ProviderWithConsumerStatefulWidgetState();<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProviderWithConsumerStatefulWidgetState</span></span><br><span class="hljs-class">    <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerState</span>&lt;<span class="hljs-title">ProviderWithConsumerStatefulWidget</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    <span class="hljs-comment">// 3. if needed, we can read the provider inside initState</span><br>    <span class="hljs-keyword">final</span> helloWorld = ref.read(helloWorldProvider);<br>    <span class="hljs-built_in">print</span>(helloWorld); <span class="hljs-comment">// &quot;Hello world&quot;</span><br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-comment">// 4. use ref.watch() to get the value of the provider</span><br>    <span class="hljs-keyword">final</span> helloWorld = ref.watch(helloWorldProvider);<br><br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;ProviderWithConsumerStatefulWidget&quot;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: WidgetWithCodeView(<br>        child: Column(<br>          children: [<br>            Text(<br>              <span class="hljs-string">&quot;ConsumerStatefulWidget可以用来代替StatefulWidget\n当我们从ConsumerState进行子类化时，我们可以在所有小部件生命周期方法中访问ref对象。这是因为ConsumerState声明WidgetRef作为属性，类似于Flutter的State类声明BuildContext作为可以在所有小部件生命周期方法中直接访问的属性。&quot;</span>,<br>              style: TextStyle(color: Colors.blue, fontSize: <span class="hljs-number">16</span>),<br>            ),<br>            Text(helloWorld),<br>          ],<br>        ),<br>        filePath:<br>            <span class="hljs-string">&quot;lib/third_part/riverpod/provider_with_consumerStatefulWidget.dart&quot;</span>,<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>同样的需要使用<code>ConsumerState</code>代替原来的<code>State</code>.需要注意的是,在这里面我们并没有看到<code>WidgetRef</code>,但我们依旧可以在整个页面声明周期内访问<code>WidgetRef</code>对象的实例<code>ref</code>,这是因为<code>ConsumerState</code>将<code>WidgetRef</code>声明为属性。</p><h3 id="WidgetRef是什么"><a href="#WidgetRef是什么" class="headerlink" title="WidgetRef是什么"></a>WidgetRef是什么</h3><p>官方文档定义<code>WidgetRef</code>为允许Widgets和Provider交互的对象。可以用来观察(watch)Provider 值的改变，也可以作为<code>Consumer</code>和<code>ConsumerWidget</code>的参数，同样也可以作为<code>ConsumerState</code>的属性。<br>将<code>WidgetRef</code>和<code>BuildContext</code>做一下比较：我们可以通过<code>BuildContext</code>在 Widget tree 中访问祖先节点，比如<code>Theme.of(context)</code> 和 <code>MediaQuery.of(context)</code><br>而<code>WidgetRef</code>可以让我们在 app 中访问任意provider，前提是provider被声明为全局的。这也是设计的初衷。<br>当然，将 provider 声明在类内部，只允许该类访问在编译、运行时也不会报错，但这会影响关注点分离的原则。</p><h3 id="八中不同的-Provider"><a href="#八中不同的-Provider" class="headerlink" title="八中不同的 Provider"></a>八中不同的 Provider</h3><ul><li>Provider</li><li><del>StateProvider</del> (被NotifierProvider代替)</li><li><del>StateNotifierProvider</del> (被NotifierProvider代替)</li><li>FutureProvider</li><li>StreamProvider</li><li><del>ChangeNotifierProvider</del> (被NotifierProvider代替)</li><li>NotifierProvider (Riverpod 2.0新增)</li><li>AsyncNotifierProvider (Riverpod 2.0新增)</li></ul><p>以后会提到使用<code>riverpod_generator</code>包中的<code>@riverpod</code>注解来代替我们的手动声明provider</p><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><p>上面示例中的代码就是用的这一个，更适合提供一些不会变的常量值，比如 Dio 实例、版本号、格式化对象、数据库对象等</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> dateFormatterProvider = Provider&lt;DateFormat&gt;((ref) &#123;<br>  <span class="hljs-keyword">return</span> DateFormat.MMMEd();<br>&#125;);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-comment">// retrieve the formatter</span><br>    <span class="hljs-keyword">final</span> formatter = ref.watch(dateFormatterProvider);<br>    <span class="hljs-comment">// use it</span><br>    <span class="hljs-keyword">return</span> Text(formatter.format(<span class="hljs-built_in">DateTime</span>.now()));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StateProvider"><a href="#StateProvider" class="headerlink" title="StateProvider"></a>StateProvider</h4><p>可以用来存储一些简单的变量，比如计数器</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;</span>;<br><br><span class="hljs-keyword">final</span> globalStateProvider = StateProvider((ref) =&gt; <span class="hljs-number">1</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StateProviderDemoWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-comment">//不推荐</span><br>  <span class="hljs-keyword">final</span> localStateProvider = StateProvider((ref) =&gt; <span class="hljs-number">1</span>);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;StateProviderDemoWidget&quot;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: Center(<br>          child: Flex(<br>        direction: Axis.vertical,<br>        children: [<br>          Text(<span class="hljs-string">&quot;globalStateProvider count <span class="hljs-subst">$&#123;ref.watch(globalStateProvider)&#125;</span>&quot;</span>),<br>          Text(<span class="hljs-string">&quot;localStateProvider count <span class="hljs-subst">$&#123;ref.watch(localStateProvider)&#125;</span>&quot;</span>),<br>          Text(<br>            <span class="hljs-string">&quot;StateProvider.state标记为过时，并将在3.0移除&quot;</span>,<br>            style: TextStyle(color: Colors.red, fontSize: <span class="hljs-number">14</span>),<br>          ),<br>          Text(<span class="hljs-string">&quot;声明为全局，则状态一直被保存，直到应用重启。&quot;</span>,<br>              style: TextStyle(color: Colors.blue, fontSize: <span class="hljs-number">14</span>)),<br>          Text(<span class="hljs-string">&quot;声明为类成员，则页面重启则重新初始化。&quot;</span>,<br>              style: TextStyle(color: Colors.blue, fontSize: <span class="hljs-number">14</span>)),<br>          Text(<span class="hljs-string">&quot;StateProvider适用于存储简单的状态变量，如枚举、字符串、布尔值和数字&quot;</span>,<br>              style: TextStyle(color: Colors.blue, fontSize: <span class="hljs-number">14</span>)),<br>          IconButton(<br>            icon: Icon(Icons.plus_one_sharp),<br>            onPressed: () &#123;<br>              ref.read(globalStateProvider.notifier).state++;<br>              ref.read(localStateProvider.notifier).state++;<br>            &#125;,<br>          ),<br>        ],<br>      )),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里有一些有意思的事情。我们声明了两个 Provider，一个是全局的，一个是类内部的。<br>当我们打开页面点击几次按钮之后，页面内容更新，这时候我们返回上一页再次打开这个页面，会发现<code>globalStateProvider</code>提供的值还是上一次返回时候的值，而<code>localStateProvider</code>提供的值是初始值。因为<code>localStateProvider</code>在页面关闭时就被销毁了，这种情况似乎更符合我们没有使用 riverpod 的习惯。这里可以使用 autoDispose 让<code>globalStateProvider</code>在所有 watcher 被销毁也可以重置。</p><h4 id="StateNotifierProvider"><a href="#StateNotifierProvider" class="headerlink" title="StateNotifierProvider"></a>StateNotifierProvider</h4><p>可以用它来监听和导出一个 <code>StateNotifier</code> ,<code>StateNotifierProvider</code> 和 <code>StateNotifier</code> 非常适合管理因事件或用户交互而改变的状态。这里有一个 <code>todolist</code>示例。<br>我们先定义一个 todo 的对象,实现一个 copyWith 方法来复制当前对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@immutable</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Todo</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> Todo(<br>      &#123;<span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.id, <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.description, <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.completed&#125;);<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> id;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> description;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">bool</span> completed;<br>  Todo copyWith(&#123;<span class="hljs-built_in">String?</span> id, <span class="hljs-built_in">String?</span> description, <span class="hljs-built_in">bool?</span> completed&#125;) &#123;<br>    <span class="hljs-keyword">return</span> Todo(<br>      id: id ?? <span class="hljs-keyword">this</span>.id,<br>      description: description ?? <span class="hljs-keyword">this</span>.description,<br>      completed: completed ?? <span class="hljs-keyword">this</span>.completed,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们继承<code>StateNotifier</code>实现自己的<code>TodosNotifier</code>类，并完善所需逻辑</p><ol><li>统计已完成的待办</li><li>添加待办</li><li>删除待办</li><li>完成、取消完成待办</li><li>全选，反全选</li><li>是否选中全部</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodosNotifier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StateNotifier</span>&lt;<span class="hljs-title">List</span>&lt;<span class="hljs-title">Todo</span>&gt;&gt; </span>&#123;<br>  TodosNotifier() : <span class="hljs-keyword">super</span>([]);<br><br>  <span class="hljs-keyword">void</span> addTodo(Todo todo) &#123;<br>    state = [...state, todo];<br>  &#125;<br><br>  <span class="hljs-built_in">int</span> completedCount() &#123;<br>    <span class="hljs-built_in">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> todo <span class="hljs-keyword">in</span> state) &#123;<br>      <span class="hljs-keyword">if</span> (todo.completed) &#123;<br>        count++;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> removeTodo(<span class="hljs-built_in">String</span> todoId) &#123;<br>    state = [<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> todo <span class="hljs-keyword">in</span> state)<br>        <span class="hljs-keyword">if</span> (todo.id != todoId) todo,<br>    ];<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> toggle(<span class="hljs-built_in">String</span> todoID) &#123;<br>    state = [<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> todo <span class="hljs-keyword">in</span> state)<br>        <span class="hljs-keyword">if</span> (todo.id == todoID)<br>          todo.copyWith(completed: !todo.completed)<br>        <span class="hljs-keyword">else</span><br>          todo<br>    ];<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> selectAll() &#123;<br>    state = [<span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> todo <span class="hljs-keyword">in</span> state) todo.copyWith(completed: <span class="hljs-keyword">true</span>)];<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> unSelectAll() &#123;<br>    state = [<span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> todo <span class="hljs-keyword">in</span> state) todo.copyWith(completed: <span class="hljs-keyword">false</span>)];<br>  &#125;<br><br>  <span class="hljs-built_in">bool</span> isSelectAll() &#123;<br>    <span class="hljs-built_in">bool</span> result = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> todo <span class="hljs-keyword">in</span> state) &#123;<br>      <span class="hljs-keyword">if</span> (!todo.completed) &#123;<br>        result = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着声明一个全局的<code>StateNotifierProvider</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> todoProvider =<br>    StateNotifierProvider&lt;TodosNotifier, <span class="hljs-built_in">List</span>&lt;Todo&gt;&gt;((ref) =&gt; TodosNotifier());<br></code></pre></td></tr></table></figure><p>最后我们就可以在页面中使用了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StateNotifierProviderWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-built_in">List</span>&lt;Todo&gt; todos = ref.watch(todoProvider);<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;State Notifier Provider Widget&quot;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: Column(<br>        children: [<br>          Text(<span class="hljs-string">&quot;StateNotifierProvider和StateNotifier非常适合管理可能会因事件或用户交互而发生变化的状态。&quot;</span>),<br>          Text(<span class="hljs-string">&quot;注意StateNotifier中通知更新时是比较的对象内存地址&quot;</span>),<br>          Divider(),<br>          Container(<br>            child: Text(<br>                <span class="hljs-string">&quot;共<span class="hljs-subst">$&#123;todos.length.toString()&#125;</span>,完成-》<span class="hljs-subst">$&#123;ref.read(todoProvider.notifier).completedCount()&#125;</span>&quot;</span>),<br>          ),<br>          CheckboxListTile(<br>            value: ref.read(todoProvider.notifier).isSelectAll(),<br>            onChanged: (value) &#123;<br>              <span class="hljs-keyword">if</span> (value ?? <span class="hljs-keyword">false</span>) &#123;<br>                ref.read(todoProvider.notifier).selectAll();<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                ref.read(todoProvider.notifier).unSelectAll();<br>              &#125;<br>            &#125;,<br>            title: Text(<span class="hljs-string">&quot;全选&quot;</span>),<br>          ),<br>          Expanded(<br>              child: ListView(<br>            shrinkWrap: <span class="hljs-keyword">true</span>,<br>            children: [<br>              <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> todo <span class="hljs-keyword">in</span> todos)<br>                Dismissible(<br>                  key: Key(todo.id),<br>                  child: CheckboxListTile(<br>                    value: todo.completed,<br>                    onChanged: (value) =&gt;<br>                        ref.read(todoProvider.notifier).toggle(todo.id),<br>                    title: Text(todo.description),<br>                  ),<br>                  onDismissed: (direction) =&gt;<br>                      &#123;ref.read(todoProvider.notifier).removeTodo(todo.id)&#125;,<br>                ),<br>            ],<br>          )),<br>        ],<br>      ),<br>      floatingActionButton: FloatingActionButton(<br>        child: <span class="hljs-keyword">const</span> Icon(Icons.add),<br>        onPressed: () &#123;<br>          <span class="hljs-keyword">final</span> notifier = ref.read(todoProvider.notifier);<br>          notifier.addTodo(Todo(<br>              id: <span class="hljs-built_in">DateTime</span>.now().microsecond.toString(),<br>              description: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;DateTime.now().microsecondsSinceEpoch&#125;</span>&quot;</span>,<br>              completed: <span class="hljs-keyword">false</span>));<br>        &#125;,<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们就完成了一个简易版的待办页面</p><p><img src="/image/riverpod/state_notifier_demo.png" alt="state_notifier_demo"></p><h4 id="FutureProvider"><a href="#FutureProvider" class="headerlink" title="FutureProvider"></a>FutureProvider</h4><p>我们经常会遇到一些耗时操作，比如请求服务器接口获取到数据后展示在页面上；比如读取配置文件等。这种情况我们就需要 <code>FutureProvider</code>了。<br>这里以读取 assets 中的配置文件为例:<br>首先声明一个<code>FutureProvider</code>泛型中填入返回值，使用<code>rootBundle.loadString</code>来读取资源文件的内容。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> getConfigFutureProvider =<br>    FutureProvider&lt;<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt;&gt;((ref) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-built_in">String</span> configContant =<br>      <span class="hljs-keyword">await</span> rootBundle.loadString(<span class="hljs-string">&quot;assets/fake_configurations.json&quot;</span>);<br>  <span class="hljs-keyword">final</span> configMap = jsonDecode(configContant) <span class="hljs-keyword">as</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt;;<br>  <span class="hljs-keyword">return</span> configMap;<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后再声明一个用来模拟请求服务端的<code>FutureProvider</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> wordPairProvider = FutureProvider&lt;<span class="hljs-built_in">String</span>&gt;((ref)  <span class="hljs-keyword">async</span>&#123;<br>  <span class="hljs-keyword">final</span> wordPair = generateWordPairs().first;<br>  <span class="hljs-keyword">await</span> Future.delayed(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">2</span>));<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;wordPair.first&#125;</span> - <span class="hljs-subst">$&#123;wordPair.second&#125;</span>&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意这里的<code>generateWordPairs</code>是三方包<code>english_words: ^4.0.0</code>提供的。在<code>wordPairProvider</code>中我们延迟 2 秒返回了结果，用以模拟网络耗时。<br>在页面中我们可以这么使用:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FutureProviderWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">final</span> AsyncValue&lt;<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt;&gt; getConfigResult =<br>        ref.watch(getConfigFutureProvider);<br>    <span class="hljs-keyword">final</span> AsyncValue&lt;<span class="hljs-built_in">String</span>&gt; wordPairResult = ref.watch(wordPairProvider);<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;FutureProvider&quot;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: RefreshIndicator(<br>        onRefresh: () =&gt; ref.refresh(wordPairProvider.future),<br>        child: ListView(<br>          children: [<br>            getConfigResult.when(<br>                data: (data) &#123;<br>                  <span class="hljs-keyword">return</span> Text(data.toString());<br>                &#125;,<br>                error: (error, stack) &#123;<br>                  <span class="hljs-keyword">return</span> Text(error.toString());<br>                &#125;,<br>                loading: () =&gt; <span class="hljs-keyword">const</span> CircularProgressIndicator()),<br>            wordPairResult.when(data: (data) &#123;<br>              <span class="hljs-keyword">return</span> Text(data);<br>            &#125;, error: (error, stack) &#123;<br>              <span class="hljs-keyword">return</span> ElevatedButton(<br>                  onPressed: () &#123;<br>                    ref.refresh(wordPairProvider.future);<br>                  &#125;,<br>                  child: Text(<span class="hljs-string">&quot;点击刷新&quot;</span>));<br>            &#125;, loading: () &#123;<br>              <span class="hljs-keyword">return</span> CircularProgressIndicator();<br>            &#125;),<br>          ],<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意，<code>ref.watch(FutureProvider)</code>的返回值是AsyncValue类型，我们可以使用模式匹配的方式来更新UI。这里会有三个状态:data,loading,error。<br>我们在页面上添加了一个下拉刷新的控价来刷新模拟网络请求的 provider:<code>ref.refresh(wordPairProvider.future)</code>。</p><ul><li>FutureProvider功能非常强大，可以用它来</li><li>执行和缓存异步操作（如网络请求）</li><li>处理异步操作的错误和加载状态</li><li>将多个异步值合并为另一个值</li><li>重新获取和刷新数据（适用于拉到刷新操作）<br>如果退出页面需要重新进行刷新，我们可以配合autoDispose使用:<code>FutureProvider.autoDispose&lt;String&gt;((ref) async &#123;&#125;</code></li></ul><h4 id="StreamProvider"><a href="#StreamProvider" class="headerlink" title="StreamProvider"></a>StreamProvider</h4><p>这里例子不大好写，它和 FutureProvider 类似，被 watch 时返回的也是 AsyncValue 类型，这里是一个计时器的示例。<br>同样的，先声明一个<code>StreamProvider</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> streamProvider = StreamProvider.autoDispose&lt;<span class="hljs-built_in">int</span>&gt;((ref) &#123;<br>    ref.onDispose(() &#123;<br>      debugPrint(<span class="hljs-string">&quot;streamProvider autoDispose&quot;</span>);<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> Stream.periodic(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">1</span>), (number) &#123;<br>      <span class="hljs-keyword">return</span> number + <span class="hljs-number">1</span>;<br>    &#125;);<br>  &#125;);<br><br></code></pre></td></tr></table></figure><p>然后在页面中使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamProviderWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">final</span> AsyncValue&lt;<span class="hljs-built_in">int</span>&gt; streamResult = ref.watch(streamProvider);<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;StreamProviderWidget&quot;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: Column(<br>        children: [<br>          Text(streamResult.toString()),<br>          streamResult.when(<br>                  data: (data) &#123;<br>                    <span class="hljs-keyword">return</span> Text(data.toString());<br>                  &#125;,<br>                  error: (error, stack) &#123;<br>                    <span class="hljs-keyword">return</span> Text(error.toString());<br>                  &#125;,<br>                  loading: () =&gt; CircularProgressIndicator())<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="ChangeNotifierProvider"><a href="#ChangeNotifierProvider" class="headerlink" title="ChangeNotifierProvider"></a>ChangeNotifierProvider</h4><p>建议使用 NotifierProvider 代替。<br>这里是一个计数器示例。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CounterNotifier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChangeNotifier</span> </span>&#123;<br>  <span class="hljs-built_in">int</span> _count = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">int</span> <span class="hljs-keyword">get</span> count =&gt; _count;<br>  <span class="hljs-keyword">void</span> increment() &#123;<br>    _count++;<br>    notifyListeners(); <span class="hljs-comment">// 当计数器值改变时通知所有监听者</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义ChangeNotifierProvider</span><br><span class="hljs-keyword">final</span> counterProvider = ChangeNotifierProvider&lt;CounterNotifier&gt;((ref) &#123;<br>  <span class="hljs-keyword">return</span> CounterNotifier();<br>&#125;);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChangeNotifierProviderWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">return</span>  Scaffold(<br>        appBar: AppBar(title: Text(<span class="hljs-string">&#x27;ChangeNotifierProviderWidget&#x27;</span>)),<br>        body: Center(<br>          child: Consumer(builder: (context, ref, _) &#123; <span class="hljs-comment">// 使用Consumer读取并显示状态</span><br>            <span class="hljs-keyword">final</span> counter = ref.watch(counterProvider);<br>            <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&#x27;Count: <span class="hljs-subst">$&#123;counter.count&#125;</span>&#x27;</span>);<br>          &#125;),<br>        ),<br>        floatingActionButton: FloatingActionButton(<br>          onPressed: () &#123;<br>            <span class="hljs-comment">// 在点击按钮时，通过ref调用notifier的方法更新状态</span><br>            ref.read(counterProvider.notifier).increment();<br>          &#125;,<br>          child: Icon(Icons.add),<br>        ),<br>      );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NotifierProvider"><a href="#NotifierProvider" class="headerlink" title="NotifierProvider"></a>NotifierProvider</h4><p>用来代替 StateProvider 和 ChangeNotifierProvider。<br>同样的，我们先定义一个数据类 Student</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>  Student(&#123;<span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.name, <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.id&#125;);<br>  <span class="hljs-built_in">String</span> name;<br>  <span class="hljs-built_in">String</span> id;<br><br>  Student copyWith(&#123;<span class="hljs-built_in">String?</span> copyID, <span class="hljs-built_in">String?</span> copyName&#125;) &#123;<br>    <span class="hljs-keyword">return</span> Student(name: copyName ?? <span class="hljs-keyword">this</span>.name, id: copyID ?? <span class="hljs-keyword">this</span>.id);<br>  &#125;<br>  <span class="hljs-built_in">String</span> toString()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$id</span> : <span class="hljs-subst">$name</span>&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个继承自 Notifier 的类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentNotifier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Notifier</span>&lt;<span class="hljs-title">Student</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Student build() &#123;<br>    <span class="hljs-keyword">return</span> generateStudent();<br>  &#125;<br><br>  Student generateStudent() &#123;<br>    <span class="hljs-keyword">final</span> wordPair = generateWordPairs().first;<br>    <span class="hljs-keyword">final</span> id = Random().nextInt(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-keyword">return</span> Student(<br>        name: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;wordPair.first&#125;</span> - <span class="hljs-subst">$&#123;wordPair.second&#125;</span>&quot;</span>, id: id.toString());<br>  &#125;<br><br>  <span class="hljs-built_in">String</span> toString() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;state.id&#125;</span> : <span class="hljs-subst">$&#123;state.name&#125;</span>&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> change() &#123;<br>    state = generateStudent();<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> changeNameWithCopy(<span class="hljs-built_in">String</span> name) &#123;<br>    state = state.copyWith(copyName: name);<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> justChangeName(<span class="hljs-built_in">String</span> name) &#123;<br>    state.name = name;<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> changeIdWithCopy(<span class="hljs-built_in">String</span> id) &#123;<br>    state = state.copyWith(copyID: id);<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> justChangeId(<span class="hljs-built_in">String</span> id) &#123;<br>    state.id = id;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，这里的 build 方法是必须的。同时为了解释刷新页面的条件，这里定义了几个改变属性的方法。xxxWithCopy是重新生成了对象，justxxx 则是在原对象上直接修改属性值。<br>然后声明<code>NotifierProvider</code>,这里提供了两种方式，哪一种都可以。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterProvider = NotifierProvider&lt;StudentNotifier, Student&gt;(() &#123;<br>  <span class="hljs-keyword">return</span> StudentNotifier();<br>&#125;);<br><span class="hljs-keyword">final</span> counterProviderOther =<br>    NotifierProvider&lt;StudentNotifier, Student&gt;(StudentNotifier.<span class="hljs-keyword">new</span>);<br></code></pre></td></tr></table></figure><p>在页面中我们这样使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CounterNotifierWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">final</span> student = ref.watch(counterProvider);<br>    ref.listen(counterProvider, (oldValue, newValue) &#123;<br>      logger.d(<br>          <span class="hljs-string">&quot;oldValue--&gt; <span class="hljs-subst">$&#123;oldValue?.id.toString()&#125;</span> \n newValue--&gt; <span class="hljs-subst">$&#123;newValue.id&#125;</span>&quot;</span>);<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;CounterNotifierWidget&quot;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: Column(<br>        children: [<br>          Text(<span class="hljs-string">&quot;student <span class="hljs-subst">$&#123;student.id.toString()&#125;</span> : <span class="hljs-subst">$&#123;student.name&#125;</span>  --&gt; <span class="hljs-subst">$&#123;student.toString()&#125;</span>&quot;</span>),<br><br>          ElevatedButton(<br>              onPressed: () &#123;<br>                ref<br>                    .read(counterProvider.notifier)<br>                    .changeIdWithCopy(Random().nextInt(<span class="hljs-number">100</span>).toString());<br>              &#125;,<br>              child: Text(<span class="hljs-string">&quot;changeIdWithCopy&quot;</span>)),<br>          ElevatedButton(<br>              onPressed: () &#123;<br>                <span class="hljs-keyword">final</span> wordPair = generateWordPairs().first;<br>                ref.read(counterProvider.notifier).changeNameWithCopy(<br>                    <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;wordPair.first&#125;</span> - -<span class="hljs-subst">$&#123;wordPair.second&#125;</span>&quot;</span>);<br>              &#125;,<br>              child: Text(<span class="hljs-string">&quot;changeNameWithCopy&quot;</span>)),<br><br>          ElevatedButton(<br>              onPressed: () &#123;<br>                ref<br>                    .read(counterProvider.notifier)<br>                    .justChangeId(Random().nextInt(<span class="hljs-number">100</span>).toString());<br>              &#125;,<br>              child: Text(<span class="hljs-string">&quot;justChangeId&quot;</span>)),<br>          ElevatedButton(<br>              onPressed: () &#123;<br>                <span class="hljs-keyword">final</span> wordPair = generateWordPairs().first;<br>                ref<br>                    .read(counterProvider.notifier)<br>                    .justChangeName(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;wordPair.first&#125;</span> - -<span class="hljs-subst">$&#123;wordPair.second&#125;</span>&quot;</span>);<br>              &#125;,<br>              child: Text(<span class="hljs-string">&quot;justChangeName&quot;</span>)),<br>        ],<br>      ),<br>      floatingActionButton: FloatingActionButton(<br>        onPressed: () &#123;<br>          ref.read(counterProvider.notifier).change();<br>        &#125;,<br>        child: Icon(Icons.change_circle),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行之后可以看到，只有当我们调用<code>xxxwithCopy</code>时才会刷新页面。戳到<code>NotifierProviderElement</code>源码中查看<code>updateShouldNotify</code>方法，发现是调用的identical(previous, next)方法来做判断的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@protected</span><br><span class="hljs-built_in">bool</span> updateShouldNotify(State previous, State next) &#123;<br>  <span class="hljs-keyword">return</span> !identical(previous, next);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AsyncNotifierProvider"><a href="#AsyncNotifierProvider" class="headerlink" title="AsyncNotifierProvider"></a>AsyncNotifierProvider</h4><p>相比<code>NotifierProvider</code>,它是异步而已.<br>还是先声明一个数据类Student</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br>  Student(&#123;<span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.name,<span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.id&#125;);<br>  <span class="hljs-built_in">String</span> name;<br>  <span class="hljs-built_in">String</span> id;<br><br>  <span class="hljs-built_in">String</span> toString()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$id</span> - <span class="hljs-subst">$name</span>&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>声明一个继承自AsyncNotifier的类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentAsyncNotifier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncNotifier</span>&lt;<span class="hljs-title">Student</span>&gt;</span>&#123;<br>  <span class="hljs-meta">@override</span><br>  FutureOr&lt;Student&gt; build() <span class="hljs-keyword">async</span> &#123;<br><br>      <span class="hljs-keyword">return</span> getInfo();<br>  &#125;<br><br> Future&lt;Student&gt; getInfo()<span class="hljs-keyword">async</span>&#123;<br>    <br>    <span class="hljs-keyword">await</span>  Future.delayed(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">3</span>));<br>    <span class="hljs-keyword">final</span> wordPair = generateWordPairs().first;<br>    <span class="hljs-keyword">return</span> Student(name: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;wordPair.first&#125;</span> - <span class="hljs-subst">$&#123;wordPair.second&#125;</span>&quot;</span>, id: Random().nextInt(<span class="hljs-number">100</span>).toString());<br>    <br>  &#125; <br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; refresh() <span class="hljs-keyword">async</span>&#123;<br>      state = AsyncValue.loading();<br>      state = <span class="hljs-keyword">await</span> AsyncValue.guard(()<span class="hljs-keyword">async</span> &#123;<br>        <span class="hljs-keyword">return</span> getInfo();<br>      &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>声明一个 Provider</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> studentAsyncNotifier = AsyncNotifierProvider&lt;StudentAsyncNotifier, Student&gt;(() &#123;<br>  <span class="hljs-keyword">return</span> StudentAsyncNotifier();<br>&#125;);<br></code></pre></td></tr></table></figure><p>在页面中使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncNotifierProviderWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span></span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br><br>    <span class="hljs-keyword">final</span> asyncValue = ref.watch(studentAsyncNotifier);<br><br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: Text(<span class="hljs-string">&quot;AsyncNotifierProviderWidget&quot;</span>),centerTitle: <span class="hljs-keyword">false</span>,),<br>      body: asyncValue.when(data: (data)&#123;<br>       <span class="hljs-keyword">return</span> Center(child: Text(data .toString()),);<br>      &#125;, error: (error,stack)&#123;<br>       <span class="hljs-keyword">return</span> Center(child: Text(error.toString()),);<br>      &#125;, loading: ()&#123;<br>        <span class="hljs-keyword">return</span> Center(child: CircularProgressIndicator());<br>      &#125;),<br>      floatingActionButton: FloatingActionButton(onPressed: ()&#123;<br>        ref.read(studentAsyncNotifier.notifier).refresh();<br>      &#125;,child: Icon(Icons.refresh),),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是：使用AsyncNotifier与autoDispose的正确方式是继承 AutoDisposeAsyncNotifier类而不是使用 autoDispose 修饰符。</p><p>以上就是 riverpod 中常见的 Provider 的用法示例，后面会介绍一些修饰符、注解相关的信息。</p><hr><p>以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文来自：&lt;a href=&quot;https://codewithandrea.com/articles/flutter-state-management-riverpod/&quot;&gt;https://codewithandrea.com/articles/flutter-state-m</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
    <category term="riverpod" scheme="https://blog.huangyuanlove.com/tags/riverpod/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙应用开发使用canvas实现球面运动动画</title>
    <link href="https://blog.huangyuanlove.com/2023/12/24/%E9%B8%BF%E8%92%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8canvas%E5%AE%9E%E7%8E%B0%E7%90%83%E9%9D%A2%E8%BF%90%E5%8A%A8%E5%8A%A8%E7%94%BB/"/>
    <id>https://blog.huangyuanlove.com/2023/12/24/%E9%B8%BF%E8%92%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8canvas%E5%AE%9E%E7%8E%B0%E7%90%83%E9%9D%A2%E8%BF%90%E5%8A%A8%E5%8A%A8%E7%94%BB/</id>
    <published>2023-12-24T03:38:04.000Z</published>
    <updated>2024-03-27T02:20:27.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>习惯了 Android 的 Canvas,用鸿蒙的 canvas 多少有点别扭<br>效果图<br><img src="/image/HarmonyOS/canvas_ball_animation.gif" alt="canvas_ball_animation.gif"><br>上面的图是用 transform 属性做的动画<br>下面的图是用 canvas 画的，参考自<a href="https://mp.weixin.qq.com/s/p_gy8s1SqPUTAa3wCIk7FQ">https://mp.weixin.qq.com/s/p_gy8s1SqPUTAa3wCIk7FQ</a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>众所周知，我们在手机或者平板上看到的 3D 动画只是在二维的投影，我们只需要计算好运动物体的大小和位置的对应关系，就可以实现类似 3D 的效果。想要了解具体的算法以及映射关系，可以阅读原文。<br>根据参考文章中的计算方式，我们只需要移植一下就行。这里是根据<code>总结</code>中的代码实现的<br>原文中的关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">double</span> <span class="hljs-variable">xr</span> <span class="hljs-operator">=</span> Math.toRadians(<span class="hljs-number">5</span>);  <span class="hljs-comment">//绕x轴旋转则把这个值设置为大于 0</span><br>    <span class="hljs-type">double</span> <span class="hljs-variable">yr</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//绕y轴旋转则把这个值设置为大于 0;  </span><br>    <span class="hljs-type">double</span> <span class="hljs-variable">zr</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//绕z轴旋转则把这个值设置为大于 0;  </span><br><br><span class="hljs-comment">//保存小球的位置、颜色及缩放</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;  <br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> color;  <br>        <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> x;  <br>        <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> y;  <br>        <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> z;   <br>        <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">scale</span> <span class="hljs-operator">=</span> <span class="hljs-number">1f</span>;  <br>    &#125;<br><span class="hljs-comment">//pointList 保存的是随机生成的小球相关信息</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pointList.size(); i++) &#123;  <br>  <br>            <span class="hljs-type">Point</span> <span class="hljs-variable">point</span> <span class="hljs-operator">=</span> pointList.get(i);  <br>            <span class="hljs-type">float</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> point.x;  <br>            <span class="hljs-type">float</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> point.y;  <br>            <span class="hljs-type">float</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> point.z;  <br>  <br>            <span class="hljs-comment">//绕X轴旋转，乘以X轴的旋转矩阵  </span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">rx1</span> <span class="hljs-operator">=</span> x;  <br>            <span class="hljs-type">float</span> <span class="hljs-variable">ry1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) (y * Math.cos(xr) + z * -Math.sin(xr));  <br>            <span class="hljs-type">float</span> <span class="hljs-variable">rz1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) (y * Math.sin(xr) + z * Math.cos(xr));  <br>  <br>            <span class="hljs-comment">// 绕Y轴旋转,乘以Y轴的旋转矩阵  </span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">rx2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) (rx1 * Math.cos(yr) + rz1 * Math.sin(yr));  <br>            <span class="hljs-type">float</span> <span class="hljs-variable">ry2</span> <span class="hljs-operator">=</span> ry1;  <br>            <span class="hljs-type">float</span> <span class="hljs-variable">rz2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) (rx1 * -Math.sin(yr) + rz1 * Math.cos(yr));  <br>  <br>            <span class="hljs-comment">// 绕Z轴旋转,乘以Z轴的旋转矩阵  </span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">rx3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) (rx2 * Math.cos(zr) + ry2 * -Math.sin(zr));  <br>            <span class="hljs-type">float</span> <span class="hljs-variable">ry3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) (rx2 * Math.sin(zr) + ry2 * Math.cos(zr));  <br>            <span class="hljs-type">float</span> <span class="hljs-variable">rz3</span> <span class="hljs-operator">=</span> rz2;  <br>  <br>  <br>            point.x = rx3;  <br>            point.y = ry3;  <br>            point.z = rz3;  <br>  <br>            <span class="hljs-comment">// 透视除法，z轴向内的方向  </span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">scale</span> <span class="hljs-operator">=</span> (<span class="hljs-number">2</span> * radius) / ((<span class="hljs-number">2</span> * radius) + rz3);  <br>            point.scale = scale;  <br>        <span class="hljs-comment">//到这里就完成了小球位置的计算，接下来就是需要定时更新上面xr、yr、zr的值就可以实现小球沿球面运动了</span><br>  <br>        &#125;<br><br></code></pre></td></tr></table></figure><h3 id="鸿蒙-transform-实现"><a href="#鸿蒙-transform-实现" class="headerlink" title="鸿蒙 transform 实现"></a>鸿蒙 transform 实现</h3><p>清楚了原理及计算方式，实现起来就简单了<br>先 stack 堆叠两个圆球，小球需要不断运动，x、y、z需要一直变化，使用<code>@State</code>修饰一下。值的变化过程就用上面原文中的计算方法。定时更新就用<code>setInterval</code>,组件的位移变化给我们提供了<code>transform</code>方法，需要一个<code>matrix4</code>对象，移动变化也不需要我们去填充矩阵，有对应的<code>translate</code>方法，组合起来代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> matrix4 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos.matrix4&#x27;</span><br><br><span class="hljs-meta">@Preview</span><br><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">AnimationOfSphericalPaths</span> &#123;<br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">angleX</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">translateX</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">translateY</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">translateZ</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">ballRadius</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">30</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">timerInterval</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">private</span> radius = <span class="hljs-number">200</span><br>  <span class="hljs-keyword">private</span> a = <span class="hljs-number">90</span><br>  <span class="hljs-keyword">private</span> b = <span class="hljs-number">0</span><br><br><br>  <span class="hljs-title function_">toRadians</span>(degrees): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">return</span> degrees * (<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">180</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">changeAngle</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> += <span class="hljs-number">3</span><br>    <span class="hljs-comment">// this.a += 3</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> &gt; <span class="hljs-number">360</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> - <span class="hljs-number">360</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> &gt; <span class="hljs-number">360</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> - <span class="hljs-number">360</span><br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">translateX</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toRadians</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)) * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toRadians</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>)) * <span class="hljs-number">2</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">translateY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toRadians</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)) * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toRadians</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>)) * <span class="hljs-number">2</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">translateZ</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toRadians</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>)) * <span class="hljs-number">2</span><br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ballRadius</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">translateZ</span> / <span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> * <span class="hljs-number">10</span> + <span class="hljs-number">50</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`translateX-&gt; <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.translateX&#125;</span> ,translateY-&gt; <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.translateY&#125;</span> ,translateZ-&gt; <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.translateZ&#125;</span>`</span>)<br><br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Stack</span>() &#123;<br>        <span class="hljs-title class_">Circle</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> * <span class="hljs-number">2</span>, <span class="hljs-attr">height</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> * <span class="hljs-number">2</span> &#125;).<span class="hljs-title function_">fill</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Yellow</span>)<br>        <span class="hljs-title class_">Circle</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">ballRadius</span>, <span class="hljs-attr">height</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">ballRadius</span> &#125;).<span class="hljs-title function_">fill</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Pink</span>)<br>          .<span class="hljs-title function_">transform</span>(matrix4.<span class="hljs-title function_">identity</span>().<span class="hljs-title function_">translate</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">translateX</span>, <span class="hljs-attr">y</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">translateY</span>, <span class="hljs-attr">z</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">translateZ</span> &#125;))<br>      &#125;.<span class="hljs-title function_">alignContent</span>(<span class="hljs-title class_">Alignment</span>.<span class="hljs-property">Center</span>).<span class="hljs-title function_">width</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> * <span class="hljs-number">2</span>).<span class="hljs-title function_">height</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> * <span class="hljs-number">2</span>)<br><br>      <span class="hljs-title class_">Row</span>() &#123;<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;start&quot;</span>)<br>          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">timerInterval</span> &gt; <span class="hljs-number">0</span>) &#123;<br>              <span class="hljs-keyword">return</span><br>            &#125;<br><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">timerInterval</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">changeAngle</span>()<br><br>            &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">20</span>)<br>          &#125;)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;stop&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timerInterval</span>)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">timerInterval</span> = <span class="hljs-number">0</span><br>        &#125;).<span class="hljs-title function_">margin</span>(&#123; <span class="hljs-attr">left</span>: <span class="hljs-number">48</span> &#125;)<br>      &#125;.<span class="hljs-title function_">margin</span>(&#123; <span class="hljs-attr">top</span>: <span class="hljs-number">48</span> &#125;)<br><br>    &#125;.<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">White</span>)<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="鸿蒙canvas实现"><a href="#鸿蒙canvas实现" class="headerlink" title="鸿蒙canvas实现"></a>鸿蒙canvas实现</h3><p>需要注意的是，鸿蒙里面的 math 包下没有<code>toRadians</code>方法，需要我们自己实现一下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">toRadians</span>(degrees): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> degrees * (<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">180</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>定时更新这里用了<code>setInterval</code><br>鸿蒙的 canvas 中也没有画笔的概念，需要设置<code>RenderingContextSettings</code>实例的填充方式及填充颜色<br>鸿蒙的 canvas 中也没有 drawcircle 方法，这里使用的是<code>Path2D</code>对象中画圆弧方法(arc)然后填充颜色的方式，需要注意是<code>Path2D.arc()</code>中的角度单位  </p><p>整体流程如下</p><ol><li>先生成随机的小球，分布在一个圆上generateBall()</li><li>计算小球的缩放比例及位置calculateRotateValue()</li><li>对小球排序，z 轴越大，越靠近我们，小球越大，越要遮盖住其他小球，越要最后画</li><li>所以先画背面的，再画正面的。这里的正面和背面是相对于中间的大球来说的，为了透视效果，背面的小球加上透明度，正面的小球不透明</li><li>定时更新就可以了</li></ol><p>下面是全部代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Preview</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">export</span> struct <span class="hljs-title class_">CanvasBallAnimation</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">settings</span>: <span class="hljs-title class_">RenderingContextSettings</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RenderingContextSettings</span>(<span class="hljs-literal">true</span>)<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">canvasRendering</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CanvasRenderingContext2D</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">settings</span>)<br>  <span class="hljs-keyword">private</span> canvasWidth = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">private</span> canvasHeight = <span class="hljs-number">0</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">canvasBallRoundRadius</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">canvasBallAnimationTimer</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">startDegree</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">5</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">xr</span>: <span class="hljs-built_in">number</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toRadians</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">startDegree</span>)<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">yr</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">zr</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">pointList</span>: <span class="hljs-title class_">Point</span>[] = []<br><br>  <span class="hljs-title function_">toRadians</span>(degrees): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">return</span> degrees * (<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">180</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">canvasBallAnimation</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">startDegree</span> += <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">startDegree</span> &gt; <span class="hljs-number">360</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">startDegree</span> -= <span class="hljs-number">360</span><br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">calculateRotateValue</span>()<br>    <span class="hljs-comment">//排序，先画背面的，再画正面的</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>.<span class="hljs-title function_">sort</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">comparator</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawFrontBall</span>()<br><br>    <span class="hljs-comment">//在中间画一个大圆</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawCenterBall</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawBackBall</span>()<br><br><br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br><br><br>      <span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>)<br>        .<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>)<br>        .<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;40%&quot;</span>)<br>        .<span class="hljs-title function_">onAreaChange</span>(<span class="hljs-function">(<span class="hljs-params">oldValue: Area, newValue: Area</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span> = <span class="hljs-built_in">parseInt</span>(newValue.<span class="hljs-property">width</span>.<span class="hljs-title function_">toString</span>())<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span> = <span class="hljs-built_in">parseInt</span>(newValue.<span class="hljs-property">height</span>.<span class="hljs-title function_">toString</span>())<br><br>          <span class="hljs-comment">//小球运动的半径</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallRoundRadius</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span>) / <span class="hljs-number">3</span><br>          <span class="hljs-comment">// this.canvasRendering.translate(this.canvasWidth / 2, this.canvasHeight / 2)</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">generateBall</span>()<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">calculateRotateValue</span>()<br>          <span class="hljs-comment">//排序，先画背面的，再画正面的</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>.<span class="hljs-title function_">sort</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">comparator</span>)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawFrontBall</span>()<br><br>          <span class="hljs-comment">//在中间画一个大圆</span><br>         <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawCenterBall</span>()<br><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawBackBall</span>()<br><br><br>        &#125;)<br>      <span class="hljs-title class_">Row</span>() &#123;<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;canvas ball start&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallAnimationTimer</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span><br>          &#125;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallAnimationTimer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">canvasBallAnimation</span>()<br>          &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">20</span>)<br>        &#125;)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;canvas ball end&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallAnimationTimer</span>)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallAnimationTimer</span> = <span class="hljs-number">0</span><br>        &#125;)<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">comparator</span>(<span class="hljs-attr">left</span>: <span class="hljs-title class_">Point</span>, <span class="hljs-attr">right</span>: <span class="hljs-title class_">Point</span>): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">if</span> (left.<span class="hljs-property">z</span> - right.<span class="hljs-property">z</span> &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (left.<span class="hljs-property">z</span> == right.<span class="hljs-property">z</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>  &#125;<br><br>  <span class="hljs-title function_">randomColor</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">r</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">256</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">g</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">256</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">256</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">`<span class="hljs-subst">$&#123;r&#125;</span><span class="hljs-subst">$&#123;g&#125;</span><span class="hljs-subst">$&#123;b&#125;</span>`</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`随机颜色--&gt; <span class="hljs-subst">$&#123;result&#125;</span>`</span>)<br>    <span class="hljs-keyword">return</span> result<br>  &#125;<br><br>  <span class="hljs-title function_">generateBall</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">let</span> maxBallCount = <span class="hljs-number">10</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span> = []<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; maxBallCount; i++) &#123;<br><br>        <span class="hljs-keyword">let</span> v = -<span class="hljs-number">1.0</span> + (<span class="hljs-number">2.0</span> * i - <span class="hljs-number">1.0</span>) / maxBallCount;<br>        <span class="hljs-keyword">if</span> (v &lt; -<span class="hljs-number">1.0</span>) &#123;<br>          v = <span class="hljs-number">1.0</span><br>        &#125;<br><br>        <span class="hljs-keyword">let</span> delta = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">acos</span>(v)<br>        <span class="hljs-keyword">let</span> alpha = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(maxBallCount * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) * delta<br>        <span class="hljs-keyword">let</span> point = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>()<br>        point.<span class="hljs-property">x</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallRoundRadius</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(alpha) * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(delta)<br>        point.<span class="hljs-property">y</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallRoundRadius</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(alpha) * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(delta)<br>        point.<span class="hljs-property">z</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallRoundRadius</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(delta)<br>        point.<span class="hljs-property">color</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">randomColor</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>.<span class="hljs-title function_">push</span>(point)<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">calculateRotateValue</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>.<span class="hljs-property">length</span>; i++) &#123;<br><br>      <span class="hljs-keyword">let</span> point = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>[i];<br>      <span class="hljs-keyword">let</span> x = point.<span class="hljs-property">x</span>;<br>      <span class="hljs-keyword">let</span> y = point.<span class="hljs-property">y</span>;<br>      <span class="hljs-keyword">let</span> z = point.<span class="hljs-property">z</span>;<br><br>      <span class="hljs-comment">//绕X轴旋转，乘以X轴的旋转矩阵</span><br>      <span class="hljs-keyword">let</span> rx1 = x;<br>      <span class="hljs-keyword">let</span> ry1 = (y * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">xr</span>) + z * -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">xr</span>));<br>      <span class="hljs-keyword">let</span> rz1 = (y * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">xr</span>) + z * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">xr</span>));<br><br>      <span class="hljs-comment">// 绕Y轴旋转,乘以Y轴的旋转矩阵</span><br>      <span class="hljs-keyword">let</span> rx2 = (rx1 * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">yr</span>) + rz1 * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">yr</span>));<br>      <span class="hljs-keyword">let</span> ry2 = ry1;<br>      <span class="hljs-keyword">let</span> rz2 = (rx1 * -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">yr</span>) + rz1 * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">yr</span>));<br><br>      <span class="hljs-comment">// 绕Z轴旋转,乘以Z轴的旋转矩阵</span><br>      <span class="hljs-keyword">let</span> rx3 = (rx2 * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">zr</span>) + ry2 * -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">zr</span>));<br>      <span class="hljs-keyword">let</span> ry3 = (rx2 * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">zr</span>) + ry2 * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">zr</span>));<br>      <span class="hljs-keyword">let</span> rz3 = rz2;<br><br><br>      point.<span class="hljs-property">x</span> = rx3;<br>      point.<span class="hljs-property">y</span> = ry3;<br>      point.<span class="hljs-property">z</span> = rz3;<br><br>      <span class="hljs-comment">// 透视除法，z轴向内的方向</span><br>      <span class="hljs-keyword">let</span> scale = (<span class="hljs-number">2</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallRoundRadius</span>) / ((<span class="hljs-number">2</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallRoundRadius</span>) + rz3);<br>      point.<span class="hljs-property">scale</span> = scale;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">drawFrontBall</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">let</span> point = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>[i];<br>      <span class="hljs-keyword">if</span> (point.<span class="hljs-property">z</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawBall</span>(point)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">drawBall</span>(<span class="hljs-params">point: Point</span>) &#123;<br>    <span class="hljs-keyword">if</span> (point.<span class="hljs-property">scale</span> &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">`#FF<span class="hljs-subst">$&#123;point.color&#125;</span>`</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">let</span> fillColor = <span class="hljs-string">`#<span class="hljs-subst">$&#123; <span class="hljs-built_in">Math</span>.round(point.scale * <span class="hljs-number">255</span>).toString(<span class="hljs-number">16</span>)&#125;</span><span class="hljs-subst">$&#123;point.color&#125;</span>`</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">fillStyle</span> = fillColor<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;填充颜色--&gt;&quot;</span> +fillColor)<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> ballPath2D = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path2D</span>()<br>    ballPath2D.<span class="hljs-title function_">arc</span>(point.<span class="hljs-property">x</span> * point.<span class="hljs-property">scale</span> +<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span> / <span class="hljs-number">2</span> , point.<span class="hljs-property">y</span> * point.<span class="hljs-property">scale</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span> / <span class="hljs-number">2</span>, <span class="hljs-number">5</span> + <span class="hljs-number">25</span> * point.<span class="hljs-property">scale</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">beginPath</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">fill</span>(ballPath2D)<br>  &#125;<br><br>  <span class="hljs-title function_">drawBackBall</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      <span class="hljs-keyword">let</span> point = <span class="hljs-variable language_">this</span>.<span class="hljs-property">pointList</span>[i];<br>      <span class="hljs-keyword">if</span> (point.<span class="hljs-property">z</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawBall</span>(point)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">drawCenterBall</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> circlePath2D = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path2D</span>()<br>    circlePath2D.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span>/<span class="hljs-number">2</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span>/<span class="hljs-number">2</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallRoundRadius</span>,<span class="hljs-number">0</span>,<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">beginPath</span>()<br><br>    <span class="hljs-keyword">let</span> radialGradient = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span>/<span class="hljs-number">2</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span>/<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasWidth</span>/<span class="hljs-number">2</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasHeight</span>/<span class="hljs-number">2</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasBallRoundRadius</span>)<br>    radialGradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.0</span>,<span class="hljs-string">&quot;#ff0000&quot;</span>)<br>    radialGradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.3</span>,<span class="hljs-string">&quot;#aaec5533&quot;</span>)<br>    radialGradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.9</span>,<span class="hljs-string">&quot;#11000000&quot;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">fillStyle</span>=radialGradient<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">fill</span>(circlePath2D)<br>  &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">z</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">scale</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h3&gt;&lt;p&gt;习惯了 Android 的 Canvas,用鸿蒙的 canvas 多少有点别扭&lt;br&gt;效果图&lt;br&gt;&lt;img src=&quot;/image/Har</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙应用开发踩坑记录</title>
    <link href="https://blog.huangyuanlove.com/2023/11/29/%E9%B8%BF%E8%92%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.huangyuanlove.com/2023/11/29/%E9%B8%BF%E8%92%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2023-11-29T06:50:40.000Z</published>
    <updated>2023-12-22T06:53:20.156Z</updated>
    
    <content type="html"><![CDATA[<p>使用HarmonyOS4+ArkUI+Stage模型进行开发的翻译软件，目前只是半成品，代码写的很挫。记录一下开发过程中踩过的坑。<br>项目地址：<br>码云<br><a href="https://gitee.com/huangyuan/HarmonyTranslator">https://gitee.com/huangyuan/HarmonyTranslator</a><br>github<br><a href="https://github.com/huangyuanlove/HarmonyTranslator">https://github.com/huangyuanlove/HarmonyTranslator</a><br>码云项目是从github导入的，偶尔会忘记同步</p><h4 id="冻屏、黑屏、假死"><a href="#冻屏、黑屏、假死" class="headerlink" title="冻屏、黑屏、假死"></a>冻屏、黑屏、假死</h4><p>运行环境是MetaPadPro 2019 鸿蒙4.0.0，使用api9+stage模型开发，运行在模拟器上正常，但是运行在该设备上出现冻屏现象，页面轮播图无法轮播，滑动组件无法发滑动，就像卡在了这一帧上一样。点击输入框键盘能弹出，但页面是黑的。可以通过锁屏、解锁或者音量键刷新页面。</p><p>感觉上就是屏幕不会主动刷新，需要按物理键让屏幕刷新一次似的。  </p><p>询问过朋友后发现，这个现象只会出现在麒麟系列芯片的手机或平板上，看到论坛也有人咨询相同的问题。向官方提工单后官方回复是已知问题，将会在HarmonyOS next系统中修复  </p><p>如果只是自己写着玩，可以安装 <a href="https://github.com/Genymobile/scrcpy">scrcpy</a> 将屏幕内容同步到电脑上，在电脑上操作是没有问题的。  </p><p>如果是公司用，建议咨询鸿蒙运营，成为合作伙伴，直接上HarmonyOS Next进行开发。或者降低api版本。</p><h4 id="PersistentStorage和-StorageLink"><a href="#PersistentStorage和-StorageLink" class="headerlink" title="PersistentStorage和@StorageLink"></a>PersistentStorage和@StorageLink</h4><p>项目中有些设置需要持久化存储，于是选择了PersistentStorage和@StorageLink方式进行存储，大致如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  &#125;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-title class_">PersistentStorage</span>.<span class="hljs-property">PersistProp</span>&lt;<span class="hljs-title class_">User</span>&gt;(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;xuan&#x27;</span>,<span class="hljs-number">18</span>))<br><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">Tmp</span> &#123;<br>  <span class="hljs-meta">@StorageLink</span>(<span class="hljs-string">&#x27;user&#x27;</span>) <span class="hljs-attr">user</span>: <span class="hljs-title class_">User</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;xuan&#x27;</span>, <span class="hljs-number">18</span>)<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.user.name&#125;</span> : <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.user.age&#125;</span>`</span>)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当我第一运行的时候，页面显示正常，Text显示的内容是<code>xuan : 18</code><br/><br>但是当我重新打开应用(不是重新编译，就是简单的在设备上关掉应用然后点击桌面图标打开应用)的时候，Text显示内容是 <code>undefined : undefined</code><br/><br>打上断点发现重新打开应用的时候 <code>user</code> 是一个字符串类型，值为 {‘name’:’xuan’,’age’:18}，但字符串对象没有name和age属性，所以显示了 undefined.<br/><br>看到文档中有写 <a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/arkts-state-management-0000001504151156-V3#ZH-CN_TOPIC_0000001523808562__persistprop">https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/arkts-state-management-0000001504151156-V3#ZH-CN_TOPIC_0000001523808562__persistprop</a></p><blockquote><p>AppStorage的属性向PersistentStorage中持久化的允许的类型是：<br/><br>number，string，boolean，enum基础类型。<br/><br>Object中可序列化的属性。<br/><br>不允许undefined和null。</p></blockquote><p>但同样的，在指南中同样有PersistentStorage描述 <a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-persiststorage-0000001474017166-V3#section610120319595">https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/arkts-persiststorage-0000001474017166-V3#section610120319595</a></p><blockquote><p>PersistentStorage允许的类型和值有：<br/><br>number, string, boolean, enum 等简单类型。<br/><br>可以被JSON.stringify()和JSON.parse()重构的对象。例如Date, Map, Set等内置类型则不支持，以及对象的属性方法不支持持久化。<br/></p></blockquote><p>看到论坛有同样的求助，有开发者回复说他是将对象转成字符串保存的，使用的时候再parse一下。</p><h4 id="剪贴板-pasteboard-getSystemPasteboard"><a href="#剪贴板-pasteboard-getSystemPasteboard" class="headerlink" title="剪贴板 pasteboard.getSystemPasteboard()"></a>剪贴板 pasteboard.getSystemPasteboard()</h4><p>在使用剪贴板时需要先创建剪贴板数据，<br>创建方法如下 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">createData</span>(<span class="hljs-attr">mimeType</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">value</span>: <span class="hljs-title class_">ValueType</span>): <span class="hljs-title class_">PasteData</span>  <br><span class="hljs-title function_">createRecord</span>(<span class="hljs-attr">mimeType</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">value</span>: <span class="hljs-title class_">ValueType</span>):<span class="hljs-title class_">PasteDataRecord</span><br></code></pre></td></tr></table></figure><p>第一个参数含义为：自定义数据的MIME类型。 文档中 <a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-pasteboard-0000001544384177-V3#ZH-CN_TOPIC_0000001523648478__pasteboardcreatedata9">鸿蒙开发api参考</a><br>中写的示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> pasteboard <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos.pasteboard&#x27;</span>;<br><span class="hljs-keyword">let</span> dataXml = <span class="hljs-string">&#x27;Hello World&#x27;</span>;<br><span class="hljs-keyword">let</span> pasteDataRecord = pasteboard.<span class="hljs-title function_">createRecord</span>(<span class="hljs-string">&#x27;app/xml&#x27;</span>, dataXml);<br></code></pre></td></tr></table></figure><p>实际中发现时不能使用这自定义的<code>app/xml</code>值，会崩溃，只能使用pasteboard中预定义的MIME类型</p><h4 id="对象属性从有值变为空，应用会崩溃"><a href="#对象属性从有值变为空，应用会崩溃" class="headerlink" title="对象属性从有值变为空，应用会崩溃"></a>对象属性从有值变为空，应用会崩溃</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">PlayGround</span> &#123;<br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">people</span>:<span class="hljs-title class_">People</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>()<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">log</span>(<span class="hljs-attr">log</span>:<span class="hljs-built_in">string</span>):<span class="hljs-built_in">boolean</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`---------<span class="hljs-subst">$&#123;log&#125;</span>---------`</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">people</span>)&#123;<br>        <span class="hljs-title class_">Text</span>(<span class="hljs-string">`姓名： <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.people.name&#125;</span>  年龄：<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.people.age&#125;</span>`</span>)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">people</span>.<span class="hljs-property">address</span>)&#123;<br>          <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;address 有值&#x27;</span>))&#123;<br>            <span class="hljs-title class_">Text</span>( <span class="hljs-string">`地址： <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.people.address.name&#125;</span>  邮编：<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.people.address.zipCode&#125;</span>`</span>)<br>          &#125;<br>          <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;address 为空 内部&#x27;</span>)<br>          &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;address 为空 最外层&#x27;</span>))&#123;<br>            <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;address 为空 最外层&#x27;</span>)<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;网络请求返回一个有地址的对象&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">let</span> tmpPeople = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>()<br>        <span class="hljs-keyword">let</span> tmpAddress = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>()<br>        tmpAddress.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;测试地址&#x27;</span><br>        tmpAddress.<span class="hljs-property">zipCode</span> = -<span class="hljs-number">1000</span><br>        tmpPeople.<span class="hljs-property">address</span> = tmpAddress<br><br>        tmpPeople.<span class="hljs-property">age</span> = <span class="hljs-number">10</span><br>        tmpPeople.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;有地址&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">people</span> = tmpPeople<br>      &#125;)<br><br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;网络请求返回一个没有地址的对象&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">let</span> tmpPeople = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>()<br>        tmpPeople.<span class="hljs-property">age</span> = <span class="hljs-number">10</span><br>        tmpPeople.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;没有地址&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">people</span> = tmpPeople<br>      &#125;)<br>    &#125;.<span class="hljs-title function_">margin</span>(&#123;<span class="hljs-attr">top</span>:<span class="hljs-number">48</span>&#125;)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Address</span>&#123;<br>  <span class="hljs-attr">zipCode</span>:<span class="hljs-built_in">number</span><br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">People</span>&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span><br>  <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span><br>  address :<span class="hljs-title class_">Address</span><br>&#125;<br></code></pre></td></tr></table></figure><p>很简单的页面，展示对象属性，<br>刚开始运行，一切正常。点击返回有地址的对象，页面正常刷新并且展示。然后点击返回没有地址的对象，这时候会崩溃。<br>日志指向了 Text( <code>地址： $&#123;this.people.address.name&#125;  邮编：$&#123;this.people.address.zipCode&#125;</code>)<br>说是<code>不能从undefined对象中读取name属性</code> 具体可以看这里：<a href="https://developer.huawei.com/consumer/cn/forum/topic/0204136377582311317?fid=0102683795438680754">开发这论坛</a><br>规避方案：我有一个朋友，尝试出了使用 <code>?.</code>来规避的方法。 取对象属性除了要用if判断来控制渲染之外，需要用 <code>?.</code>来取值，防崩溃，将上面的代码修改为<br>Text( <code>地址： $&#123;this.people.address?.name&#125;  邮编：$&#123;this.people.address?.zipCode&#125;</code>)<br>应用不会崩溃，这个对象也不会渲染在页面上<br/><br>但根据文档描述，既然if条件不成立，下面的Text组件就不应该被渲染，也不应该读取address的name属性。同样提工单，回复说是双框架问题，将在HarmonyOS Next版本解决</p><p>需要注意的是，文档上写的被状态管理装饰器修饰的变量，基本上都不支持any、undefined、null值，但实际写代码的过程中是没有校验的，目前来看即使是这些类型或者值，也是没什么大问题的，但还是建议大家按文档写，有问题咨询相关技术人员或者论坛、提工单。</p><hr><p>以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用HarmonyOS4+ArkUI+Stage模型进行开发的翻译软件，目前只是半成品，代码写的很挫。记录一下开发过程中踩过的坑。&lt;br&gt;项目地址：&lt;br&gt;码云&lt;br&gt;&lt;a href=&quot;https://gitee.com/huangyuan/HarmonyTranslato</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>Java使用Protocol Buffer与服务端交互</title>
    <link href="https://blog.huangyuanlove.com/2023/05/09/Java%E4%BD%BF%E7%94%A8Protocol-Buffer%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    <id>https://blog.huangyuanlove.com/2023/05/09/Java%E4%BD%BF%E7%94%A8Protocol-Buffer%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%A4%E4%BA%92/</id>
    <published>2023-05-09T06:14:26.000Z</published>
    <updated>2023-05-19T12:51:02.220Z</updated>
    
    <content type="html"><![CDATA[<p>最近和三方对接时，对方给出的接口文档是使用protol buffer进行交互的，并非是我们常见的json、xml这种格式，了解了一下这种格式或者说交协议的特点。<br>首先，Protocol Buffer序列化之后是二进制流，不进行反序列化基本不可读。<br>其次，序列化之后的体积很小，适合网络传输或者设备之间传输<br>最后，可以跨平台、跨语言使用<br>不过这些特点既是优点也是缺点：序列化之后的数据不可读，还原序列化之后的数据需要事先定义好的数据格式</p><span id="more"></span><h4 id="安装Protocol-Buffer的编译器"><a href="#安装Protocol-Buffer的编译器" class="headerlink" title="安装Protocol Buffer的编译器"></a>安装Protocol Buffer的编译器</h4><p>我们需要使用相应的编译器将<code>.proto</code>文件转化为对应的编程语言的代码。<br>编译器可以在这里下载<a href="https://github.com/protocolbuffers/protobuf">https://github.com/protocolbuffers/protobuf</a><br>这里我下载的版本是22.3。下载完成后解压、添加环境变量，命令行执行 <code>protoc --version</code>能够输出版本号就可以了</p><h4 id="编写-proto文件"><a href="#编写-proto文件" class="headerlink" title="编写 .proto文件"></a>编写 .proto文件</h4><p>文件内容及格式可以参考这里<a href="https://protobuf.dev/">https://protobuf.dev/</a><br>下面是一个示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs protocol">syntax = &quot;proto2&quot;;<br><br>package tutorial;<br><br>option java_multiple_files = true;<br>option java_package = &quot;com.example.tutorial.protos&quot;;<br>option java_outer_classname = &quot;AddressBookProtos&quot;;<br><br>message Person &#123;<br>  optional string name = 1;<br>  optional int32 id = 2;<br>  optional string email = 3;<br><br>  enum PhoneType &#123;<br>    MOBILE = 0;<br>    HOME = 1;<br>    WORK = 2;<br>  &#125;<br><br>  message PhoneNumber &#123;<br>    optional string number = 1;<br>    optional PhoneType type = 2 [default = HOME];<br>  &#125;<br><br>  repeated PhoneNumber phones = 4;<br>&#125;<br><br>message AddressBook &#123;<br>  repeated Person people = 1;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后我们需要使用上面安装好的编译工具将文件编译转化为对应编程语言的文件，这里使用的是java</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>protocol --java_out=src/main/java src/main/protobuf/AddressBookProtos.proto<br><br></code></pre></td></tr></table></figure><p><code>src/main/java</code>是输出文件的位置，<code>src/main/protobuf/tgssp.proto</code>是数据格式文件的位置</p><p>没有报错的话，我们就可以在输出文件的位置看到生成的java文件了</p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>想要使用该文件，我们需要在工程中引入相应的依赖库，这里还是用java举例</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;com.google.protobuf&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;protobuf-java&#x27;</span>, <span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.22.3&#x27;</span><br></code></pre></td></tr></table></figure><p>因为上面的<code>.proto</code>文件中定义的<code>java_multiple_files</code>为true，所以这里是分开生成的文件。<br>然后我们就可以使用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> Person.newBuilder()<br>        .setEmail(<span class="hljs-string">&quot;123@123.com&quot;</span>)<br>        .setId(<span class="hljs-number">1</span>)<br>        .setName(<span class="hljs-string">&quot;null&quot;</span>)<br>        .build();<br><span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> AddressBook.newBuilder()<br>        .addPeople(person)<br>        .build();<br>System.out.println(addressBook);<br></code></pre></td></tr></table></figure><p>当然我们也可以将<code>addressBook</code>对象调用<code>toByteArray()</code>方法序列化为二进制数据流;也可以调用<code>AddressBook.parseFrom(byte[] bytes)</code>从二进制数据中反序列化</p><h4 id="与服务器交互"><a href="#与服务器交互" class="headerlink" title="与服务器交互"></a>与服务器交互</h4><p>这里为了方便，直接使用的apache的网络请求库，使用其他库原理是一样的<br>依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;org.apache.httpcomponents&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;httpcore&#x27;</span>, <span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;4.4.14&#x27;</span><br>implementation <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;org.apache.httpcomponents&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;httpclient&#x27;</span>, <span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;4.5.13&#x27;</span><br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpPost</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(<span class="hljs-string">&quot;https://a.b.com&quot;</span>);<br>request.setEntity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayEntity</span>(tgrequest.toByteArray()));<br><span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br><span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.execute(request);<br><span class="hljs-comment">// 处理 HTTP 响应</span><br><span class="hljs-type">HttpEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> response.getEntity();<br><span class="hljs-keyword">if</span> (entity != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 将响应实体转换为字节数组</span><br>    <span class="hljs-type">byte</span>[] data = toByteArray(entity.getContent());<br>    <span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> AddressBook.parseFrom(data);<br>    System.out.println(addressBook);<br>&#125;<br><br><span class="hljs-comment">//读取响应</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] toByteArray(InputStream in) <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>        out.write(buffer, <span class="hljs-number">0</span>, len);<br>    &#125;<br>    <span class="hljs-keyword">return</span> out.toByteArray();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>到这里就算是完成了一次使用protocol buffer的交互</p><h4 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h4><p>我们可以使用<code>protostuff</code>这个库，从而不借助<code>.proto</code>文件就可以直接对POJO进行序列化和反序列化。<br>详情可以查看这个仓库 <a href="https://github.com/protostuff/protostuff">https://github.com/protostuff/protostuff</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近和三方对接时，对方给出的接口文档是使用protol buffer进行交互的，并非是我们常见的json、xml这种格式，了解了一下这种格式或者说交协议的特点。&lt;br&gt;首先，Protocol Buffer序列化之后是二进制流，不进行反序列化基本不可读。&lt;br&gt;其次，序列化之后的体积很小，适合网络传输或者设备之间传输&lt;br&gt;最后，可以跨平台、跨语言使用&lt;br&gt;不过这些特点既是优点也是缺点：序列化之后的数据不可读，还原序列化之后的数据需要事先定义好的数据格式&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.huangyuanlove.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>flutter_Key</title>
    <link href="https://blog.huangyuanlove.com/2023/01/23/flutter-Key/"/>
    <id>https://blog.huangyuanlove.com/2023/01/23/flutter-Key/</id>
    <published>2023-01-23T06:31:47.000Z</published>
    <updated>2023-05-19T12:51:02.230Z</updated>
    
    <content type="html"><![CDATA[<p>官方视频在这里，有条件的可以看下<br><a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc">https://www.youtube.com/watch?v=kn0EOS-ZiIc</a><br>也可以看下这个对diff算法的详解<br><a href="https://juejin.cn/post/6935422635194974244">https://juejin.cn/post/6935422635194974244</a><br>主要代码如下</p><span id="more"></span><p>一个用于获取颜色的RandomColor</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomColor</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Random _random = Random();<br><br>  <span class="hljs-keyword">static</span> Color getColor() &#123;<br>    <span class="hljs-keyword">return</span> Color.fromRGBO(<br>      _random.nextInt(<span class="hljs-number">256</span>),<br>      _random.nextInt(<span class="hljs-number">256</span>),<br>      _random.nextInt(<span class="hljs-number">256</span>),<br>      <span class="hljs-number">1</span>,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个继承自StatefulWidget的widget，使用State保存了颜色信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomColorBoxStateful</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  RandomColorBoxStateful(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;RandomColorBoxStateful&gt; createState() =&gt; RandomColorBoxState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomColorBoxState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">RandomColorBoxStateful</span>&gt; </span>&#123;<br><br>  <span class="hljs-keyword">late</span> Color myColor;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    myColor = RandomColor.getColor();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&quot;<span class="hljs-subst">$myColor</span>&quot;</span>,style: TextStyle(color: myColor),);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个继承自StatelessWidget的widget，内容差不多</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomColorBoxStateless</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>   RandomColorBoxStateless(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br>  Color myColor = RandomColor.getColor();<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>      <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&quot;<span class="hljs-subst">$myColor</span>&quot;</span>,style: TextStyle(color: myColor),););<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个用来显示界面的SwapColorBox</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwapColorBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; SwapColorBoxState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwapColorBoxState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">SwapColorBox</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">List</span>&lt;Widget&gt; tiles = [ RandomColorBoxStateful(), RandomColorBoxStateful() ];<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      body: SafeArea(child: Column(children: tiles)),<br>      floatingActionButton: FloatingActionButton(<br>        child: Icon(Icons.sentiment_very_satisfied),<br>        onPressed: swapTiles,<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> swapTiles() &#123;<br>    setState(() &#123;<br>      <span class="hljs-built_in">List</span>&lt;Widget&gt; tmp = [tiles[<span class="hljs-number">1</span>],tiles[<span class="hljs-number">0</span>]];<br>      tiles = tmp;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时点击floatingActionButton会发现页面没有变化。</p><h3 id="如何修改"><a href="#如何修改" class="headerlink" title="如何修改"></a>如何修改</h3><p>好几种办法</p><ul><li>将SwapColorBoxState中的tiles改为 List<Widget> tiles &#x3D; [ RandomColorBoxStateless(), RandomColorBoxStateless() ]</li><li>将SwapColorBoxState中的tiles中RandomColorBoxStateful加上UniqueKey: List<Widget> tiles &#x3D; [ RandomColorBoxStateful(key: UniqueKey(),), RandomColorBoxStateful(key: UniqueKey(),) ];</li><li>将RandomColorBoxStateful中的myColor放在RandomColorBoxStateful中而不是RandomColorBoxState中</li></ul><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>元素树没有交换，虽然我们交换了Widget，但是其Element并没有交换，而颜色状态又是由State维护，所以在执行build的时候颜色并没有变化。<br>先看下更新的代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Element</span>&gt; updateChildren(<span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Element</span>&gt; oldChildren, <span class="hljs-built_in">List</span>&lt;Widget&gt; newWidgets, &#123; <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">Element</span>&gt;? forgottenChildren, <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Object?</span>&gt;? slots &#125;) &#123;<br><br><br>  <span class="hljs-built_in">Element?</span> replaceWithNullIfForgotten(<span class="hljs-built_in">Element</span> child) &#123;<br>    <span class="hljs-keyword">return</span> forgottenChildren != <span class="hljs-keyword">null</span> &amp;&amp; forgottenChildren.contains(child) ? <span class="hljs-keyword">null</span> : child;<br>  &#125;<br><br>  <span class="hljs-built_in">Object?</span> slotFor(<span class="hljs-built_in">int</span> newChildIndex, <span class="hljs-built_in">Element?</span> previousChild) &#123;<br>    <span class="hljs-keyword">return</span> slots != <span class="hljs-keyword">null</span><br>      ? slots[newChildIndex]<br>      : IndexedSlot&lt;<span class="hljs-built_in">Element?</span>&gt;(newChildIndex, previousChild);<br>  &#125;<br><br><br>  <span class="hljs-built_in">int</span> newChildrenTop = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">int</span> oldChildrenTop = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">int</span> newChildrenBottom = newWidgets.length - <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">int</span> oldChildrenBottom = oldChildren.length - <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Element</span>&gt; newChildren = oldChildren.length == newWidgets.length ?<br>      oldChildren : <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Element</span>&gt;.filled(newWidgets.length, _NullElement.instance);<br><br>  <span class="hljs-built_in">Element?</span> previousChild;<br><br>  <span class="hljs-comment">// Update the top of the list.</span><br>  <span class="hljs-keyword">while</span> ((oldChildrenTop &lt;= oldChildrenBottom) &amp;&amp; (newChildrenTop &lt;= newChildrenBottom)) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> oldChild = replaceWithNullIfForgotten(oldChildren[oldChildrenTop]);<br>    <span class="hljs-keyword">final</span> Widget newWidget = newWidgets[newChildrenTop];<br>   <br>    <span class="hljs-keyword">if</span> (oldChild == <span class="hljs-keyword">null</span> || !Widget.canUpdate(oldChild.widget, newWidget))<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild = updateChild(oldChild, newWidget, slotFor(newChildrenTop, previousChild))!;<br>    <br>    newChildren[newChildrenTop] = newChild;<br>    previousChild = newChild;<br>    newChildrenTop += <span class="hljs-number">1</span>;<br>    oldChildrenTop += <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// Scan the bottom of the list.</span><br>  <span class="hljs-keyword">while</span> ((oldChildrenTop &lt;= oldChildrenBottom) &amp;&amp; (newChildrenTop &lt;= newChildrenBottom)) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> oldChild = replaceWithNullIfForgotten(oldChildren[oldChildrenBottom]);<br>    <span class="hljs-keyword">final</span> Widget newWidget = newWidgets[newChildrenBottom];<br>    <br>    <span class="hljs-keyword">if</span> (oldChild == <span class="hljs-keyword">null</span> || !Widget.canUpdate(oldChild.widget, newWidget))<br>      <span class="hljs-keyword">break</span>;<br>    oldChildrenBottom -= <span class="hljs-number">1</span>;<br>    newChildrenBottom -= <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// Scan the old children in the middle of the list.</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">bool</span> haveOldChildren = oldChildrenTop &lt;= oldChildrenBottom;<br>  <span class="hljs-built_in">Map</span>&lt;Key, <span class="hljs-built_in">Element</span>&gt;? oldKeyedChildren;<br>  <span class="hljs-keyword">if</span> (haveOldChildren) &#123;<br>    oldKeyedChildren = &lt;Key, <span class="hljs-built_in">Element</span>&gt;&#123;&#125;;<br>    <span class="hljs-keyword">while</span> (oldChildrenTop &lt;= oldChildrenBottom) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> oldChild = replaceWithNullIfForgotten(oldChildren[oldChildrenTop]);<br>     <br>      <span class="hljs-keyword">if</span> (oldChild != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (oldChild.widget.key != <span class="hljs-keyword">null</span>)<br>          oldKeyedChildren[oldChild.widget.key!] = oldChild;<br>        <span class="hljs-keyword">else</span><br>          deactivateChild(oldChild);<br>      &#125;<br>      oldChildrenTop += <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Update the middle of the list.</span><br>  <span class="hljs-keyword">while</span> (newChildrenTop &lt;= newChildrenBottom) &#123;<br>    <span class="hljs-built_in">Element?</span> oldChild;<br>    <span class="hljs-keyword">final</span> Widget newWidget = newWidgets[newChildrenTop];<br>    <span class="hljs-keyword">if</span> (haveOldChildren) &#123;<br>      <span class="hljs-keyword">final</span> Key? key = newWidget.key;<br>      <span class="hljs-keyword">if</span> (key != <span class="hljs-keyword">null</span>) &#123;<br>        oldChild = oldKeyedChildren![key];<br>        <span class="hljs-keyword">if</span> (oldChild != <span class="hljs-keyword">null</span>) &#123;<br>          <span class="hljs-keyword">if</span> (Widget.canUpdate(oldChild.widget, newWidget)) &#123;<br>            <span class="hljs-comment">// we found a match!</span><br>            <span class="hljs-comment">// remove it from oldKeyedChildren so we don&#x27;t unsync it later</span><br>            oldKeyedChildren.remove(key);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Not a match, let&#x27;s pretend we didn&#x27;t see it for now.</span><br>            oldChild = <span class="hljs-keyword">null</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>   <br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild = updateChild(oldChild, newWidget, slotFor(newChildrenTop, previousChild))!;<br>   <br>    newChildren[newChildrenTop] = newChild;<br>    previousChild = newChild;<br>    newChildrenTop += <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// We&#x27;ve scanned the whole list.</span><br>  <br>  newChildrenBottom = newWidgets.length - <span class="hljs-number">1</span>;<br>  oldChildrenBottom = oldChildren.length - <span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">// Update the bottom of the list.</span><br>  <span class="hljs-keyword">while</span> ((oldChildrenTop &lt;= oldChildrenBottom) &amp;&amp; (newChildrenTop &lt;= newChildrenBottom)) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> oldChild = oldChildren[oldChildrenTop];<br>   <br>    <span class="hljs-keyword">final</span> Widget newWidget = newWidgets[newChildrenTop];<br>   <br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild = updateChild(oldChild, newWidget, slotFor(newChildrenTop, previousChild))!;<br>   <br>    newChildren[newChildrenTop] = newChild;<br>    previousChild = newChild;<br>    newChildrenTop += <span class="hljs-number">1</span>;<br>    oldChildrenTop += <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// Clean up any of the remaining middle nodes from the old list.</span><br>  <span class="hljs-keyword">if</span> (haveOldChildren &amp;&amp; oldKeyedChildren!.isNotEmpty) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> oldChild <span class="hljs-keyword">in</span> oldKeyedChildren.values) &#123;<br>      <span class="hljs-keyword">if</span> (forgottenChildren == <span class="hljs-keyword">null</span> || !forgottenChildren.contains(oldChild))<br>        deactivateChild(oldChild);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-keyword">return</span> newChildren;<br>&#125;<br></code></pre></td></tr></table></figure><p>前置条件：</p><h4 id="Widget-canUpdate"><a href="#Widget-canUpdate" class="headerlink" title="Widget.canUpdate()"></a>Widget.canUpdate()</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;<br>  <span class="hljs-keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType<br>      &amp;&amp; oldWidget.key == newWidget.key;<br>&#125;<br></code></pre></td></tr></table></figure><p>比较两个Widget的runtimeType和key是否相同</p><h4 id="Element-update"><a href="#Element-update" class="headerlink" title="Element.update()"></a>Element.update()</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> update(<span class="hljs-keyword">covariant</span> Widget newWidget) &#123;<br>   _widget = newWidget;<br>&#125;<br></code></pre></td></tr></table></figure><p>只是简单的替换所持有Widget，并没有更新自己的其他属性</p><h3 id="更新算法"><a href="#更新算法" class="headerlink" title="更新算法"></a>更新算法</h3><p>framwork中将节点列表分成了三部分：顶部、中间部分、底部，当发生更新时，尽最大可能的复用Element，无法复用的才会去创建新的Element</p><ol><li>首先自顶向下的进行diff并更新子节点，也就是第一个while循环，是否能复用就是调用的canUpdate</li><li>然后自底向上的进行diff(这里没有更新子节点)，也就是第二个while循环，依然是用canUpdate看判断是否可以复用</li><li>然后在这两个中间的部分寻找可以复用的Element，并进行存储</li><li>这时候就已经扫描完整棵树了，接下来更新中间部分</li><li>最后更新底部</li></ol><p>为什么在自底向上的进行diff时候没有更新：因为这时候拿不到Slot信息<br>回到我们上面提到的例子中点击按钮时会触发<code>Column</code>的更新，也就是<code>MultiChildRenderObjectElement</code>的更新，就会触发上面的<code>updateChildren()</code>方法<br>所以在自顶向下的更新中，<code>canUpdate()</code>返回的是<code>true</code>(当我们设置了Key之后，这里会返回false，不进行复用)，也就是可以复用<code>element</code>，接着执行了<code>updateChild(Element? child, Widget? newWidget, Object? newSlot)</code><br>这里的<code>child</code>是<em>旧element</em>，<code>newWidget</code>也就是要显示的<em>widget</em>，两者并不相等，所以就执行了<code>child.update(newWidget);</code>只是简单的对所持有的<code>widget</code>进行了赋值。我们知道<code>StatefullWidget</code>中<code>State</code>和<code>StatefulElement</code>互相持有，并且两者都持有<code>StatefulWidget</code>。所以<code>State</code>并没有被更新，所持有的颜色值还是交换之前的颜色值，所以点击交换按钮后，<code>Widget</code>虽然交换了位置，但是<code>Element</code>并没有更新。<br>有点像是A机器生产A物品，B机器生产B物品；原来操作机器A的去操作机器B，原来操作机器B的去操作机器A，虽然换了操作员，但生产A的机器还是生产A，生产B的机器还是生产B。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>这里的key就两个分支<code>LocalKey</code> 和<code>GlobalKey</code> 。我们知道<em>key</em>的作用就是为<code>Widget</code>确认唯一的身份，可以在多子组件更新中被识别，这就是<code>LocalKey</code>的作用。所以<code>LocalKey</code>保证的是 <strong>相同父级</strong>组件的身份唯一性。而 <code>GlobalKey</code> 是整个应用中，组件的身份唯一。</p><p><code>LocalKey</code>下面有<code>UniqueKey</code>、<code>ValueKey&lt;T&gt;</code>、<code>ObjectKey</code>,区别也很简单，戳进去看下源码就好了</p><h4 id="Globalkey"><a href="#Globalkey" class="headerlink" title="Globalkey"></a>Globalkey</h4><p>对于<code>GlobalKey</code>来讲，只要获取到了<code>Element</code>，就能获取到<code>Widget</code>对象。只要<code>Element</code>是<code>StatefulElement</code>，就能获取到<code>State</code>.<br>那么如何获取到Element呢？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">Element?</span> <span class="hljs-keyword">get</span> _currentElement =&gt; WidgetsBinding.instance.buildOwner!._globalKeyRegistry[<span class="hljs-keyword">this</span>];<br><br><span class="hljs-comment">///<span class="language-markdown">BuildOwner</span></span><br><span class="hljs-keyword">final</span> <span class="hljs-built_in">Map</span>&lt;GlobalKey, <span class="hljs-built_in">Element</span>&gt; _globalKeyRegistry = &lt;GlobalKey, <span class="hljs-built_in">Element</span>&gt;&#123;&#125;;<br><span class="hljs-keyword">void</span> _registerGlobalKey(GlobalKey key, <span class="hljs-built_in">Element</span> element) &#123;<br>  _globalKeyRegistry[key] = element;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么是在什么时候调用_registerGlobalKey注册的呢？前面提到的mount方法中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">if</span> (key <span class="hljs-keyword">is</span> GlobalKey) &#123;<br>  owner!._registerGlobalKey(key, <span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 就是在这里注册的。<br>并且会在unmount中进行反注册</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> Key? key = _widget?.key;<br><span class="hljs-keyword">if</span> (key <span class="hljs-keyword">is</span> GlobalKey) &#123;<br>  owner!._unregisterGlobalKey(key, <span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>源码中也对<code>GlobalKey</code>的使用场景做出了介绍，当你真的需要获取某个<code>BuildContext</code>或<code>State</code>时，用<code>GlobalKey</code>是完全没有问题的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;官方视频在这里，有条件的可以看下&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=kn0EOS-ZiIc&quot;&gt;https://www.youtube.com/watch?v=kn0EOS-ZiIc&lt;/a&gt;&lt;br&gt;也可以看下这个对diff算法的详解&lt;br&gt;&lt;a href=&quot;https://juejin.cn/post/6935422635194974244&quot;&gt;https://juejin.cn/post/6935422635194974244&lt;/a&gt;&lt;br&gt;主要代码如下&lt;/p&gt;</summary>
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter_StatefulWidget</title>
    <link href="https://blog.huangyuanlove.com/2023/01/18/flutter-StatefulWidget/"/>
    <id>https://blog.huangyuanlove.com/2023/01/18/flutter-StatefulWidget/</id>
    <published>2023-01-18T08:00:47.000Z</published>
    <updated>2023-05-19T12:51:02.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="createState-是何时被调用的？"><a href="#createState-是何时被调用的？" class="headerlink" title="createState()是何时被调用的？"></a>createState()是何时被调用的？</h3><p>断点查看调用栈，发现是在<code>StatefulElement</code>的构造方法中创建的,而<code>element</code>的创建则是在父元素调用<code>inflateWidget</code>时触发子元素的<code>createElement</code>方法创建的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">StatefulElement(StatefulWidget widget)<br>    : _state = widget.createState(),<br>      <span class="hljs-keyword">super</span>(widget) &#123;<br>  state._element = <span class="hljs-keyword">this</span>;<br>  state._widget = widget;<br>&#125;<br></code></pre></td></tr></table></figure><p>去掉断言代码可以看到，在构造方法中调用了<code>createState()</code>来创建<code>State</code>对象，接着对<code>_state</code>对象的<code>_element</code>和<code>_widget</code>成员进行赋值。<br>到这里我们可以清楚的知道:<code>State</code>和<code>StatefulElement</code>互相持有，并且两者都持有<code>StatefulWidget</code>。</p><h3 id="State类中的方法"><a href="#State类中的方法" class="headerlink" title="State类中的方法"></a>State类中的方法</h3><p>这里面定义了生命周期方法</p><ul><li>initState()</li><li>didUpdateWidget(covariant T oldWidget)</li><li>void reassemble()</li><li>void deactivate()</li><li>void activate()</li><li>void dispose()</li><li>Widget build(BuildContext context)</li><li>void didChangeDependencies()</li></ul><p>其实看一下这些方法上面的注释基本上就能理解的差不多，断点走一遍流程，也就都了解了</p><h3 id="回调时机"><a href="#回调时机" class="headerlink" title="回调时机"></a>回调时机</h3><p><code>StatefulElement</code>继承自<code>ComponentElement</code>类，该类在<code>mount()</code>时调用的了<code>_firstBuild()</code>方法，这个方法被<code>StatefulElement</code>覆写，可以看到在这里里面调用了<code>state.initState()</code>方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> _firstBuild() &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    _debugSetAllowIgnoredCallsToMarkNeedsBuild(<span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object?</span> debugCheckForReturnedFuture = state.initState() <span class="hljs-keyword">as</span> <span class="hljs-built_in">dynamic</span>;<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    _debugSetAllowIgnoredCallsToMarkNeedsBuild(<span class="hljs-keyword">false</span>);<br>  &#125;<br>  state.didChangeDependencies();<br>  <span class="hljs-keyword">super</span>._firstBuild();<br>&#125;<br></code></pre></td></tr></table></figure><p>紧着这就调用了<code>state.didChangeDependencies()</code>方法,最后调用了<code>super._firstBuild()</code>;<br>还是在<code>ComponentElement</code>类中的<code>_firstBuild()</code>方法中调用了<code>rebuild()--&gt;performRebuild</code>,这里<code>performRebuild()</code>在<code>StatefulElement</code>有被重写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> performRebuild() &#123;<br>  <span class="hljs-keyword">if</span> (_didChangeDependencies) &#123;<br>    state.didChangeDependencies();<br>    _didChangeDependencies = <span class="hljs-keyword">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">super</span>.performRebuild();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>_didChangeDependencies</code>默认为<code>false</code>，所以第一次进来并不会触发<code>state.didChangeDependencies()</code>方法;接下来执行了<code>super.performRebuild()</code>;<br>同样的在<code>ComponentElement</code>类中的<code>performRebuild()</code>方法中调用了<code>build()</code>方法,当然这里的<code>build</code>方法已经被子类<code>StatefulElement</code>重写，调用了<code>state.build(this)</code>方法，然后调用了<code>updateChild()</code>方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> performRebuild() &#123;<br>  <span class="hljs-keyword">assert</span>(_debugSetAllowIgnoredCallsToMarkNeedsBuild(<span class="hljs-keyword">true</span>));<br>  Widget? built;<br>  <span class="hljs-keyword">try</span> &#123;<br>    built = build();<br>    debugWidgetBuilderValue(widget, built);<br>  &#125; <span class="hljs-keyword">catch</span> (e, stack) &#123;<br>    _debugDoingBuild = <span class="hljs-keyword">false</span>;<br>    built = ErrorWidget.builder(...);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>     _dirty = <span class="hljs-keyword">false</span>;<br>    <br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>    _child = updateChild(_child, built, slot);<br>    <br>  &#125; <span class="hljs-keyword">catch</span> (e, stack) &#123;<br>    built = ErrorWidget.builder();<br>    _child = updateChild(<span class="hljs-keyword">null</span>, built, slot);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就接上了控件是如何进行挂载的</p><h3 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h3><p>我们知道在<code>StatefulWidget</code>中可以使用<code>setState()</code>来更新页面内容，那么表示状态的属性是在什么时机赋值，这里有两种方式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">_color = Colors.red;<br>setState(()&#123;<br>&#125;);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">setStaate(()&#123;<br>  _color = Colors.red;<br>&#125;);<br></code></pre></td></tr></table></figure><p>戳进去看源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> setState(VoidCallback fn) &#123;<br>  <span class="hljs-keyword">assert</span>(fn != <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object?</span> result = fn() <span class="hljs-keyword">as</span> <span class="hljs-built_in">dynamic</span>;<br>  <span class="hljs-keyword">assert</span>(() &#123;<br>    <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">is</span> Future) &#123;<br>      <span class="hljs-keyword">throw</span> FlutterError.fromParts(&lt;DiagnosticsNode&gt;[<br>        ErrorSummary(<span class="hljs-string">&#x27;setState() callback argument returned a Future.&#x27;</span>),<br>        ErrorDescription(<br>          <span class="hljs-string">&#x27;The setState() method on <span class="hljs-subst">$this</span> was called with a closure or method that &#x27;</span><br>          <span class="hljs-string">&#x27;returned a Future. Maybe it is marked as &quot;async&quot;.&#x27;</span>,<br>        ),<br>        ErrorHint(<br>          <span class="hljs-string">&#x27;Instead of performing asynchronous work inside a call to setState(), first &#x27;</span><br>          <span class="hljs-string">&#x27;execute the work (without updating the widget state), and then synchronously &#x27;</span><br>          <span class="hljs-string">&#x27;update the state inside a call to setState().&#x27;</span>,<br>        ),<br>      ]);<br>    &#125;<br>    <span class="hljs-comment">// We ignore other types of return values so that you can do things like:</span><br>    <span class="hljs-comment">//   setState(() =&gt; x = 3);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;());<br>  _element!.markNeedsBuild();<br>&#125;<br></code></pre></td></tr></table></figure><p>一坨断言，判断<code>callback</code>是不是空，<code>callback</code>的返回值是不是<code>Future</code>类型;然后调用<code>_element!.markNeedsBuild()</code>。所以就这段代码来看，上面两种写法都可以，但还是建议向源码看齐：状态属性的改变写在<code>callback</code>中，确保在<code>markNeedsBuild()</code>之前，状态值是自己期望的结果；</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> markNeedsBuild() &#123;<br>  <span class="hljs-keyword">if</span> (_lifecycleState != _ElementLifecycle.active)<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span> (dirty)<br>    <span class="hljs-keyword">return</span>;<br>  _dirty = <span class="hljs-keyword">true</span>;<br>  owner!.scheduleBuildFor(<span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果当前状态不是active则不标记，如果已经标记过也不在标记；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/// <span class="language-markdown">Adds an element to the dirty elements list so that it will be rebuilt</span></span><br><span class="hljs-comment">/// <span class="language-markdown">when [WidgetsBinding.drawFrame] calls [buildScope].</span></span><br><span class="hljs-keyword">void</span> scheduleBuildFor(<span class="hljs-built_in">Element</span> element) &#123;<br><br>  <span class="hljs-keyword">if</span> (element._inDirtyList) &#123;<br>    _dirtyElementsNeedsResorting = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!_scheduledFlushDirtyElements &amp;&amp; onBuildScheduled != <span class="hljs-keyword">null</span>) &#123;<br>    _scheduledFlushDirtyElements = <span class="hljs-keyword">true</span>;<br>    onBuildScheduled!();<br>  &#125;<br>  _dirtyElements.add(element);<br>  element._inDirtyList = <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里也是进行了二次判断，保证不会被多次重绘。注意<code>onBuildScheduled()</code>的调用，它的定义是<code>VoidCallback? onBuildScheduled</code>;并且是在<code>BuildOwner</code>类中的构造方法中初始化的，那么这个<code>onBuildScheduled</code>到底是什么方法?断点看一下是<code>WidgetsBinding#_handleBuildScheduled</code>这个方法。它是在什么时候被赋值的？<code>owner</code>是<code>element</code>对象中的一个成员变量<code>_owner</code>,搜一下看一看到是在<code>mount()</code>方法中赋值的，值为<code>parent.owner</code>。还记的之前初始化根节点的的时候调用的<code>WidgetsBinding#attachRootWidget(Widget rootWidget)</code>这个方法中创建<code>RenderObjectToWidgetAdapter</code>对象后调用的<code>attachToRenderTree()</code>方法中有传入<code>BuildOwner</code>对象，接着向上查找，发现是在<code>initInstances()</code>方法中创建的.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> initInstances() &#123;<br>  <span class="hljs-keyword">super</span>.initInstances();<br>  _instance = <span class="hljs-keyword">this</span>;<br>  <span class="hljs-comment">// Initialization of [_buildOwner] has to be done after</span><br>  <span class="hljs-comment">// [super.initInstances] is called, as it requires [ServicesBinding] to</span><br>  <span class="hljs-comment">// properly setup the [defaultBinaryMessenger] instance.</span><br>  _buildOwner = BuildOwner();<br>  buildOwner!.onBuildScheduled = _handleBuildScheduled;<br>  platformDispatcher.onLocaleChanged = handleLocaleChanged;<br>  platformDispatcher.onAccessibilityFeaturesChanged = handleAccessibilityFeaturesChanged;<br>  SystemChannels.navigation.setMethodCallHandler(_handleNavigationInvocation);<br><br>  platformMenuDelegate = DefaultPlatformMenuDelegate();<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>_handleBuildScheduled</code> 中就只是调用了<code>ensureVisualUpdate()</code>方法，然后调用了<code>scheduleFrame()</code>;</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> scheduleFrame() &#123;<br>  <span class="hljs-keyword">if</span> (_hasScheduledFrame || !framesEnabled)<br>    <span class="hljs-keyword">return</span>;<br>  ensureFrameCallbacksRegistered();<br>  platformDispatcher.scheduleFrame();<br>  _hasScheduledFrame = <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里先确保两个回调确实被注册了，然后通过<code>platformDispatcher.scheduleFrame()</code>这个<em>native</em>方法向系统发送一个帧调度的请求。<br>然后会回调<code>_handleDrawFrame()</code>方法，也就是<code>ensureFrameCallbacksRegistered()</code>方法中确保两个回调方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> handleDrawFrame() &#123;<br>  <span class="hljs-keyword">assert</span>(_schedulerPhase == SchedulerPhase.midFrameMicrotasks);<br>  _frameTimelineTask?.finish(); <span class="hljs-comment">// end the &quot;Animate&quot; phase</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// PERSISTENT FRAME CALLBACKS</span><br>    _schedulerPhase = SchedulerPhase.persistentCallbacks;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> FrameCallback callback <span class="hljs-keyword">in</span> _persistentCallbacks)<br>      _invokeFrameCallback(callback, _currentFrameTimeStamp!);<br><br>    <span class="hljs-comment">// POST-FRAME CALLBACKS</span><br>    _schedulerPhase = SchedulerPhase.postFrameCallbacks;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span>&lt;FrameCallback&gt; localPostFrameCallbacks =<br>        <span class="hljs-built_in">List</span>&lt;FrameCallback&gt;.of(_postFrameCallbacks);<br>    _postFrameCallbacks.clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> FrameCallback callback <span class="hljs-keyword">in</span> localPostFrameCallbacks)<br>      _invokeFrameCallback(callback, _currentFrameTimeStamp!);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    _schedulerPhase = SchedulerPhase.idle;<br>    _frameTimelineTask?.finish(); <span class="hljs-comment">// end the Frame</span><br>    <span class="hljs-keyword">assert</span>(() &#123;<br>      <span class="hljs-keyword">if</span> (debugPrintEndFrameBanner)<br>        debugPrint(<span class="hljs-string">&#x27;▀&#x27;</span> * _debugBanner!.length);<br>      _debugBanner = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;());<br>    _currentFrameTimeStamp = <span class="hljs-keyword">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是调用 <code>_invokeFrameCallback</code>，这里的<code>_persistentCallbacks</code>是个<code>list</code>，通过</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> addPersistentFrameCallback(FrameCallback callback) &#123;<br>  _persistentCallbacks.add(callback);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法添加回调；这里的回调是在<code>RendererBinding</code>类中的<code>initInstances()</code>方法中注册的，实际上调用的方法是</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">_handlePersistentFrameCallback<br>  <span class="hljs-keyword">void</span> _handlePersistentFrameCallback(<span class="hljs-built_in">Duration</span> timeStamp) &#123;<br>    drawFrame();<br>    _scheduleMouseTrackerUpdate();<br>  &#125;<br></code></pre></td></tr></table></figure><p>然后调用了<code>drawFrame();</code>方法,需要注意的是:<code>RendererBinding</code>是一个<em>mixin</em>的类，被<code>WidgetsBinding</code>混入，并且<code>WidgetsBinding</code>类中重写了<code>drawFrame()</code>方法，所以最后走的是<code>WidgetsBinding</code>类中的<code>drawFrame()</code>方法；在这里面调用了<code>buildOwner!.buildScope(renderViewElement!);</code><br>在这个方法中先对脏列表进行排序</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> _sort(<span class="hljs-built_in">Element</span> a, <span class="hljs-built_in">Element</span> b) &#123;<br>  <span class="hljs-keyword">if</span> (a.depth &lt; b.depth)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span> (b.depth &lt; a.depth)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (b.dirty &amp;&amp; !a.dirty)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span> (a.dirty &amp;&amp; !b.dirty)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后循环调用<code>element.rebuild();</code>触发<code>performRebuild()</code>接着就是<code>widget</code>的<code>build()</code>方法被触发.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;createState-是何时被调用的？&quot;&gt;&lt;a href=&quot;#createState-是何时被调用的？&quot; class=&quot;headerlink&quot; title=&quot;createState()是何时被调用的？&quot;&gt;&lt;/a&gt;createState()是何时被调用的？&lt;/h3</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter_runApp到挂载根节点</title>
    <link href="https://blog.huangyuanlove.com/2023/01/18/flutter-runApp%E5%88%B0%E6%8C%82%E8%BD%BD%E6%A0%B9%E8%8A%82%E7%82%B9/"/>
    <id>https://blog.huangyuanlove.com/2023/01/18/flutter-runApp%E5%88%B0%E6%8C%82%E8%BD%BD%E6%A0%B9%E8%8A%82%E7%82%B9/</id>
    <published>2023-01-18T02:18:15.000Z</published>
    <updated>2023-05-19T12:51:02.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>flutter应用的入口点在main方法中调用的<code>runApp(Widget app)</code>方法中</p><figure class="highlight dart"><figcaption><span>widgets.binding.runApp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> runApp(Widget app) &#123;<br>  WidgetsFlutterBinding.ensureInitialized()<br>    ..scheduleAttachRootWidget(app)<br>    ..scheduleWarmUpFrame();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>WidgetsFlutterBinding</code>混入了七个 <code>xxxbinding</code></p><ul><li>[GestureBinding], which implements the basics of hit testing.</li><li>[SchedulerBinding], which introduces the concepts of frames.</li><li>[ServicesBinding], which provides access to the plugin subsystem.</li><li>[PaintingBinding], which enables decoding images.</li><li>[SemanticsBinding], which supports accessibility.</li><li>[RendererBinding], which handles the render tree.</li><li>[WidgetsBinding], which handles the widget tree.</li></ul><p>并且类中只有一个<code>ensureInitialized()</code>方法用来初始化<code>WidgetsBinding</code>对象,接着去执行了<code>scheduleAttachRootWidget</code>、<code>scheduleWarmUpFrame</code>方法<br>在<code>ensureInitialized</code>方法中调用<code>WidgetsFlutterBinding</code>进行了初始化</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">static</span> WidgetsBinding ensureInitialized() &#123;<br>  <span class="hljs-keyword">if</span> (WidgetsBinding._instance == <span class="hljs-keyword">null</span>)<br>    WidgetsFlutterBinding();<br>  <span class="hljs-keyword">return</span> WidgetsBinding.instance;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="scheduleAttachRootWidget"><a href="#scheduleAttachRootWidget" class="headerlink" title="scheduleAttachRootWidget"></a>scheduleAttachRootWidget</h3><p>接着看 scheduleAttachRootWidget这个方法中执行了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Timer.run(() &#123;<br>  attachRootWidget(rootWidget);<br>&#125;);<br></code></pre></td></tr></table></figure><p>在attachRootWidget方法中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> attachRootWidget(Widget rootWidget) &#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">bool</span> isBootstrapFrame = renderViewElement == <span class="hljs-keyword">null</span>;<br>  _readyToProduceFrames = <span class="hljs-keyword">true</span>;<br>  _renderViewElement = RenderObjectToWidgetAdapter&lt;RenderBox&gt;(<br>    container: renderView,<br>    debugShortDescription: <span class="hljs-string">&#x27;[root]&#x27;</span>,<br>    child: rootWidget,<br>  ).attachToRenderTree(buildOwner!, renderViewElement <span class="hljs-keyword">as</span> RenderObjectToWidgetElement&lt;RenderBox&gt;?);<br>  <span class="hljs-keyword">if</span> (isBootstrapFrame) &#123;<br>    SchedulerBinding.instance.ensureVisualUpdate();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意看这里的<code>_renderViewElement</code>对象是由<code>RenderObjectToWidgetAdapter.attachToRenderTree()</code>返回的;<br>在初始化<code>RenderObjectToWidgetAdapter</code>对象时传入了<code>renderView</code> 和<code>rootWidget</code>作为参数,这里的<code>rootWidget</code>就是我们<code>runApp</code>中传入的参数;<br>那么这里的<code>renderView</code>是什么时候初始化的?我们在上面提到的<code>WidgetsFlutterBinding</code>混入了七个<code>xxxbinding</code>,这里需要了解mixin的执行顺序:<br>虽然首先执行的是<code>WidgetsBinding</code>的<code>initInstances</code>方法,但由于第一就执行了<code>super.initInstances()</code>,所以会先执行前一个<code>RenderBinding</code>的<code>initInstances</code>,然后不断super,所以最终<code>initInstances</code>实际的逻辑执行顺序,可以看成是从前面的Binding往后面的Binding,所以在<code>WidgetsBinding</code>的<code>attachRootWidget</code>方法内<code>renderView</code>已经被初始化了.</p><h3 id="RenderObjectToWidgetAdapter"><a href="#RenderObjectToWidgetAdapter" class="headerlink" title="RenderObjectToWidgetAdapter"></a>RenderObjectToWidgetAdapter</h3><p>继承自<code>RenderObjectWidget</code>,它有两个关键的抽象方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">RenderObjectElement createElement();<br>RenderObject createRenderObject(BuildContext context);<br></code></pre></td></tr></table></figure><p>看下是怎么覆写的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br>RenderObjectToWidgetElement&lt;T&gt; createElement() =&gt; RenderObjectToWidgetElement&lt;T&gt;(<span class="hljs-keyword">this</span>);<br><br><span class="hljs-meta">@override</span><br>RenderObjectWithChildMixin&lt;T&gt; createRenderObject(BuildContext context) =&gt; container;<br></code></pre></td></tr></table></figure><p>我们接着看attachToRenderTree</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart">RenderObjectToWidgetElement&lt;T&gt; attachToRenderTree(BuildOwner owner, [ RenderObjectToWidgetElement&lt;T&gt;? element ]) &#123;<br>  <span class="hljs-keyword">if</span> (element == <span class="hljs-keyword">null</span>) &#123;<br>    owner.lockState(() &#123;<br>      element = createElement();<br>      <span class="hljs-keyword">assert</span>(element != <span class="hljs-keyword">null</span>);<br>      element!.assignOwner(owner);<br>    &#125;);<br>    owner.buildScope(element!, () &#123;<br>      element!.mount(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    element._newWidget = <span class="hljs-keyword">this</span>;<br>    element.markNeedsBuild();<br>  &#125;<br>  <span class="hljs-keyword">return</span> element!;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里传入了<code>BuildOwner</code>的实例<code>owner</code>和根元素对象.首先执行了<code>owner.lockState</code>,这个方法只是进行了一些断言来保证执行<code>callback</code>期间状态的锁定,这里<code>callback</code>就是4~6行代码;<br>在这个<code>callback</code>中执行了<code>createElement()</code>,用于创建元素,创建出来的元素也就是树的根节点;这里注意一下<code>createElement</code>是<code>RenderObjectToWidgetAdapter</code>实例的方法,看下上面的方法中传入的<code>this</code>也就是<code>RenderObjectToWidgetAdapter</code>对象本身;那么在创建Element时为啥要传入Widget对象？跟踪到最父级的Element发现是为了给_widget赋值.<em>也就是说Element持有了Widget对象,并且该元素由该组件创建</em></p><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>接下来是<code>owner.buildScope</code>,这里传入了根元素和回调函数,同样的是进行了一些断言后回调了<code>callback</code>,在<code>callback</code>中执行了元素的挂载,注意这里传入的两个参数都是<code>null</code>.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> mount(<span class="hljs-built_in">Element?</span> parent, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">assert</span>(parent == <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">super</span>.mount(parent, newSlot);<br>  _rebuild();<br>  <span class="hljs-keyword">assert</span>(_child != <span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>mount</code>方法是<code>RenderObjectToWidgetElement</code>类覆写的<code>Element</code>中定义的方法,这里执行了父类的<code>mount</code>方法和<code>_rebuild</code>方法;<br>先看mount的调用路径<br><code>RootRenderObjectElement--&gt;RenderObjectElement--&gt;Element</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> mount(<span class="hljs-built_in">Element?</span> parent, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">assert</span>(_lifecycleState == _ElementLifecycle.initial);<br>  <span class="hljs-keyword">assert</span>(widget != <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">assert</span>(_parent == <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">assert</span>(parent == <span class="hljs-keyword">null</span> || parent._lifecycleState == _ElementLifecycle.active);<br>  <span class="hljs-keyword">assert</span>(slot == <span class="hljs-keyword">null</span>);<br>  _parent = parent;<br>  _slot = newSlot;<br>  _lifecycleState = _ElementLifecycle.active;<br>  _depth = _parent != <span class="hljs-keyword">null</span> ? _parent!.depth + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-comment">// Only assign ownership if the parent is non-null. If parent is null</span><br>    <span class="hljs-comment">// (the root node), the owner should have already been assigned.</span><br>    <span class="hljs-comment">// See RootRenderObjectElement.assignOwner().</span><br>    _owner = parent.owner;<br>  &#125;<br>  <span class="hljs-keyword">assert</span>(owner != <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">final</span> Key? key = widget.key;<br>  <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">is</span> GlobalKey) &#123;<br>    owner!._registerGlobalKey(key, <span class="hljs-keyword">this</span>);<br>  &#125;<br>  _updateInheritance();<br>  attachNotificationTree();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里维护了一些成员信息,并将树的深度_depth加1,到这里也就以为着根元素节点挂载完成<br>当<code>Element#mount</code>执行完成后,回到<code>RenderObjectToWidgetElement#mount</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> mount(<span class="hljs-built_in">Element?</span> parent, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">super</span>.mount(parent, newSlot);<br>  <span class="hljs-keyword">assert</span>(() &#123;<br>    _debugDoingBuild = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;());<br>  _renderObject = (widget <span class="hljs-keyword">as</span> RenderObjectWidget).createRenderObject(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">assert</span>(!_renderObject!.debugDisposed!);<br>  <span class="hljs-keyword">assert</span>(() &#123;<br>    _debugDoingBuild = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;());<br>  <span class="hljs-keyword">assert</span>(() &#123;<br>    _debugUpdateRenderObjectOwner();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;());<br>  <span class="hljs-keyword">assert</span>(_slot == newSlot);<br>  attachRenderObject(newSlot);<br>  _dirty = <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里面执行了<code>widget</code>的<code>createRenderObject(this)</code>方法来创建<code>_renderObject</code>;注意一下,这里的<code>widget</code>其实就是根组件.也就是<code>RenderObjectToWidgetAdapter</code>的实例对象,调用其<code>createRenderObject</code>方法返回的是其实例中的<code>container</code>对象,也就是说<code>Element</code>中的<code>_renderObject</code>是在<code>mount</code>方法中通过<code>widget.createRenderObject</code>方法创建的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br>RenderObjectWithChildMixin&lt;T&gt; createRenderObject(BuildContext context) =&gt; container;<br></code></pre></td></tr></table></figure><p>这里的<code>container</code>对象也就是前面提到的<code>attachRootWidget</code>中传入的<code>renderView</code>对象.<br>对于根节点的三棵树来讲,已经完成了创建过程,单着并不代表所有的节点都是这中情况.一般情况下,组件不会持有渲染对象,只不过根组件比较特殊,需要有一个开始渲染的节点,<code>createRenderObject</code>方法返回的RenderView也有特殊性</p><p>总结一下</p><ul><li><code>RenderObjectToWidgetAdapter</code>通过构造方法持有<code>RenderView</code>对象</li><li><code>RenderObjectToWidgetAdapter</code>通过<code>createElement</code>方法创建<code>RenderObjectToWidgetElement</code>对象</li><li><code>RenderObjectToWidgetElement</code>通过<code>mount</code>方法持有<code>RenderView</code></li><li><code>RenderObjectToWidgetElement</code>通过构造方法(Element)持有<code>RenderObjectToWidgetAdapter</code></li></ul><h3 id="根渲染对象的关联"><a href="#根渲染对象的关联" class="headerlink" title="根渲染对象的关联"></a>根渲染对象的关联</h3><p>挂载完了我们接着看<code>RenderObjectElement#mount</code>方法中调用的<code>attachRenderObject(newSlot)</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> attachRenderObject(<span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">assert</span>(_ancestorRenderObjectElement == <span class="hljs-keyword">null</span>);<br>  _slot = newSlot;<br>  _ancestorRenderObjectElement = _findAncestorRenderObjectElement();<br>  _ancestorRenderObjectElement?.insertRenderObjectChild(renderObject, newSlot);<br>  <span class="hljs-keyword">final</span> ParentDataElement&lt;ParentData&gt;? parentDataElement = _findAncestorParentDataElement();<br>  <span class="hljs-keyword">if</span> (parentDataElement != <span class="hljs-keyword">null</span>)<br>    _updateParentData(parentDataElement.widget <span class="hljs-keyword">as</span> ParentDataWidget&lt;ParentData&gt;);<br>&#125;<br></code></pre></td></tr></table></figure><p>先调用<code>_findAncestorRenderObjectElement从</code>元素树中向上查找第一个<code>RenderObjectElement</code>类型的元素节点作为先祖节点,然后调用其<code>insertRenderObjectChild</code>方法将自身持有的<code>renderObject</code>插入的渲染树中;<br>然后调用<code>_findAncestorParentDataElement</code>方法从元素树中向上查找第一个<code>ParentDataElement&lt;ParentData&gt;</code>类型的节点,如果非空,则执行<code>_updateParentData</code>方法;由于当前是根节点,这两个查找的方法返回的都是空</p><h3 id="节点挂载"><a href="#节点挂载" class="headerlink" title="节点挂载"></a>节点挂载</h3><p>当父类的mount方法执行完毕后,回过头来看<code>RenderObjectToWidgetElement#mount</code>方法中调用的<code>_rebuild()</code>方法.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> _rebuild() &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    _child = updateChild(_child, (widget <span class="hljs-keyword">as</span> RenderObjectToWidgetAdapter&lt;T&gt;).child, _rootChildSlot);<br>  &#125; <span class="hljs-keyword">catch</span> (exception, stack) &#123;<br>    <span class="hljs-keyword">final</span> FlutterErrorDetails details = FlutterErrorDetails(<br>      exception: exception,<br>      stack: stack,<br>      <span class="hljs-keyword">library</span>: <span class="hljs-string">&#x27;widgets library&#x27;</span>,<br>      context: ErrorDescription(<span class="hljs-string">&#x27;attaching to the render tree&#x27;</span>),<br>    );<br>    FlutterError.reportError(details);<br>    <span class="hljs-keyword">final</span> Widget error = ErrorWidget.builder(details);<br>    _child = updateChild(<span class="hljs-keyword">null</span>, error, _rootChildSlot);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用了<code>updateChild</code>方法,这里面有三个参数.第一个参数<code>_child</code>现在为<code>null</code>,最后一个<code>_rootChildSlot</code>是一个<code>object</code>,注意一下第二个参数<code>widget.child</code>:这里的widget是root也就是<code>RenderObjectToWidgetAdapter</code>对象的实例,它的<code>child</code>也就是是我们在<code>runApp</code>中传入的<code>widget</code>对象,也就是我们在前面<code>attachRootWidget</code>方法中创建<code>RenderObjectToWidgetAdapter</code>时传入的<code>child</code>参数.</p><p>接着看updateChild方法,我们在注释中找到了行为说明</p><table><thead><tr><th></th><th>newWidget &#x3D;&#x3D; null</th><th>newWidget !&#x3D; null</th></tr></thead><tbody><tr><td>child &#x3D;&#x3D; null</td><td>Returns null</td><td>Returns new [Element]</td></tr><tr><td>child !&#x3D; null</td><td>Old child is removed, returns null</td><td>Old child updated if possible, returns child or new [Element]</td></tr></tbody></table><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">Element?</span> updateChild(<span class="hljs-built_in">Element?</span> child, Widget? newWidget, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">if</span> (newWidget == <span class="hljs-keyword">null</span>) &#123;...&#125;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild;<br>  <span class="hljs-keyword">if</span> (child != <span class="hljs-keyword">null</span>) &#123;...&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// The [debugProfileBuildsEnabled] code for this branch is inside</span><br>    <span class="hljs-comment">// [inflateWidget], since some [Element]s call [inflateWidget] directly</span><br>    <span class="hljs-comment">// instead of going through [updateChild].</span><br>    newChild = inflateWidget(newWidget, newSlot);<br>  &#125;<br>  <span class="hljs-keyword">assert</span>(...);<br>  <span class="hljs-keyword">return</span> newChild;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了节省篇幅,这里删除了没有执行的代码;因为这里的child为空,所以会走inflateWidget(newWidget, newSlot)方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">Element</span> inflateWidget(Widget newWidget, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">final</span> Key? key = newWidget.key;<br>    <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">is</span> GlobalKey) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> newChild = _retakeInactiveElement(key, newWidget);<br>      <span class="hljs-keyword">if</span> (newChild != <span class="hljs-keyword">null</span>) &#123;<br>        newChild._activateWithParent(<span class="hljs-keyword">this</span>, newSlot);<br>        <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> updatedChild = updateChild(newChild, newWidget, newSlot);<br>        <span class="hljs-keyword">return</span> updatedChild!;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild = newWidget.createElement();<br>    newChild.mount(<span class="hljs-keyword">this</span>, newSlot);<br>    <span class="hljs-keyword">return</span> newChild;<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (isTimelineTracked)<br>      Timeline.finishSync();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里检查了组件是否有key并且key是不是GlobalKey.这里先放一下<br>后面调用<code>newWidget.createElement()</code>创建了<code>element</code>,并且调用其<code>mount</code>进行挂载.<br>然后就开始了树的遍历进行挂载,根据我们在<code>runApp</code>中传入的组件不同,调用不同对象的方法,</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;入口&quot;&gt;&lt;a href=&quot;#入口&quot; class=&quot;headerlink&quot; title=&quot;入口&quot;&gt;&lt;/a&gt;入口&lt;/h2&gt;&lt;p&gt;flutter应用的入口点在main方法中调用的&lt;code&gt;runApp(Widget app)&lt;/code&gt;方法中&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>写在2023年初--2022总结</title>
    <link href="https://blog.huangyuanlove.com/2023/01/07/%E5%86%99%E5%9C%A82023%E5%B9%B4%E5%88%9D-2022%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huangyuanlove.com/2023/01/07/%E5%86%99%E5%9C%A82023%E5%B9%B4%E5%88%9D-2022%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-07T15:22:57.000Z</published>
    <updated>2023-05-19T12:51:02.240Z</updated>
    
    <content type="html"><![CDATA[<p>2022年，新冠三年，新冠诊疗方案第十版将其更名为新型冠状病毒感染；<br>这一年中断了每月学习计划，博客也停更了一年，也不是忙，只是懒散，毕竟再忙也不会忙到写点东西的时间都挤不出来的地步。工作中也只是加强了之前学过的东西，熟练度提高了而已。<br>翻遍了过去一年，也只是刷了几道题，学完了极客时间几个课程而已。新的一年有新的计划。不仅要提高自己的技术硬实力，也需要提高软技能。</p><h4 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h4><p>还是围绕大前端进行</p><ol><li>flutter<ol><li>掘金小册</li><li>B站视频 王叔不秃 <a href="https://space.bilibili.com/589533168">https://space.bilibili.com/589533168</a>?</li></ol></li><li>前端<ol><li>极客时间课程</li></ol></li><li>iOS</li><li>软技能<ol><li>极客时间课程</li></ol></li></ol><p>共计60个课程，乐观估计也就只能完成10个，悲观先也就四五个的样子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;朱赟的技术管理课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从技术到管理，让你的目标函数达到最优解&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;技术领导力实战笔记&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;通往优秀技术领导者之路&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;硅谷产品实战36讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;用实例揭示如何打造世界级产品&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0开始学架构&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前阿里P9技术专家的实战架构心法&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java核心技术面试精讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前Oracle首席工程师带你修炼Java内功&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;趣谈网络协议&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;像小说一样的网络协议入门课&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;软件测试52讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从小工到专家的实战心法&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;深入拆解Java虚拟机&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Oracle 高级研究员手把手带你入门JVM&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;程序员进阶攻略&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;每个程序员都应该知道的成长法则&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;技术管理实战36讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前百度最佳经理人的战地笔记&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;代码精进之路&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你写的每一行代码都是你的名片&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;算法面试通关40讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前Facebook工程师带你吃透大厂面试题&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br> <br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;玩转Git三剑客&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;带你深入掌握Git、GitHub和GitLab&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10x程序员工作法&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;掌握主动权，忙到点子上&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;重学前端&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;每天10分钟，重构你的前端知识体系&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;玩转Spring全家桶&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一站通关Spring、Spring Boot与Spring Cloud&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;软件工程之美&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;重新理解软件工程&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java并发编程实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全面系统提升你的并发编程能力&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br> <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iOS开发高手课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从原理到实战，带你解决80%的开发难题&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0开始做增长&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0到1的增长实战方法论&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;透视HTTP协议&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;深入理解HTTP协议本质与应用&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;玩转webpack&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全方位掌握webpack核心技能和优化策略&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TypeScript开发实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;系统掌握TypeScript核心技术&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;网络编程实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从底层到实战，深度解析网络编程&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;浏览器工作原理与实践&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;透过浏览器看懂前端本质&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br> <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全栈工程师修炼指南&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从全栈入门到技能实战&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Node.js开发实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;带你开发一个完整的Node.js项目&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;说透中台&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从概念到落地一站通关&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;苏杰的产品创新课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一次从想法到产品的低成本实验&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;移动端自动化测试实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一步一步带你成为测试高手&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;雷蓓蓓的项目管理实战课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;使众人行，如何带领一群人成事&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;性能工程高手课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;得性能者得天下&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;性能测试实战30讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;告别野路子，成为真正的性能测试高手&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;说透敏捷&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从原理到实战带你落地敏捷&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;接口测试入门课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从原理到实战，带你进阶接口测试&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java业务开发常见错误100例&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全面避坑 + 最佳实践=健壮代码&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;图解 Google V8&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一门课搞懂 JavaScript 执行逻辑&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SRE实战手册&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0到1带你搞定系统稳定性&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;互联网人的英语私教课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;让你快速提升英语阅读能力&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;微信小程序全栈开发实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手把手带你实现一款电商小程序&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;软件设计之美&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;多一点设计，少一点问题&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;技术管理案例课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;踩坑复盘+案例分析+精进攻略=高效管理&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;用户体验设计实战课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;人人可用的体验创新思维&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WebAssembly入门课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0到1实现一个WebAssembly多媒体应用&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;动态规划面试宝典&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;学好动态规划，面试晋升都不怕&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;乔新亮的CTO成长复盘&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;千万年薪CTO是如何炼成的&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A/B测试从0到1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从原理到实战，吃透A/B测试&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;代码之丑&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;识别坏味道，重构问题代码&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;体验设计案例课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;用量化方式，重新定义体验设计&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;技术面试官识人手册&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;辨识精英，打造高效能团队&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;性能优化高手课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一站通关从设计到交付的性能问题&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如何落地业务建模&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Thoughtworks CTO带你重构建模技能&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;程序员的测试课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;掌握测试，写好高质量代码&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;玩转Vue 3全家桶&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;基础+实战+源码，全方位学透Vue 3&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;深入剖析Java新特性&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手把手带你吃透Java新特性&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;攻克视频技术&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;高手带路，轻松学习视频原理&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搞定音频技术&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;深入浅出音频核心原理及应用&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;自动化测试高手课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;新模型+全栈视角\u003d高效进阶&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;遗留系统现代化实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;帮你走出遗留系统的泥潭&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;大厂设计进阶实战课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;让你突破瓶颈的高薪设计课&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2022年，新冠三年，新冠诊疗方案第十版将其更名为新型冠状病毒感染；&lt;br&gt;这一年中断了每月学习计划，博客也停更了一年，也不是忙，只是懒散，毕竟再忙也不会忙到写点东西的时间都挤不出来的地步。工作中也只是加强了之前学过的东西，熟练度提高了而已。&lt;br&gt;翻遍了过去一年，也只是刷</summary>
      
    
    
    
    
    <category term="乱七八糟" scheme="https://blog.huangyuanlove.com/tags/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
  </entry>
  
  <entry>
    <title>riverpod1.0+简介</title>
    <link href="https://blog.huangyuanlove.com/2022/01/04/riverpod1-0-%E7%AE%80%E4%BB%8B/"/>
    <id>https://blog.huangyuanlove.com/2022/01/04/riverpod1-0-%E7%AE%80%E4%BB%8B/</id>
    <published>2022-01-04T15:47:43.000Z</published>
    <updated>2024-04-01T02:23:12.589Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter更新到2.8了，最近打算重拾一下flutter，写点东西练练手。大家都清楚在flutter中状态管理确实挺麻烦的，从一开始的BLoC到provide、Provider，还有getX、Riverpod等等各式各样的状态管理库，我个人倾向于使用riverpod，它更像一个状态管理库；而getX更像一个开发的框架，实在是太大了:当你使用getX的时候，你是在用getX而不是flutter写应用。</p><span id="more"></span><h2 id="引入riverpod"><a href="#引入riverpod" class="headerlink" title="引入riverpod"></a>引入riverpod</h2><p>demo中没有包含flutter_hook,所以我们选择引入flutter_riverpod即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">environment:</span><br>  <span class="hljs-attr">sdk:</span> <span class="hljs-string">&quot;&gt;=2.15.1 &lt;3.0.0&quot;</span><br>  <span class="hljs-attr">flutter:</span> <span class="hljs-string">&quot;&gt;=2.0.0&quot;</span><br><br><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">flutter:</span><br>    <span class="hljs-attr">sdk:</span> <span class="hljs-string">flutter</span><br>  <span class="hljs-attr">flutter_riverpod:</span> <span class="hljs-string">^1.0.3</span><br></code></pre></td></tr></table></figure><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>首先，我们需要使用<code>ProviderScope</code>来包裹整个应用，也就是在main方法中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(ProviderScope(child: Home()));<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们可以声明一个Provider。一般情况下，我们会把各种各样的provider作为全局变量来引用，声明一个provider和声明一个函数没有多大的区别。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> helloWorldProvider = Provider((_) =&gt; <span class="hljs-string">&#x27;Hello world&#x27;</span>);<br></code></pre></td></tr></table></figure><p>最后我们就可以读取Provider中的数据了。<br>在1.0.0之后的版本中，ConsumerWidget的build方法中提供了<code>WidgetRef</code>对象，用来取代0.14版本中的<code>useProvider</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;</span>;<br><br><span class="hljs-keyword">final</span> helloWorldProvider  = Provider((_)=&gt;<span class="hljs-string">&quot;hello world&quot;</span>);<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> ProviderScope(child: Home()));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span></span>&#123;<br>  <span class="hljs-keyword">const</span> Home(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> value = ref.watch(helloWorldProvider);<br><br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;riverpod demo&quot;</span>),),<br>        body: Center(<br>          child: Text(value),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><h3 id="各种各样的Provider"><a href="#各种各样的Provider" class="headerlink" title="各种各样的Provider"></a>各种各样的Provider</h3><p>具体可以看这里，<a href="https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/flutter_riverpod-library.html">https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/flutter_riverpod-library.html</a></p><p>下面列举了一些常用的Provider类型</p><ul><li><p>Provider</p><p><a href="https://pub.dev/documentation/riverpod/latest/riverpod/Provider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/Provider-class.html</a></p></li><li><p>StateProvider</p></li></ul><p><a href="https://pub.dev/documentation/riverpod/latest/riverpod/StateProvider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/StateProvider-class.html</a></p><ul><li><p>StateNotifierProvider<br><a href="https://pub.dev/documentation/riverpod/latest/riverpod/StateNotifierProvider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/StateNotifierProvider-class.html</a></p></li><li><p>FutureProvider<br><a href="https://pub.dev/documentation/riverpod/latest/riverpod/FutureProvider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/FutureProvider-class.html</a></p></li><li><p>StreamProvider<br><a href="https://pub.dev/documentation/riverpod/latest/riverpod/StreamProvider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/StreamProvider-class.html</a></p></li></ul><h3 id="Provider的修饰符"><a href="#Provider的修饰符" class="headerlink" title="Provider的修饰符"></a>Provider的修饰符</h3><h4 id="family"><a href="#family" class="headerlink" title=".family"></a>.family</h4><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>该修饰符适用于适用外部数据来构建provider的情况</p><p>一些常用情况</p><ul><li>和<a href="https://pub.dev/documentation/riverpod/latest/riverpod/FutureProvider-class.html">FutureProvider</a> 组合，来根据id获取消息</li><li>把当前Locale对象传给provider，用来进行国际化</li><li>在不访问对方属性的前提下连接两个provider</li></ul><p>在使用family时，会额外的向provider提供一个属性，在provider中我们可以自由的使用该属性来创建某些状态</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> messagesFamily = FutureProvider.family&lt;Message, <span class="hljs-built_in">String</span>&gt;((ref, id) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">return</span> dio.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;http://my_api.dev/messages/<span class="hljs-subst">$id</span>&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这种情况下在使用<code>messagesFamily</code>时会有点语法上的变化，我们需要额外提供一个参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-keyword">final</span> response = ref.watch(messagesFamily(<span class="hljs-string">&#x27;id&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>它还支持同时获取不同的属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br>Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-keyword">final</span> frenchTitle = ref.watch(titleFamily(<span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;fr&#x27;</span>)));<br>  <span class="hljs-keyword">final</span> englishTitle = ref.watch(titleFamily(<span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;en&#x27;</span>)));<br><br>  <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&#x27;fr: <span class="hljs-subst">$frenchTitle</span> en: <span class="hljs-subst">$englishTitle</span>&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="参数限制"><a href="#参数限制" class="headerlink" title="参数限制"></a>参数限制</h5><p>参数不限制类型，但必须实现<code>==</code>和<code>hashCode</code>两个方法；</p><p>如果参数不是constant的，比如我们想将输入框内容传给Provider，但是输入框的内容会变化的特别频繁并且不能复用，这种情况可能会导致内存泄露，可以使用<code>.autoDispose</code>修饰符来修复这个问题</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> characters = FutureProvider.autoDispose.family&lt;<span class="hljs-built_in">List</span>&lt;Character&gt;, <span class="hljs-built_in">String</span>&gt;((ref, filter) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">return</span> fetchCharacters(filter: filter);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="传递多个参数"><a href="#传递多个参数" class="headerlink" title="传递多个参数"></a>传递多个参数</h5><p>.family修饰符并没有内置提供过个参数的方法，另外一方面，这个参数可以是任意符合上面提到的限制的类型。<br>比如</p><ul><li>元组</li><li>使用 Freezed 或 built_value 生成的对象</li><li>使用 equatable 的对象</li></ul><p>** freezed **</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@freezed</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyParameter</span> <span class="hljs-title">with</span> <span class="hljs-title">_</span>$<span class="hljs-title">MyParameter</span> </span>&#123;<br>  <span class="hljs-keyword">factory</span> MyParameter(&#123;<br>    <span class="hljs-keyword">required</span> <span class="hljs-built_in">int</span> userId,<br>    <span class="hljs-keyword">required</span> Locale locale,<br>  &#125;) = _MyParameter;<br>&#125;<br><br><span class="hljs-keyword">final</span> exampleProvider = Provider.autoDispose.family&lt;Something, MyParameter&gt;((ref, myParameter) &#123;<br>  <span class="hljs-built_in">print</span>(myParameter.userId);<br>  <span class="hljs-built_in">print</span>(myParameter.locale);<br>  <span class="hljs-comment">// Do something with userId/locale</span><br>&#125;);<br><br><span class="hljs-meta">@override</span><br>Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-built_in">int</span> userId; <span class="hljs-comment">// Read the user ID from somewhere</span><br>  <span class="hljs-keyword">final</span> locale = Localizations.localeOf(context);<br><br>  <span class="hljs-keyword">final</span> something = ref.watch(<br>    exampleProvider(MyParameter(userId: userId, locale: locale)),<br>  );<br><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Equatable</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyParameter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Equatable</span>  </span>&#123;<br>  MyParameter(&#123;<br>    <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.userId,<br>    <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.locale,<br>  &#125;);<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> userId;<br>  <span class="hljs-keyword">final</span> Locale locale;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Object</span>&gt; <span class="hljs-keyword">get</span> props =&gt; [userId, locale];<br>&#125;<br><br><span class="hljs-keyword">final</span> exampleProvider = Provider.family&lt;Something, MyParameter&gt;((ref, myParameter) &#123;<br>  <span class="hljs-built_in">print</span>(myParameter.userId);<br>  <span class="hljs-built_in">print</span>(myParameter.locale);<br>  <span class="hljs-comment">// Do something with userId/locale</span><br>&#125;);<br><br><span class="hljs-meta">@override</span><br>Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-built_in">int</span> userId; <span class="hljs-comment">// Read the user ID from somewhere</span><br>  <span class="hljs-keyword">final</span> locale = Localizations.localeOf(context);<br><br>  <span class="hljs-keyword">final</span> something = ref.watch(<br>    exampleProvider(MyParameter(userId: userId, locale: locale)),<br>  );<br><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="autoDispose"><a href="#autoDispose" class="headerlink" title=".autoDispose"></a>.autoDispose</h4><p>一个通用场景是能够自动释放长时间不适用Provider；</p><p>有很多个让我们这么做得理由，比如：</p><ul><li>在使用Firebase时，关闭连接避免不必要的开销</li><li>当用户离开页面再进入页面时重置状态</li></ul><p>我们可以使用内嵌的<code>.autoDispose</code>修饰符来支持上述场景</p><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><p>想要告诉Riverpod在不再使用provider时将其销毁，只需要在Provider之前加上<code>.autoDispose</code>即可</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> userProvider = StreamProvider.autoDispose&lt;User&gt;((ref) &#123;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>就这样，当<code>userProvider</code>不再使用时将会被自动销毁</p><p>注意通用参数是如何在autoDispose之后而不是之前传递的–autoDispose不是一个命名的构造函数。</p><p>当然，上面也提到可以和其他修饰符一起</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> userProvider = StreamProvider.autoDispose.family&lt;User, <span class="hljs-built_in">String</span>&gt;((ref, id) &#123;<br><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="ref-maintainState"><a href="#ref-maintainState" class="headerlink" title="ref.maintainState"></a>ref.maintainState</h5><p>用<code>autoDispose</code>标记一个提供者，也会在ref上增加一个额外的属性： <code>maintainState</code>。</p><p>该属性是一个布尔值（默认为false），允许提供者告诉Riverpod即使不再被监听，是否应该保留提供者的状态。</p><p>一个用例是在一个HTTP请求完成后，将这个标志设置为true:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> myProvider = FutureProvider.autoDispose((ref) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">final</span> response = <span class="hljs-keyword">await</span> dio.<span class="hljs-keyword">get</span>(...);<br>  ref.maintainState = <span class="hljs-keyword">true</span>;<br>  <span class="hljs-keyword">return</span> response;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这样，如果请求失败，用户离开屏幕后又重新进入，那么请求将被再次执行。但如果请求成功完成，状态将被保留，重新进入屏幕将不会触发新的请求。</p><h5 id="示例：取消http请求"><a href="#示例：取消http请求" class="headerlink" title="示例：取消http请求"></a>示例：取消http请求</h5><p>autoDispose修改器可以与FutureProvider和ref.onDispose相结合，以便在不再需要HTTP请求时轻松取消。</p><p>要求：</p><ul><li>当用户进入一个屏幕时，启动一个HTTP请求</li><li>如果用户在请求完成前离开屏幕，则取消HTTP请求</li><li>如果请求成功，离开并重新进入屏幕不会启动一个新的请求</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> myProvider = FutureProvider.autoDispose((ref) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-comment">// An object from package:dio that allows cancelling http requests</span><br>  <span class="hljs-keyword">final</span> cancelToken = CancelToken();<br>  <span class="hljs-comment">// When the provider is destroyed, cancel the http request</span><br>  ref.onDispose(() =&gt; cancelToken.cancel());<br><br>  <span class="hljs-comment">// Fetch our data and pass our `cancelToken` for cancellation to work</span><br>  <span class="hljs-keyword">final</span> response = <span class="hljs-keyword">await</span> dio.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;path&#x27;</span>, cancelToken: cancelToken);<br>  <span class="hljs-comment">// If the request completed successfully, keep the state</span><br>  ref.maintainState = <span class="hljs-keyword">true</span>;<br>  <span class="hljs-keyword">return</span> response;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="参数类型’AutoDisposeProvider’不能分配给参数类型’AlwaysAliveProviderBase’。"><a href="#参数类型’AutoDisposeProvider’不能分配给参数类型’AlwaysAliveProviderBase’。" class="headerlink" title="参数类型’AutoDisposeProvider’不能分配给参数类型’AlwaysAliveProviderBase’。"></a>参数类型’AutoDisposeProvider’不能分配给参数类型’AlwaysAliveProviderBase’。</h5><p>当使用.autoDispose时，你可能会发现自己的应用程序无法编译，出现类似的错误。</p><blockquote><p>The argument type ‘AutoDisposeProvider’ can’t be assigned to the parameter type ‘AlwaysAliveProviderBase’</p></blockquote><p>可能是因为你试图在一个没有标记为.autoDispose的提供者中监听一个标记为.autoDispose的提供者，例如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> firstProvider = Provider.autoDispose((ref) =&gt; <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">final</span> secondProvider = Provider((ref) &#123;<br>  <span class="hljs-comment">// The argument type &#x27;AutoDisposeProvider&lt;int&gt;&#x27; can&#x27;t be assigned to the</span><br>  <span class="hljs-comment">// parameter type &#x27;AlwaysAliveProviderBase&lt;Object, Null&gt;&#x27;</span><br>  ref.watch(firstProvider);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这是不可取的，因为它将导致firstProvider永远不会被dispose。我们可以考虑将 <code>secondProvider</code> 标记为 &#96;.autoDispose来修复这个问题：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> firstProvider = Provider.autoDispose((ref) =&gt; <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">final</span> secondProvider = Provider.autoDispose((ref) &#123;<br>  ref.watch(firstProvider);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="WidgetRef"><a href="#WidgetRef" class="headerlink" title="WidgetRef"></a>WidgetRef</h2><h3 id="获取WidgetRef对象"><a href="#获取WidgetRef对象" class="headerlink" title="获取WidgetRef对象"></a>获取WidgetRef对象</h3><h4 id="从其他Provider对象中获取"><a href="#从其他Provider对象中获取" class="headerlink" title="从其他Provider对象中获取"></a>从其他Provider对象中获取</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> provider = Provider((ref) &#123;<br>  <span class="hljs-comment">// use ref to obtain other providers</span><br>  <span class="hljs-keyword">final</span> repository = ref.watch(repositoryProvider);<br>  <span class="hljs-keyword">return</span> SomeValue(repository);<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>ref</code>对象可以很安全的在provider之间传递，一个常见的用法就是讲<code>ref</code>传递给 <a href="https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html">StateNotifier</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counter = StateNotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;((ref) &#123;<br>  <span class="hljs-keyword">return</span> Counter(ref);<br>&#125;);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StateNotifier</span>&lt;<span class="hljs-title">int</span>&gt; </span>&#123;<br>  Counter(<span class="hljs-keyword">this</span>.ref): <span class="hljs-keyword">super</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">final</span> Ref ref;<br><br>  <span class="hljs-keyword">void</span> increment() &#123;<br>    <span class="hljs-comment">// Counter can use the &quot;ref&quot; to read other providers</span><br>    <span class="hljs-keyword">final</span> repository = ref.read(repositoryProvider);<br>    repository.post(<span class="hljs-string">&#x27;...&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这么做可以让Counter内部读取provider状态</p><h4 id="从Widget对象中获取ref"><a href="#从Widget对象中获取ref" class="headerlink" title="从Widget对象中获取ref"></a>从Widget对象中获取ref</h4><p>一般情况下Widget对象中是没有ref对象中，但riverpod提供了几种解决方案</p><ul><li>使用ConsumerWidget替换StatelessWidget</li></ul><p>ConsumerWidget和StatelessWidget基本相同(虽然是继承了StatefulWidget)，只是在build方法中多了一个WidgetRef对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-comment">// use ref to listen to a provider</span><br>    <span class="hljs-keyword">final</span> counter = ref.watch(counterProvider);<br>    <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&#x27;<span class="hljs-subst">$counter</span>&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用ConsumerStatefulWidget+ConsumerState 替换 StatefulWidget+State</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerStatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  HomeViewState createState() =&gt; HomeViewState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeViewState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerState</span>&lt;<span class="hljs-title">HomeView</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    <span class="hljs-comment">// &quot;ref&quot; can be used in all life-cycles of a StatefulWidget.</span><br>    ref.read(counterProvider);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-comment">// We can also use &quot;ref&quot; to listen to a provider inside the build method</span><br>    <span class="hljs-keyword">final</span> counter = ref.watch(counterProvider);<br>    <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&#x27;<span class="hljs-subst">$counter</span>&#x27;</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>使用 HookConsumerWidget 替换 HookWidget</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HookConsumerWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-comment">// HookConsumerWidget allows using hooks inside the build method</span><br>    <span class="hljs-keyword">final</span> state = useState(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// We can also use the ref parameter to listen to providers.</span><br>    <span class="hljs-keyword">final</span> counter = ref.watch(counterProvider);<br>    <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&#x27;<span class="hljs-subst">$counter</span>&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="WidgetRef对象的方法"><a href="#WidgetRef对象的方法" class="headerlink" title="WidgetRef对象的方法"></a>WidgetRef对象的方法</h3><p>这里的<code>WidgetRef</code>对象在读取Provider中的数据时，提供了<code>read</code>、<code>listen</code>和<code>watch</code>方法。至于什么情况下选用哪个方法，这里有三个建议</p><blockquote><ul><li>当我们需要监听变化并且从Provider中获取数据时，比如当数据变化时我们需要重新构建Widget，这时我们可以使用<code>ref.watch</code></li><li>当我们需要监听变化去执行某个动作时，我们可以使用<code>ref.listen</code></li><li>当我们仅需要读取数据不关心数据的变化时，比如点击某个按钮时，根据状态来判断下一步动作时，我们可以使用<code>ref.read</code></li></ul></blockquote><ul><li>ref.watch<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterProvider = StateProvider((_)=&gt; <span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span></span>&#123;<br>  <span class="hljs-keyword">const</span> Home(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> count = ref.watch(counterProvider);<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;riverpod demo&quot;</span>),),<br>        body: Center(<br>          child: Column(<br>            children: [<br>              Text(<span class="hljs-string">&#x27;<span class="hljs-subst">$count</span>&#x27;</span>)<br>            ],<br>          ),<br>        ),<br>        floatingActionButton: FloatingActionButton(onPressed: ()=&gt;&#123;<br>          ref.read(counterProvider.state).state++<br>        &#125;,child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;点击&quot;</span>),),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>ref.read</li></ul><p>使用该方法可以没有任何影响的获取一次provider的状态，但是作者提示我们尽量不要使用该方法，它只是用来解决使用<code>watch|listen</code>不方便的问题，如果可以，尽量使用<code>watch|listen.</code>这里有个使用read方法的示例<a href="https://riverpod.dev/docs/concepts/combining_providers#can-i-read-a-provider-without-listening-to-it">https://riverpod.dev/docs/concepts/combining_providers#can-i-read-a-provider-without-listening-to-it</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterProvider = StateNotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;((ref) =&gt; Counter());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      floatingActionButton: FloatingActionButton(<br>        onPressed: () &#123;<br>          <span class="hljs-comment">// Call `increment()` on the `Counter` class</span><br>          ref.read(counterProvider.notifier).increment();<br>        &#125;,<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ref.listen</li></ul><p>和<code>ref.watch</code>相似，我们也可以使用<code>ref.listen</code>来观察provider。他们的区别就是当provider状态变化时，我们可以调用自己定义的方法。该方法需要两个参数，第一个参数是要监听的provider对象，第二个参数是回调方法，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterProvider = StateNotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;((ref) =&gt; Counter());<br><br><span class="hljs-keyword">final</span> anotherProvider = Provider((ref) &#123;<br>  ref.listen&lt;<span class="hljs-built_in">int</span>&gt;(counterProvider, (<span class="hljs-built_in">int?</span> previousCount, <span class="hljs-built_in">int</span> newCount) &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The counter changed <span class="hljs-subst">$&#123;newCount&#125;</span>&#x27;</span>);<br>  &#125;);<br>  ...<br>&#125;);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterProvider = StateNotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;((ref) =&gt; Counter());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    ref.listen&lt;<span class="hljs-built_in">int</span>&gt;(counterProvider, (<span class="hljs-built_in">int?</span> previousCount, <span class="hljs-built_in">int</span> newCount) &#123;<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The counter changed <span class="hljs-subst">$&#123;newCount&#125;</span>&#x27;</span>);<br>    &#125;);<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="决定订阅什么"><a href="#决定订阅什么" class="headerlink" title="决定订阅什么"></a>决定订阅什么</h3><p>比如我们有一个StreamProvider</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> userProvider = StreamProvider&lt;User&gt;(...);<br></code></pre></td></tr></table></figure><p>我们可以这么去订阅</p><ul><li>通过监听provider本身来同步获取当前状态</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  AsyncValue&lt;User&gt; user = ref.watch(userProvider);<br><br>  <span class="hljs-keyword">return</span> user.when(<br>    loading: () =&gt; <span class="hljs-keyword">const</span> CircularProgressIndicator(),<br>    error: (error, stack) =&gt; <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Oops&#x27;</span>),<br>    data: (user) =&gt; Text(user.name),<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过监听<code>userProvider.stream</code>来获取对应的stream</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  Stream&lt;User&gt; user = ref.watch(userProvider.stream);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过监听<code>userProvider.future</code>来获取一个能得到最新状态的Future</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  Future&lt;User&gt; user = ref.watch(userProvider.future);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用”select”-来决定哪些值变化时进行重建"><a href="#使用”select”-来决定哪些值变化时进行重建" class="headerlink" title="使用”select” 来决定哪些值变化时进行重建"></a>使用”select” 来决定哪些值变化时进行重建</h3><p>比如我们有一个User对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>  <span class="hljs-built_in">String</span> <span class="hljs-keyword">get</span> name;<br>  <span class="hljs-built_in">int</span> <span class="hljs-keyword">get</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是我们在渲染页面时只用到了name属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  User user = ref.watch(userProvider);<br>  <span class="hljs-keyword">return</span> Text(user.name);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况下，如果<code>age</code>属性发生了变化，该Widget就会重建，显然这不是我们想要的。这时候我们可以使用<code>select</code>来选择对象的某些属性来监听</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-built_in">String</span> name = ref.watch(userProvider.select((user) =&gt; user.name))<br>  <span class="hljs-keyword">return</span> Text(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，<code>select</code>同样适用于<code>listen</code>方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">ref.listen&lt;<span class="hljs-built_in">String</span>&gt;(<br>  userProvider.select((user) =&gt; user.name),<br>  (<span class="hljs-built_in">String?</span> previousName, <span class="hljs-built_in">String</span> newName) &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The user name changed <span class="hljs-subst">$newName</span>&#x27;</span>);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>需要注意的是，这里没必要一定返回对象的属性，只要复写了<code>==</code>的值都可以正常工作，比如</p><pre><code class="dart">final label = ref.watch(userProvider.select((user) =&gt; &#39;Mr $&#123;user.name&#125;&#39;));</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Flutter更新到2.8了，最近打算重拾一下flutter，写点东西练练手。大家都清楚在flutter中状态管理确实挺麻烦的，从一开始的BLoC到provide、Provider，还有getX、Riverpod等等各式各样的状态管理库，我个人倾向于使用riverpod，它更像一个状态管理库；而getX更像一个开发的框架，实在是太大了:当你使用getX的时候，你是在用getX而不是flutter写应用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
    <category term="riverpod" scheme="https://blog.huangyuanlove.com/tags/riverpod/"/>
    
  </entry>
  
  <entry>
    <title>写在2022年初--2021总结</title>
    <link href="https://blog.huangyuanlove.com/2022/01/01/%E5%86%99%E5%9C%A82022%E5%B9%B4%E5%88%9D-2021%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huangyuanlove.com/2022/01/01/%E5%86%99%E5%9C%A82022%E5%B9%B4%E5%88%9D-2021%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-01T14:27:57.000Z</published>
    <updated>2023-05-19T12:51:02.240Z</updated>
    
    <content type="html"><![CDATA[<p>2021年，娃娃出生了，嘿嘿嘿<br>今年似乎也没有学啥，但又不知道时间都花在哪里了。<br>浅尝辄止的学习了一些技术</p><ul><li>vue</li><li>react</li><li>小程序</li><li>鸿蒙</li></ul><p>翻了一丢丢源码</p><ul><li>okhttp</li><li>retrofit</li><li>gson</li></ul><p>了解了一下Android系统启动流程、应用启动流程。然后就是准备重拾flutter，学习一下跨平台技术</p><span id="more"></span><h4 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h4><p>深入学习一下fluter和kotlin<br>多刷一些算法题，用的时候是真有用</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021年，娃娃出生了，嘿嘿嘿&lt;br&gt;今年似乎也没有学啥，但又不知道时间都花在哪里了。&lt;br&gt;浅尝辄止的学习了一些技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vue&lt;/li&gt;
&lt;li&gt;react&lt;/li&gt;
&lt;li&gt;小程序&lt;/li&gt;
&lt;li&gt;鸿蒙&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻了一丢丢源码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;okhttp&lt;/li&gt;
&lt;li&gt;retrofit&lt;/li&gt;
&lt;li&gt;gson&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解了一下Android系统启动流程、应用启动流程。然后就是准备重拾flutter，学习一下跨平台技术&lt;/p&gt;</summary>
    
    
    
    
    <category term="乱七八糟" scheme="https://blog.huangyuanlove.com/tags/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android慢网络及页面监控</title>
    <link href="https://blog.huangyuanlove.com/2021/06/19/Android%E6%85%A2%E7%BD%91%E7%BB%9C%E5%8F%8A%E9%A1%B5%E9%9D%A2%E7%9B%91%E6%8E%A7/"/>
    <id>https://blog.huangyuanlove.com/2021/06/19/Android%E6%85%A2%E7%BD%91%E7%BB%9C%E5%8F%8A%E9%A1%B5%E9%9D%A2%E7%9B%91%E6%8E%A7/</id>
    <published>2021-06-19T06:55:29.000Z</published>
    <updated>2023-05-19T12:51:02.213Z</updated>
    
    <content type="html"><![CDATA[<p>最近在搞Android应用大盘监控，目前需要监控的是慢网络请求及页面的打开和关闭。由于应用中使用的OkHttp进行网络请求，着重看了一下OkHttp源码，还有别人写的一些总结。对于页面的打开关闭行为，我们可以搞个BaseActivity或者在Application中注册生命周期回调就好了。问题在于慢网络监控需要实时上报，而用户行为监控则需要本地落盘保存，在需要的时候再上报，所以如何落盘保存则是一个问题，为此了解了java IO和mmap。</p><span id="more"></span><h2 id="慢网络监控"><a href="#慢网络监控" class="headerlink" title="慢网络监控"></a>慢网络监控</h2><p><strong>嫌长不看直接看结论，代码在这一段的最后。</strong></p><p>在构建<code>OkHttpClient</code>对象时加入<code>eventListener</code>即可，如果会有多个异步网络同时请求，就添加<code>eventListenerFactory</code>。不论是不是同时会有多个异步网络请求，使用<code>eventListenerFactory</code>差距不大。</p><p><strong>比较啰嗦的详解篇</strong></p><p>我们先来看下网络基础内容：</p><ul><li>OSI七层模型和实际应用中的五层模型</li><li>什么是Http</li><li>请求方式、报文结构</li><li>TCP的三次握手、四次挥手</li><li>一次完整的http请求过程</li><li>Http不同版本的差异、优缺点</li><li>http和https的区别</li></ul><p>相关的知识点放在这里了，别人已经写得比较全面了，再抄一遍也没啥意思 :smiley:</p><p><a href="https://juejin.cn/post/6877362691350986766">面试官的这份HTTP灵魂追问你Hold住吗？</a></p><p><a href="https://www.jianshu.com/p/b0aa797608c0">关于HTTP请求你需要知道的一切</a></p><p>当我们使用OkHttp进行网络请求的时候，过程一般是这样的：</p><ol><li>构建<code>OkHttpClient</code></li><li>构建<code>Request</code></li><li>构建<code>Call</code></li><li>使用<code>Call</code>对象进行网络请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">okHttpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>.Builder()<br>        .eventListenerFactory(NetworkListener.get())<br>.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Log.e(TAG,<span class="hljs-string">&quot;addInterceptor before proceed&quot;</span>);<br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> chain.proceed(chain.request());<br>        Log.e(TAG,<span class="hljs-string">&quot;addInterceptor after proceed &quot;</span>);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br>&#125;)<br>.addNetworkInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Log.e(TAG,<span class="hljs-string">&quot;addNetworkInterceptor before proceed&quot;</span>);<br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> chain.proceed(chain.request());<br>        Log.e(TAG,<span class="hljs-string">&quot;addNetworkInterceptor after proceed &quot;</span>);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br>&#125;)<br>        .build();<br><br><span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>        .url(<span class="hljs-string">&quot;.....&quot;</span>)<br>        .build();<br><span class="hljs-type">Call</span> <span class="hljs-variable">call</span> <span class="hljs-operator">=</span> okHttpClient.newCall(request);<br>call.enqueue(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callback</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailure</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call, <span class="hljs-meta">@NotNull</span> IOException e)</span> &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResponse</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call, <span class="hljs-meta">@NotNull</span> Response response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>流程图如下：</p><p><img src="/image/Android/okhttp/OkHttp%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="OkHttp流程图"></p><p>最经典的应该是拦截器部分了，网络对拦截器的分析也挺多了，可以自己翻一下源码总结一下，我也写不出花来 :hushed:</p><p><img src="/image/Android/okhttp/OkHttp%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="OkHttp流程图"></p><p>图片我是用drawio画的，源文件放在了github上，路径 <a href="https://github.com/huangyuanlove/huangyuanlove.github.io/tree/master/image/Android/okhttp">https://github.com/huangyuanlove/huangyuanlove.github.io/tree/master/image/Android/okhttp</a></p><p>下面的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;NetworkListener&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Factory <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Factory</span>() &#123;<br>            <span class="hljs-meta">@NotNull</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> EventListener <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetworkListener</span>();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callStart</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call)</span> &#123;<br>        <span class="hljs-built_in">super</span>.callStart(call);<br>        Log.e(TAG,<span class="hljs-string">&quot;-------callStart---requestId-----&quot;</span>+mRequestId);<br>    &#125;<br><br><span class="hljs-comment">//重写的N个回调方法</span><br>  .<br>  .<br>  .<br>  .<br>  .<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callFailed</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call, <span class="hljs-meta">@NotNull</span> IOException ioe)</span> &#123;<br>        <span class="hljs-built_in">super</span>.callFailed(call, ioe);<br>        ioe.printStackTrace();<br>        Log.e(TAG, <span class="hljs-string">&quot;callFailed&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们可以在这些回调方法中做时间统计，超过指定时长则认为是慢网络请求。</p><h2 id="页面打开关闭监控"><a href="#页面打开关闭监控" class="headerlink" title="页面打开关闭监控"></a>页面打开关闭监控</h2><p>结论：在自定义的application中调用一下<code>registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback);</code>就好。在每个Activity的生命周期执行的时候都会回调<code>callback</code>.</p><h4 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h4><p>在Application中注册一下生命周期回调接口:<code>registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback);</code>并重写各种回调方法，记录对应的时间戳+类名。由于生命周期都是在主线程回调，我们不必担心多线程竞争问题。搞个list直接存。</p><h4 id="落盘保存"><a href="#落盘保存" class="headerlink" title="落盘保存"></a>落盘保存</h4><ol><li>在什么时机保存</li><li>如何保存</li></ol><p>对于问题1，我们在了解Handler机制的时候，提到过在<code>MessageQueue</code>里面有个开发过程中不常用的对象:<code>IdleHandle</code>r，查看源码和注释我们得知，是在线程的MessageQueue中没有消息的时候，会去调用这个类的”queueIdle()”方法，并且该方法返回true时，不会被移除队列。</p><p>我们在Application中向MainLooper的MessageQueue中添加一个IdleHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Looper.myQueue().addIdleHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageQueue</span>.IdleHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">queueIdle</span><span class="hljs-params">()</span> &#123;<br>                Log.e(TAG,<span class="hljs-string">&quot;queueIdle,当前线程名称&quot;</span> + Thread.currentThread().getName()+<span class="hljs-string">&quot;,线程id:&quot;</span> +Thread.currentThread().getId());<br>                BehaviorRepository.getInstance(MyApplication.<span class="hljs-built_in">this</span>).storeLifeEvent();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>对于如何保存，一开始考虑的是写到数据库，因为有事务。后来结合业务发现并不需要这么搞，直接写文件就好，需要的时候直接上传文件到服务器，那么我们如何去写文件？想到了mmap这货。当使用mmap方式写文件失败再考虑使用普通java io。于是有了下面：下面代码来源于：<a href="https://www.cnblogs.com/rustfisher/p/11551372.html">https://www.cnblogs.com/rustfisher/p/11551372.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogWriter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;activityLifeRecorder&quot;</span>;<br><br><br>    <span class="hljs-comment">// 注意申请SD卡读写权限</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String logFileDir;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String fileName;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HandlerThread handlerThread;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Handler writerHandler;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LOG_FILE_GROW_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>; <span class="hljs-comment">// log文件每次增长的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">gCurrentLogPos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;                  <span class="hljs-comment">// log文件当前写到的位置 - 注意要单线程处理</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用前必须调用此方法进行准备</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Context context)</span>&#123;<br>        gCurrentLogPos = <span class="hljs-number">0</span>;<br>        logFileDir = context.getCacheDir() + File.separator + <span class="hljs-string">&quot;logs&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == handlerThread) &#123;<br>            handlerThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerThread</span>(<span class="hljs-string">&quot;LL&quot;</span>);<br>            handlerThread.start();<br>        &#125;<br>        writerHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(handlerThread.getLooper());<br><br><br>        <span class="hljs-comment">//可以保存本次打开的日志，只保存三五次打开的日志</span><br>        fileName = <span class="hljs-string">&quot;_&quot;</span> +  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>,Locale.CHINA).format(System.currentTimeMillis()) + <span class="hljs-string">&quot;.txt&quot;</span>;<br>        Log.d(TAG, <span class="hljs-string">&quot;[prepare] file: &quot;</span> + fileName);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fileName;<br>    &#125;<br><br>    <span class="hljs-comment">// 退出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (writerHandler != <span class="hljs-literal">null</span>) &#123;<br>            writerHandler.removeCallbacksAndMessages(<span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (handlerThread != <span class="hljs-literal">null</span>) &#123;<br>            handlerThread.quit();<br>        &#125;<br>    &#125;<br><br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeToFile</span><span class="hljs-params">(String content)</span>&#123;<br>        <span class="hljs-keyword">if</span> (writerHandler != <span class="hljs-literal">null</span>) &#123;<br>            writerHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteRunnable</span>(content));<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        String  content;<br><br>        WriteRunnable( String content) &#123;<br>            <span class="hljs-built_in">this</span>.content = content;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(logFileDir);<br>                <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">mk</span> <span class="hljs-operator">=</span> dir.mkdirs();<br>                    Log.d(TAG, <span class="hljs-string">&quot;make dir &quot;</span> + mk);<br>                &#125;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">eFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(logFileDir + File.separator + fileName);<br>                <span class="hljs-type">byte</span>[] strBytes = content.getBytes();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">randomAccessFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(eFile, <span class="hljs-string">&quot;rw&quot;</span>);<br>                    MappedByteBuffer mappedByteBuffer;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">inputLen</span> <span class="hljs-operator">=</span> strBytes.length;<br>                    <span class="hljs-keyword">if</span> (!eFile.exists()) &#123;<br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">nf</span> <span class="hljs-operator">=</span> eFile.createNewFile();<br>                        Log.d(TAG, <span class="hljs-string">&quot;new log file &quot;</span> + nf);<br>                        mappedByteBuffer = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_WRITE, gCurrentLogPos, LOG_FILE_GROW_SIZE);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        mappedByteBuffer = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_WRITE, gCurrentLogPos, inputLen);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (mappedByteBuffer.remaining() &lt; inputLen) &#123;<br>                        mappedByteBuffer = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_WRITE, gCurrentLogPos, LOG_FILE_GROW_SIZE + inputLen);<br>                    &#125;<br>                    mappedByteBuffer.put(strBytes);<br>                    gCurrentLogPos += inputLen;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    Log.e(TAG, <span class="hljs-string">&quot;WriteRunnable run: &quot;</span>, e);<br>                    <span class="hljs-keyword">if</span> (!eFile.exists()) &#123;<br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">nf</span> <span class="hljs-operator">=</span> eFile.createNewFile();<br>                        Log.d(TAG, <span class="hljs-string">&quot;new log file &quot;</span> + nf);<br>                    &#125;<br>                    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(eFile, <span class="hljs-literal">true</span>);<br>                    os.write(content.getBytes());<br>                    os.flush();<br>                    os.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                Log.e(TAG, <span class="hljs-string">&quot;写log文件出错: &quot;</span>, e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在搞Android应用大盘监控，目前需要监控的是慢网络请求及页面的打开和关闭。由于应用中使用的OkHttp进行网络请求，着重看了一下OkHttp源码，还有别人写的一些总结。对于页面的打开关闭行为，我们可以搞个BaseActivity或者在Application中注册生命周期回调就好了。问题在于慢网络监控需要实时上报，而用户行为监控则需要本地落盘保存，在需要的时候再上报，所以如何落盘保存则是一个问题，为此了解了java IO和mmap。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Sentry搭建及Android接入</title>
    <link href="https://blog.huangyuanlove.com/2021/05/22/Sentry%E6%90%AD%E5%BB%BA%E5%8F%8AAndroid%E6%8E%A5%E5%85%A5/"/>
    <id>https://blog.huangyuanlove.com/2021/05/22/Sentry%E6%90%AD%E5%BB%BA%E5%8F%8AAndroid%E6%8E%A5%E5%85%A5/</id>
    <published>2021-05-22T00:39:04.000Z</published>
    <updated>2024-04-01T02:18:11.657Z</updated>
    
    <content type="html"><![CDATA[<p>因为sentry可以私有化部署，相比起bugly，我们可以做跟多的单独定制功能，所以决定将需要即时上报的日志放在sentry上。</p><p>搭建环境：</p><ol><li>Ubuntu18.04 64位</li><li>sentry版本21.5.1</li></ol><p>环境要求：</p><ul><li>Docker 19.03.6+</li><li>Compose 1.24.1+</li><li>4 CPU Cores</li><li>8 GB RAM</li><li>20 GB Free Disk Space</li></ul><p>由于sentry需要使用redis、postgreSQL，所以选在了在新的虚拟机上进行部署</p><span id="more"></span><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><p>目前是在Ubuntu18.04上使用deb文件安装的。官方指导在这里<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><p>在 <a href="https://download.docker.com/linux/ubuntu/dists/">https://download.docker.com/linux/ubuntu/dists/</a> 这里选择一下自己ubuntu的系统对应的文件夹(也就是系统版本代号)，比如18.04对应<code>bionic</code>，然后进入<code>pool/stable</code>文件夹，选择对应的系统环境，比如ubuntu 18.04 64位，对应的地址应该是<code>https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/</code>,然后下载最新版本的软件，我现在下载的是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">containerd</span>.io_1.<span class="hljs-number">4</span>.<span class="hljs-number">4</span>-<span class="hljs-number">1</span>_amd64.deb <br><span class="hljs-attribute">docker</span>-ce-cli_20.<span class="hljs-number">10</span>.<span class="hljs-number">6</span>~<span class="hljs-number">3</span>-<span class="hljs-number">0</span>~ubuntu-bionic_amd64.deb <br><span class="hljs-attribute">docker</span>-ce_20.<span class="hljs-number">10</span>.<span class="hljs-number">6</span>~<span class="hljs-number">3</span>-<span class="hljs-number">0</span>~ubuntu-bionic_amd64.deb<br></code></pre></td></tr></table></figure><p>然后按照顺序安装，安装完成后确认是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run hello-world<br></code></pre></td></tr></table></figure><p>这条命令会下载测试镜像并运行，如果安装成功，则会在终端打印对应信息</p><p>如果上面的下载地址无法访问的话，可以使用国内的清华大学镜像源，地址是 <code>https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/dists/bionic/pool/stable/amd64/</code></p><h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h4><p>访问 <a href="https://github.com/docker/compose/releases/tag/1.29.2">https://github.com/docker/compose/releases/tag/1.29.2</a> 下载linux版本，文件名字改成<code>docker-compose</code>，添加执行权限，并复制到<code> /usr/local/bin/</code>文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv docker-compose-Linux-x86_64 docker-compose<br>chmox +x docker-compose<br>sudo cp docker-compose  /usr/local/bin/<br></code></pre></td></tr></table></figure><p>执行 <code>docker-compose -v</code>命令，能打印出版本信息证明安装程国平</p><h4 id="安装sentry"><a href="#安装sentry" class="headerlink" title="安装sentry"></a>安装sentry</h4><p>访问 <a href="https://github.com/getsentry/onpremise">https://github.com/getsentry/onpremise</a> 并克隆下来该仓库，仓库地址为：<code>git@github.com:getsentry/onpremise.git</code> 或者<code> https://github.com/getsentry/onpremise.git</code>,执行文件夹中的<code>install.sh</code>。过程会比较漫长，在这个过程中会让你创建sentry的用户，输入邮箱和密码。这个用户也就是你之后登陆sentry网页使用的账号密码。</p><p>安装过程中需要拉取docker镜像，众所周知的原因，有很大可能会失败，我们可以将docker的镜像源替换为国内的，比如中科大。ubuntu下替换方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/docker/daemon.json<br><span class="hljs-meta prompt_">#</span><span class="language-bash">文件内容</span><br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">保存后执行</span><br>systemctl restart docker.service<br></code></pre></td></tr></table></figure><h4 id="启动及使用"><a href="#启动及使用" class="headerlink" title="启动及使用"></a>启动及使用</h4><p>在上一步安装完成后的控制台会告诉你启动sentry服务的命令<code>docker-compose up -d</code>，</p><p>在浏览器中访问sentry服务器的ip:9000， 输入上一步创建的邮箱和密码就可以登录了。接下来可以跟着引导查看一下基本功能的使用。</p><p>现在我们创建一个Android应用，创建好了之后会有对应的引导提示如何在Android中使用sentry。</p><ol><li><p>添加仓库</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">repositories &#123;<br>  mavenCentral()<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-string">&#x27;io.sentry:sentry-android:4.3.0&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>在Androidmanifest.xml中添加应用信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;io.sentry.dsn&quot;</span> <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;http://b3a3844e753f4734b7ca1d6b154e6e06@192.168.102.181:9000/2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的value值可以在sentry项目设置中找到。</p></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.sentry.Breadcrumb;<br><span class="hljs-keyword">import</span> io.sentry.Sentry;<br><span class="hljs-keyword">import</span> io.sentry.SentryEvent;<br><span class="hljs-keyword">import</span> io.sentry.SentryLevel;<br><span class="hljs-keyword">import</span> io.sentry.protocol.Message;<br><span class="hljs-keyword">import</span> io.sentry.protocol.User;<br><br>Sentry.captureMessage(<span class="hljs-string">&quot;captureMessage INFO&quot;</span>, SentryLevel.INFO);<br>Sentry.captureException(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;exception&quot;</span>));<br>Sentry.captureEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SentryEvent</span>());<br><span class="hljs-comment">//设置全局用户信息</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setEmail(<span class="hljs-string">&quot;a@a.com&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>user.setId(userId);<br>Sentry.setUser(user);<br></code></pre></td></tr></table></figure></li></ol><h4 id="关于混淆"><a href="#关于混淆" class="headerlink" title="关于混淆"></a>关于混淆</h4><p>如果应用经过混淆，我们需要将mapping文件上传到sentry平台，才能定位到错误代码所在位置。</p><p>首先在<code>app/build.gradle</code>中添加plugin：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;io.sentry.android.gradle&#x27;</span><br></code></pre></td></tr></table></figure><p>然后在工程根目录下的<code>build.gradle</code>文件中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;io.sentry:sentry-android-gradle-plugin:1.7.36&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们还需要在项目根目录下添加一个<code>sentry.properties</code>文件，用来配置我们的mapping文件上传到哪个项目中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">defaults.project</span>=<span class="hljs-string">your-project</span><br><span class="hljs-attr">defaults.org</span>=<span class="hljs-string">your-org</span><br><span class="hljs-attr">auth.token</span>=<span class="hljs-string">YOUR_AUTH_TOKEN</span><br><span class="hljs-attr">defaults.url</span>=<span class="hljs-string">your sentry service address</span><br></code></pre></td></tr></table></figure><p>这里的org的值在<code>Organization Settings</code>中查看，是<code>Organization Slug</code>的值，而不是<code>Display Name</code>的值</p><p><img src="/image/sentry_upload_mapping.png" alt="sentry_upload_mapping"></p><p>token值在上图中的 <code>API keys</code>里面，没有的话创建一个新的就好，权限我是用的默认。</p><p>然后我们打个release包，上传成功后会在控制台打印出对应信息。我们可以在项目设置 <code>ProGuard</code>中找到上传的mapping文件。</p><p>如果不希望自动上传mapping，我们可以将其关闭，使用<code>sentry-cli</code>进行手动上传</p><p>在<code>app/build.gradle</code>中添加如下配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs groovy">sentry &#123;<br>    <span class="hljs-comment">// Disables or enables the automatic configuration of ProGuard</span><br>    <span class="hljs-comment">// for Sentry.  This injects a default config for ProGuard so</span><br>    <span class="hljs-comment">// you don&#x27;t need to do it manually.</span><br><br>    <span class="hljs-comment">// Only enable it if you are using sentry-android &lt;= v1.7,</span><br>    <span class="hljs-comment">// sentry-android &gt;= v2.0 already does it automatically.</span><br>    autoProguardConfig <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment">// Enables or disables the automatic upload of mapping files</span><br>    <span class="hljs-comment">// during a build.  If you disable this, you&#x27;ll need to manually</span><br>    <span class="hljs-comment">// upload the mapping files with sentry-cli when you do a release.</span><br>    autoUpload <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">// Disables or enables the automatic configuration of Native Symbols</span><br>    <span class="hljs-comment">// for Sentry. This executes sentry-cli automatically so</span><br>    <span class="hljs-comment">// you don&#x27;t need to do it manually.</span><br>    <span class="hljs-comment">// Default is disabled.</span><br>    uploadNativeSymbols <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment">// Does or doesn&#x27;t include the source code of native code for Sentry.</span><br>    <span class="hljs-comment">// This executes sentry-cli with the --include-sources param. automatically so</span><br>    <span class="hljs-comment">// you don&#x27;t need to do it manually.</span><br>    <span class="hljs-comment">// Default is disabled.</span><br>    includeNativeSources <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>sentry-cli的安装在这里 <a href="https://docs.sentry.io/product/cli/installation/">https://docs.sentry.io/product/cli/installation/</a></p><p>sentry-cli的配置 <a href="https://docs.sentry.io/product/cli/configuration/">https://docs.sentry.io/product/cli/configuration/</a></p><p>sentry-cli 的使用 <a href="https://docs.sentry.io/product/cli/dif/#proguard-mapping-upload">https://docs.sentry.io/product/cli/dif/#proguard-mapping-upload</a></p><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为sentry可以私有化部署，相比起bugly，我们可以做跟多的单独定制功能，所以决定将需要即时上报的日志放在sentry上。&lt;/p&gt;
&lt;p&gt;搭建环境：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ubuntu18.04 64位&lt;/li&gt;
&lt;li&gt;sentry版本21.5.1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;环境要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 19.03.6+&lt;/li&gt;
&lt;li&gt;Compose 1.24.1+&lt;/li&gt;
&lt;li&gt;4 CPU Cores&lt;/li&gt;
&lt;li&gt;8 GB RAM&lt;/li&gt;
&lt;li&gt;20 GB Free Disk Space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于sentry需要使用redis、postgreSQL，所以选在了在新的虚拟机上进行部署&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
    <category term="运维" scheme="https://blog.huangyuanlove.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="linux" scheme="https://blog.huangyuanlove.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Android中的单元测试</title>
    <link href="https://blog.huangyuanlove.com/2021/04/25/Android%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.huangyuanlove.com/2021/04/25/Android%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2021-04-25T02:18:51.000Z</published>
    <updated>2023-05-19T12:51:02.211Z</updated>
    
    <content type="html"><![CDATA[<h4 id="纯java代码的单元测试"><a href="#纯java代码的单元测试" class="headerlink" title="纯java代码的单元测试"></a>纯java代码的单元测试</h4><p>这里的纯java代码指的是不包含Android包中的代码，我们使用Junit写单元测试即可。</p><p>比如我们有一个方法是用来格式化数字，返回保留两位小数后的字符串，方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">numberFormat</span><span class="hljs-params">(<span class="hljs-type">double</span> number)</span>&#123;<br>  <span class="hljs-keyword">return</span> String.format(Locale.getDefault(),<span class="hljs-string">&quot;%.2f&quot;</span>,number);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们的单元测试可以这么写，依赖一下junit测试框架<code>testImplementation &#39;junit:junit:4.+&#39;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleUnitTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNumberFormat</span><span class="hljs-params">()</span>&#123;<br>        assertEquals(<span class="hljs-string">&quot;0.23&quot;</span>,Util.numberFormat(<span class="hljs-number">0.232323</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><p>这里说明一下，我们在写单元测试的时候，经常会需要初始化一些数据，但我们又不想在每个测试方法中都调用一遍初始化的方法，这里测试框架给出了四个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@BeforeClass</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><span class="hljs-meta">@After</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><span class="hljs-meta">@AfterClass</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@BeforeClass:只会执行一次，修饰的方法必须是静态的</li><li>@AfterClass：只会执行一次，修饰的方法必须是静态的</li><li>@Before：每次调用测试方法时都会执行一次</li><li>@After：每次测试方法执行完成后都会执行一次</li></ul><h4 id="代码中包含Android代码"><a href="#代码中包含Android代码" class="headerlink" title="代码中包含Android代码"></a>代码中包含Android代码</h4><p>但是，假如我们的代码中不小心”混入”了一些调用Android包的功能，比如验证邮箱的有效性，代码可能是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.util.Patterns;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmailAddress</span><span class="hljs-params">(String address)</span>&#123;<br>  <span class="hljs-keyword">return</span> Patterns.EMAIL_ADDRESS.matcher(address).matches();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里导入了 android.util包，如果使用junit的话，在单元测试代码中会报一个空指针异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmailAddress</span><span class="hljs-params">()</span>&#123;<br>  Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;gg@gg.com&quot;</span>));<br>  Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;huangyuan@chunyu.me&quot;</span>));<br>  Assert.assertFalse(Util.isEmailAddress(<span class="hljs-string">&quot;wwww&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs verilog">java<span class="hljs-variable">.lang</span><span class="hljs-variable">.NullPointerException</span><br>at com<span class="hljs-variable">.huangyuanlove</span><span class="hljs-variable">.tdd_demo</span><span class="hljs-variable">.Util</span><span class="hljs-variable">.isEmailAddress</span>(Util<span class="hljs-variable">.java</span>:<span class="hljs-number">15</span>)<br>at com<span class="hljs-variable">.huangyuanlove</span><span class="hljs-variable">.tdd_demo</span><span class="hljs-variable">.ExampleUnitTest</span><span class="hljs-variable">.testEmailAddress</span>(ExampleUnitTest<span class="hljs-variable">.java</span>:<span class="hljs-number">27</span>)<br>at sun<span class="hljs-variable">.reflect</span><span class="hljs-variable">.NativeMethodAccessorImpl</span><span class="hljs-variable">.invoke0</span>(Native Method)<br>at sun<span class="hljs-variable">.reflect</span><span class="hljs-variable">.NativeMethodAccessorImpl</span><span class="hljs-variable">.invoke</span>(NativeMethodAccessorImpl<span class="hljs-variable">.java</span>:<span class="hljs-number">62</span>)<br>at sun<span class="hljs-variable">.reflect</span><span class="hljs-variable">.DelegatingMethodAccessorImpl</span><span class="hljs-variable">.invoke</span>(DelegatingMethodAccessorImpl<span class="hljs-variable">.java</span>:<span class="hljs-number">43</span>)<br>at java<span class="hljs-variable">.lang</span><span class="hljs-variable">.reflect</span><span class="hljs-variable">.Method</span><span class="hljs-variable">.invoke</span>(Method<span class="hljs-variable">.java</span>:<span class="hljs-number">498</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.model</span><span class="hljs-variable">.FrameworkMethod</span>$<span class="hljs-number">1</span><span class="hljs-variable">.runReflectiveCall</span>(FrameworkMethod<span class="hljs-variable">.java</span>:<span class="hljs-number">59</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.internal</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.model</span><span class="hljs-variable">.ReflectiveCallable</span><span class="hljs-variable">.run</span>(ReflectiveCallable<span class="hljs-variable">.java</span>:<span class="hljs-number">12</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.model</span><span class="hljs-variable">.FrameworkMethod</span><span class="hljs-variable">.invokeExplosively</span>(FrameworkMethod<span class="hljs-variable">.java</span>:<span class="hljs-number">56</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.internal</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.statements</span><span class="hljs-variable">.InvokeMethod</span><span class="hljs-variable">.evaluate</span>(InvokeMethod<span class="hljs-variable">.java</span>:<span class="hljs-number">17</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">3</span><span class="hljs-variable">.evaluate</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">306</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.BlockJUnit4ClassRunner</span>$<span class="hljs-number">1</span><span class="hljs-variable">.evaluate</span>(BlockJUnit4ClassRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">100</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span><span class="hljs-variable">.runLeaf</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">366</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.BlockJUnit4ClassRunner</span><span class="hljs-variable">.runChild</span>(BlockJUnit4ClassRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">103</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.BlockJUnit4ClassRunner</span><span class="hljs-variable">.runChild</span>(BlockJUnit4ClassRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">63</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">4</span><span class="hljs-variable">.run</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">331</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">1</span><span class="hljs-variable">.schedule</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">79</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span><span class="hljs-variable">.runChildren</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">329</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span><span class="hljs-variable">.access</span>$<span class="hljs-number">100</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">66</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">2</span><span class="hljs-variable">.evaluate</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">293</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">3</span><span class="hljs-variable">.evaluate</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">306</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span><span class="hljs-variable">.run</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">413</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runner</span><span class="hljs-variable">.JUnitCore</span><span class="hljs-variable">.run</span>(JUnitCore<span class="hljs-variable">.java</span>:<span class="hljs-number">137</span>)<br>at com<span class="hljs-variable">.intellij</span><span class="hljs-variable">.junit4</span><span class="hljs-variable">.JUnit4IdeaTestRunner</span><span class="hljs-variable">.startRunnerWithArgs</span>(JUnit4IdeaTestRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">68</span>)<br>at com<span class="hljs-variable">.intellij</span><span class="hljs-variable">.rt</span><span class="hljs-variable">.junit</span><span class="hljs-variable">.IdeaTestRunner</span>$Repeater<span class="hljs-variable">.startRunnerWithArgs</span>(IdeaTestRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">33</span>)<br>at com<span class="hljs-variable">.intellij</span><span class="hljs-variable">.rt</span><span class="hljs-variable">.junit</span><span class="hljs-variable">.JUnitStarter</span><span class="hljs-variable">.prepareStreamsAndStart</span>(JUnitStarter<span class="hljs-variable">.java</span>:<span class="hljs-number">230</span>)<br>at com<span class="hljs-variable">.intellij</span><span class="hljs-variable">.rt</span><span class="hljs-variable">.junit</span><span class="hljs-variable">.JUnitStarter</span><span class="hljs-variable">.main</span>(JUnitStarter<span class="hljs-variable">.java</span>:<span class="hljs-number">58</span>)<br></code></pre></td></tr></table></figure><p>因为我们的junit是跑在jvm上的，默认并没有加载android的包，这时候我们可以使用<a href="http://robolectric.org/">Robolectric</a>这个三方包来做测试。在gradle中添加一下依赖<code>testImplementation &#39;org.robolectric:robolectric:4.2&#39;</code>,<strong>别问为啥不用4.4,因为我还没整明白，Shadows方法不能用</strong></p><p>在我们的单元测试类上加下注解，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(RobolectricTestRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UtilTestWithRobolectric</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmailAddress</span><span class="hljs-params">()</span>&#123;<br>        Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;gg@gg.com&quot;</span>));<br>        Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;huangyuan@chunyu.me&quot;</span>));<br>        Assert.assertFalse(Util.isEmailAddress(<span class="hljs-string">&quot;wwww&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了这个，我们还可以使用Robolectric来测试一些页面行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.test.core.app.ActivityScenario;<br><span class="hljs-keyword">import</span> androidx.test.core.app.ApplicationProvider;<br><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.robolectric.RobolectricTestRunner;<br><span class="hljs-keyword">import</span> org.robolectric.Shadows;<br><span class="hljs-keyword">import</span> org.robolectric.shadows.ShadowAlertDialog;<br><span class="hljs-keyword">import</span> org.robolectric.shadows.ShadowToast;<br><span class="hljs-meta">@RunWith(RobolectricTestRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UtilTestWithRobolectric</span> &#123;<br>    <span class="hljs-keyword">private</span> ActivityScenario&lt;MainActivity&gt; scenario;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initScenario</span><span class="hljs-params">()</span>&#123;<br>         scenario = ActivityScenario.launch(MainActivity.class);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testScenario</span><span class="hljs-params">()</span>&#123;<br>        Assert.assertNotNull(scenario);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmailAddress</span><span class="hljs-params">()</span>&#123;<br>        Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;gg@gg.com&quot;</span>));<br>        Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;huangyuan@chunyu.me&quot;</span>));<br>        Assert.assertFalse(Util.isEmailAddress(<span class="hljs-string">&quot;wwww&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//是否弹出toast</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testShowToast</span><span class="hljs-params">()</span>&#123;<br>        scenario.onActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityScenario</span>.ActivityAction&lt;MainActivity&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">perform</span><span class="hljs-params">(MainActivity activity)</span> &#123;<br>                <span class="hljs-type">Toast</span> <span class="hljs-variable">toast</span> <span class="hljs-operator">=</span> ShadowToast.getLatestToast();<br>                Assert.assertNull(toast);<br><br>                activity.findViewById(R.id.show_toast).performClick();<br>                toast = ShadowToast.getLatestToast();<br>                Assert.assertNotNull(toast);<br><br>                <span class="hljs-type">ShadowToast</span> <span class="hljs-variable">shadowToast</span> <span class="hljs-operator">=</span> Shadows.shadowOf(toast);<br>                Assert.assertEquals(<span class="hljs-string">&quot;show_toast&quot;</span>,ShadowToast.getTextOfLatestToast());<br>                Assert.assertEquals(Toast.LENGTH_SHORT,toast.getDuration());<br><br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>  <span class="hljs-comment">//是否展示Dialog</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testShowDialog</span><span class="hljs-params">()</span>&#123;<br>        scenario.onActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityScenario</span>.ActivityAction&lt;MainActivity&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">perform</span><span class="hljs-params">(MainActivity activity)</span> &#123;<br>                <span class="hljs-type">AlertDialog</span> <span class="hljs-variable">dialog</span> <span class="hljs-operator">=</span> ShadowAlertDialog.getLatestAlertDialog();<br>                Assert.assertNull(dialog);<br>                activity.findViewById(R.id.show_toast).performClick();<br><br>                dialog = ShadowAlertDialog.getLatestAlertDialog();<br>                Assert.assertNotNull(dialog);<br><br>                <span class="hljs-type">ShadowAlertDialog</span> <span class="hljs-variable">shadowDialog</span> <span class="hljs-operator">=</span> Shadows.shadowOf(dialog);<br>                Assert.assertEquals(<span class="hljs-string">&quot;Hello！&quot;</span>, shadowDialog.getMessage());<br><br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>  <span class="hljs-comment">//是否跳转到了指定页面</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGoToLogin</span><span class="hljs-params">()</span>&#123;<br><br>        scenario.onActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityScenario</span>.ActivityAction&lt;MainActivity&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">perform</span><span class="hljs-params">(MainActivity activity)</span> &#123;<br>                activity.findViewById(R.id.login).performClick();<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">expectedIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(activity, LoginActivity.class);<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">actual</span> <span class="hljs-operator">=</span> Shadows.shadowOf(activity).getNextStartedActivity();<br>                Assert.assertEquals(expectedIntent.getComponent(),actual.getComponent());<br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里的<code>ActivityScenario</code>是使用的 androidx.test.core.app包下的类，需要依赖<code>testImplementation &#39;androidx.test:core:1.1.0&#39;</code></p><p>当然在<code>Robolectric</code>中也有对应的创建Activity的方法，不过在4.4版本中被废弃了，也推荐使用androidx.test包中创建Activity的方法。</p><h4 id="Mock和Mockito"><a href="#Mock和Mockito" class="headerlink" title="Mock和Mockito"></a>Mock和Mockito</h4><p>如何测试一个没有返回值的方法，一般是来看这个方法有没有得到调用。<br>假如我们有如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginPresenter</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserManager</span><span class="hljs-params">(UserManager userManager)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userManager = userManager;<br>    &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String userName,String password)</span>&#123;<br>        userManager.performLogin(userName,password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们要验证<code>mUserManager</code>的一些行为，首先要 mock UserManager 这个类，mock 这个类的方式是：<br><code>Mockito.mock(UserManager.class);</code><br>mock 了<code>UserManager</code>类之后，我们就可以开始测试了,验证一个对象的方法调用情况的方法是：<br><code>Mockito.verify(objectToVerify).methodToVerify(arguments);</code><br>其中，<code>objectToVerify</code>和<code>methodToVerify</code>分别是你想要验证的对象和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogin</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">UserManager</span> <span class="hljs-variable">userManager</span> <span class="hljs-operator">=</span> Mockito.mock(UserManager.class);<br>  <span class="hljs-type">LoginPresenter</span> <span class="hljs-variable">loginPresenter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginPresenter</span>();<br>  loginPresenter.setUserManager(userManager);<br>  loginPresenter.login(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>  Mockito.verify(userManager).performLogin(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再假如我们在登录的时候需要先验证密码强度，但是我们测试的时候不关心这个验证逻辑，希望不管传入的密码是啥，都可以通过验证。我们就需要干预某些mock对象的方法行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginWithVerifyPassword</span><span class="hljs-params">(PasswordValidator passwordValidator, String userName,String password)</span>&#123;<br>  <span class="hljs-keyword">if</span>(passwordValidator.verifyPassword(password))&#123;<br>    userManager.performLogin(userName,password);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;密码不正确&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordValidator</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verifyPassword</span><span class="hljs-params">(String password)</span>&#123;<br>    <span class="hljs-keyword">return</span> password != <span class="hljs-literal">null</span> &amp;&amp; password.length() &gt;<span class="hljs-number">5</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要mock一下PasswordValidator这个类中verifyPassword的行为,这种指定 mock 对象的某个方法，让它返回特定值的写法如下：<br><code>Mockito.when(mockObject.targetMethod(args)).thenReturn(desiredReturnValue);</code>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLoginWithPasswordValidator</span><span class="hljs-params">()</span> &#123;<br>  LoginPresenter.<span class="hljs-type">PasswordValidator</span> <span class="hljs-variable">passwordValidator</span> <span class="hljs-operator">=</span> Mockito.mock(LoginPresenter.PasswordValidator.class);<br>  <span class="hljs-comment">//验证方法行为是否被改变</span><br>  Mockito.when(passwordValidator.verifyPassword(ArgumentMatchers.any())).thenReturn(<span class="hljs-literal">true</span>);<br>  Assert.assertTrue(passwordValidator.verifyPassword(<span class="hljs-string">&quot;&quot;</span>));<br>  Assert.assertTrue(passwordValidator.verifyPassword(<span class="hljs-literal">null</span>));<br>  Assert.assertTrue(passwordValidator.verifyPassword(<span class="hljs-string">&quot;123&quot;</span>));<br>  Assert.assertTrue(passwordValidator.verifyPassword(<span class="hljs-string">&quot;321321321&quot;</span>));<br><br>  <span class="hljs-comment">//验证登录方法是否被调用</span><br>  <span class="hljs-type">UserManager</span> <span class="hljs-variable">userManager</span> <span class="hljs-operator">=</span> Mockito.mock(UserManager.class);<br>  <span class="hljs-type">LoginPresenter</span> <span class="hljs-variable">loginPresenter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginPresenter</span>();<br>  loginPresenter.setUserManager(userManager);<br>  loginPresenter.loginWithVerifyPassword(passwordValidator, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>  Mockito.verify(userManager).performLogin(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Androidx-test"><a href="#Androidx-test" class="headerlink" title="Androidx.test"></a>Androidx.test</h4><p>最近在看Androidx包下的测试框架，对于我们来讲，单元测试不是很多，测试代码跑在模拟器或者真机上带来的时间消耗还是可以接受的。有时间撸一下对应的代码</p><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;纯java代码的单元测试&quot;&gt;&lt;a href=&quot;#纯java代码的单元测试&quot; class=&quot;headerlink&quot; title=&quot;纯java代码的单元测试&quot;&gt;&lt;/a&gt;纯java代码的单元测试&lt;/h4&gt;&lt;p&gt;这里的纯java代码指的是不包含Android包中的代码，我们使用Junit写单元测试即可。&lt;/p&gt;
&lt;p&gt;比如我们有一个方法是用来格式化数字，返回保留两位小数后的字符串，方法如下&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;numberFormat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; number)&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; String.format(Locale.getDefault(),&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%.2f&amp;quot;&lt;/span&gt;,number);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么我们的单元测试可以这么写，依赖一下junit测试框架&lt;code&gt;testImplementation &amp;#39;junit:junit:4.+&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; org.junit.Assert.*;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ExampleUnitTest&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testNumberFormat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;0.23&amp;quot;&lt;/span&gt;,Util.numberFormat(&lt;span class=&quot;hljs-number&quot;&gt;0.232323&lt;/span&gt;));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
</feed>
