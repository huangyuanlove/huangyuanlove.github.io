<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>放码过来</title>
  <icon>https://www.gravatar.com/avatar/771a5b96a1b55228dbb1eeb23619ef45</icon>
  <subtitle>技术宅 huangyuan@huangyuanlove.com</subtitle>
  <link href="https://blog.huangyuanlove.com/atom.xml" rel="self"/>
  
  <link href="https://blog.huangyuanlove.com/"/>
  <updated>2025-06-16T07:09:50.976Z</updated>
  <id>https://blog.huangyuanlove.com/</id>
  
  <author>
    <name>HuangYuan_xuan</name>
    <email>huangyuan@huangyuanlove.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>仓颉-认识仓颉语言</title>
    <link href="https://blog.huangyuanlove.com/2025/06/14/%E4%BB%93%E9%A2%89-%E8%AE%A4%E8%AF%86%E4%BB%93%E9%A2%89%E8%AF%AD%E8%A8%80/"/>
    <id>https://blog.huangyuanlove.com/2025/06/14/%E4%BB%93%E9%A2%89-%E8%AE%A4%E8%AF%86%E4%BB%93%E9%A2%89%E8%AF%AD%E8%A8%80/</id>
    <published>2025-06-14T01:49:16.000Z</published>
    <updated>2025-06-16T07:09:50.976Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在群里看到消息<code>HarmonyOS NEXT Cangjie正式版本测试活动</code>正在招募，作为已经参加仓颉鸿蒙测试版内测快两年的不会仓颉语言的开发人员，当然要参与一波了。<br>不过可惜的是这次是小范围招募，问卷链接也不让转发<br><img src="/image/cangjie/%E4%BB%93%E9%A2%89-%E9%B8%BF%E8%92%99%E6%AD%A3%E5%BC%8F%E7%89%88%E6%8B%9B%E5%8B%9F.png" alt="仓颉-鸿蒙正式版招募"><br>既然已经开始正式版测试活动了，想来距离正式发布也不远了，内测了快两年的仓颉新手开发，现在也应该开始学一下仓颉了。</p><blockquote><p>Q:为啥之前没有学习仓颉？<br>A:之前在做鸿蒙项目的时候，一直在用ArkTS，仓颉一直在beta版本，我们也没有在项目中使用。所以就没有去学习。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>现在官网能下载到的版本是 0.53.18，社区测试版本是0.60.5，并没有太大的差异。<br>另外仓颉相关的官方代码代码仓库已经迁移到了gitcode：<a href="https://gitcode.com/Cangjie%E3%80%82">https://gitcode.com/Cangjie。</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天在群里看到消息&lt;code&gt;HarmonyOS NEXT Cangjie正式版本测试活动&lt;/code&gt;正在招募，作为已经参加仓颉鸿蒙测试版内测快两年的不会仓颉语言的开发人员，当然要参与一波了。&lt;br&gt;不过可惜的是这次是小范围招募，问卷链接也不让转发&lt;br&gt;&lt;img src</summary>
      
    
    
    
    
    <category term="仓颉" scheme="https://blog.huangyuanlove.com/tags/%E4%BB%93%E9%A2%89/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-仓颉环境搭建和 HelloWorld</title>
    <link href="https://blog.huangyuanlove.com/2025/06/13/%E9%B8%BF%E8%92%99-%E4%BB%93%E9%A2%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C-HelloWorld/"/>
    <id>https://blog.huangyuanlove.com/2025/06/13/%E9%B8%BF%E8%92%99-%E4%BB%93%E9%A2%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C-HelloWorld/</id>
    <published>2025-06-13T03:13:16.000Z</published>
    <updated>2025-06-16T09:20:40.640Z</updated>
    
    <content type="html"><![CDATA[<p>虽然HarmonyOS NEXT Cangjie正式版本测试活动开始小范围招募了，报名链接还不太想让大范围转发，这里就不放了。<br><img src="/image/cangjie/%E4%BB%93%E9%A2%89-%E9%B8%BF%E8%92%99%E6%AD%A3%E5%BC%8F%E7%89%88%E6%8B%9B%E5%8B%9F.png" alt="仓颉-鸿蒙正式版招募"><br><img src="/image/cangjie/HarmonyOS_NEXT_Cangjie%E6%AD%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%B5%8B%E8%AF%95%E6%B4%BB%E5%8A%A8.png" alt="HarmonyOS_NEXT_Cangjie正式版本测试活动.png"><br>但公测版还是申请审核制度。我们可以在仓颉官网上找到<a href="https://developer.huawei.com/consumer/cn/activityDetail/cangjie-beta/">公测版报名链接</a>,审核挺快的，一两天就通过了。<br>但最近他们可能在忙 hdc 活动，审核可能会慢些。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官方下载页面：<a href="https://developer.huawei.com/consumer/cn/download/">https://developer.huawei.com/consumer/cn/download/</a><br>注意：公测版申请不通过的话，是看到不插件的。<br><img src="/image/cangjie/Harmony_next_cangjie_beta.png" alt="Harmony_next_cangjie_beta">  </p><p>建议使用最新稳定版本的DevEco，目前是 <code>DevEco Studio 5.1.0 Release</code>,版本号是<code>Build Version 5.1.0.828</code>。<br>最新的插件版本为：<code>DevEco Studio-Cangjie Plugin 5.0.13.200 Canary</code></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先安装 DevEco，安装完成后我们打开软件，点击左侧的<code>Customize</code>,右侧最下方点击<code>All settings</code><br><img src="/image/cangjie/%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E8%AE%BE%E7%BD%AE.png" alt="找到所有设置"><br>在新的窗口左侧找到<code>Plugins</code>,右侧点击齿轮，在弹出的菜单中选择<code>Install from Disk</code><br><img src="/image/cangjie/%E5%AE%89%E8%A3%85%E4%BB%93%E9%A2%89%E6%8F%92%E4%BB%B6.png" alt="安装仓颉插件"><br>选择我们刚才下载的插件压缩包，安装完成后需要重启一下DevEco</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>安装仓颉插件后，需要重新启动 DevEco Studio。初始化工程时，会自动配置仓颉 SDK，仓颉 SDK 存放的路径在 macOS 系统下默认为 $HOME&#x2F;.cangjie-sdk，Windows 下默认为 %USERPROFILE%&#x2F;.cangjie-sdk。如需指定 .cangjie-sdk 的存放路径，请在安装插件前配置系统环境变量，变量名为 DEVECO_CANGJIE_PATH，变量值为要存放的路径。<br>配置系统环境变量后，请重启 DevEco Studio，使环境变量生效。</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>现在我们打开 DevEco，创建一个新的工程，选择[Cangjie]Empty Ability。输入项目名称、应用包名等信息后点击 finish 就可以了。有一点不同的是，目前 cangjie 只支持 phone 这个选项。<br><img src="/image/cangjie/create_cangjie_harmony_project.png" alt="create_cangjie_harmony_project">。<br>等待项目同步完成后，我们就可以进行开发了。</p><h2 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h2><p><img src="/image/cangjie/%E9%B8%BF%E8%92%99%E4%BB%93%E9%A2%89%E7%9B%AE%E5%BD%95.png" alt="鸿蒙仓颉目录"><br>我们可以看到鸿蒙仓颉目录和 ArkTS 工程的目录几乎是相同的，降低了我们上手开发的难度。</p><h2 id="编译构建"><a href="#编译构建" class="headerlink" title="编译构建"></a>编译构建</h2><p>和使用<code>ArkTS</code>一样，我们同样需要对应用进行签名，之后才可以编译运行。<br>这里需要注意的是仓颉工程默认编译架构为arm64-v8a，因此在使用x86模拟器时,需要编译出x86_64版本的so。<br>我们需要在仓颉模块的<code>build-profile.json5</code>配置文件中，为<code>cangjieOptions.abiFilters</code>的值增加<strong>x86_64</strong>，具体编译配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;buildOption&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>      <span class="hljs-comment">// 配置项目在构建过程中使用的相关配置</span><br>  <span class="hljs-attr">&quot;cangjieOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 仓颉相关配置</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./src/main/cangjie/cjpm.toml&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// cjpm配置文件路径，提供仓颉构建配置</span><br>    <span class="hljs-attr">&quot;abiFilters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;arm64-v8a&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;x86_64&quot;</span><span class="hljs-punctuation">]</span>   <span class="hljs-comment">// 自定义仓颉编译架构，默认编译架构为arm64-v8a</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>之后我们就可以编译运行了。<br><img src="/image/cangjie/harmony_cangjie_demo.png" alt="仓颉鸿蒙应用"></p><h2 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h2><p>我们做个最简单的页面跳转看看<br>先创建一个新的文件:<code>second_page.cj</code>,然后简单写一下页面布局</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package ohos_app_cangjie_entry<br><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">base</span>.<span class="hljs-property">LengthProp</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Column</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Row</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Button</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Text</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">CustomView</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">CJEntry</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">loadNativeView</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_manage</span>.<span class="hljs-property">SubscriberManager</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_manage</span>.<span class="hljs-property">ObservedProperty</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_manage</span>.<span class="hljs-property">LocalStorage</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_macro_manage</span>.<span class="hljs-property">Entry</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_macro_manage</span>.<span class="hljs-property">Component</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_macro_manage</span>.<span class="hljs-property">State</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_macro_manage</span>.<span class="hljs-property">r</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">hiappevent</span>.<span class="hljs-property">Event</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">router</span>.<span class="hljs-property">Router</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Alignment</span><br><br><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondPage</span> &#123;<br>    <span class="hljs-meta">@State</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-attr">message</span>: <span class="hljs-title class_">String</span> = <span class="hljs-string">&quot;Second Page&quot;</span><br>    func <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Column</span> &#123;<br>            <span class="hljs-title class_">Button</span>(message).<span class="hljs-property">onClick</span> &#123;<br>                <span class="hljs-function"><span class="hljs-params">evt</span> =&gt;</span> <span class="hljs-title class_">AppLog</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;Second Page&quot;</span>)<br>            &#125;.<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">40</span>).<span class="hljs-title function_">height</span>(<span class="hljs-number">80</span>)<br><br>            <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;返回上个页面&quot;</span>).<span class="hljs-title function_">onClick</span>(&#123;<br>                <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> <span class="hljs-title class_">Router</span>.<span class="hljs-title function_">back</span>()<br>            &#125;)<br>        &#125;.<span class="hljs-title function_">width</span>(<span class="hljs-number">100.</span>percent).<span class="hljs-title function_">align</span>(<span class="hljs-title class_">Alignment</span>.<span class="hljs-property">Start</span>)<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>然后我们在第一个页面<code>index.cj</code>中添加一下跳转</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package ohos_app_cangjie_entry<br><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">base</span>.<span class="hljs-property">LengthProp</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Column</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Row</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Button</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Text</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">CustomView</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">CJEntry</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">loadNativeView</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_manage</span>.<span class="hljs-property">SubscriberManager</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_manage</span>.<span class="hljs-property">ObservedProperty</span><br>internal <span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_manage</span>.<span class="hljs-property">LocalStorage</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_macro_manage</span>.<span class="hljs-property">Entry</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_macro_manage</span>.<span class="hljs-property">Component</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_macro_manage</span>.<span class="hljs-property">State</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">state_macro_manage</span>.<span class="hljs-property">r</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">hiappevent</span>.<span class="hljs-property">Event</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">router</span>.<span class="hljs-property">Router</span><br><span class="hljs-keyword">import</span> ohos.<span class="hljs-property">component</span>.<span class="hljs-property">Alignment</span><br><br><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EntryView</span> &#123;<br>    <span class="hljs-meta">@State</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-attr">message</span>: <span class="hljs-title class_">String</span> = <span class="hljs-string">&quot;Hello Cangjie&quot;</span><br>    func <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">Column</span> &#123;<br>            <span class="hljs-title class_">Button</span>(message).<span class="hljs-property">onClick</span> &#123;<br>                <span class="hljs-function"><span class="hljs-params">evt</span> =&gt;</span> <span class="hljs-title class_">AppLog</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;Hello Cangjie&quot;</span>)<br>            &#125;.<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">40</span>).<span class="hljs-title function_">height</span>(<span class="hljs-number">80</span>)<br><br>            <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;跳转到下个页面&quot;</span>).<span class="hljs-title function_">onClick</span>(<br>                &#123;<br>                    <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span><br>                    <span class="hljs-title class_">AppLog</span>.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;点击了跳转到下个页面&quot;</span>)<br>                    <span class="hljs-title class_">Router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-attr">url</span>: <span class="hljs-string">&quot;SecondPage&quot;</span>, <span class="hljs-attr">params</span>: <span class="hljs-string">&quot;123456789&quot;</span>)<br>                &#125;<br>            )<br>        &#125;.<span class="hljs-title function_">width</span>(<span class="hljs-number">100.</span>percent).<span class="hljs-title function_">align</span>(<span class="hljs-title class_">Alignment</span>.<span class="hljs-property">Start</span>)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们看下效果：<br><img src="/image/cangjie/cangjie_harmony_demo_router.gif" alt="页面跳转"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>说点题外话：<br>一开始我还很纳闷，应用启动的时候是如何识别第一个需要加载的页面的。 直到我看完教程，发现使用 Router 跳转时是直接写死的目标页面的<code>class name</code>，回去看了一下<code>MainAbility</code>代码，发现是在<code>onWindowStageCreate</code>这个方法中调用了<code>windowStage.loadContent(&quot;EntryView&quot;)</code>，直接加载了<code>index.cj</code>中的<code>class name</code>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>官网上貌似没有直达的链接：</p><p><a href="https://developer.huawei.com/consumer/cn/doc/cangjie-guides-V5/cj-first-cangjie-app-V5">快速入门</a><br><a href="https://developer.huawei.com/consumer/cn/doc/cangjie-references-V5/_u4ed3_u9889api-V5">仓颉 API</a><br><a href="https://developer.huawei.com/consumer/cn/doc/cangjie-references-V5/_u4ed3_u9889_u7ec4_u4ef6-V5">仓颉组件</a>  </p><p>仓颉语言更新或者鸿蒙版本更新时，上面的链接可能会失效，我们可以在<a href="https://gitcode.com/Cangjie">gitcode Cangjie</a>项目中的鸿蒙版本介绍中获取最新的链接。</p><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>大部分调用的 api 看不到源码，写起来就很难受，有的是因为 api 不熟悉，不知道该传什么类型的参数。<br>有的是报错找不到对应的解决方案<br>有时候报错、页面不是预期效果、运行起来和官网示例效果不一样等等，有可能不是我们的问题，<br>现在有好多 issue 没有关闭，还在优化中，<br><a href="https://gitcode.com/Cangjie/CangjieMoBileUsersForm/issues">https://gitcode.com/Cangjie/CangjieMoBileUsersForm</a>，同样的，访问这个页面也需要权限。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽然HarmonyOS NEXT Cangjie正式版本测试活动开始小范围招募了，报名链接还不太想让大范围转发，这里就不放了。&lt;br&gt;&lt;img src=&quot;/image/cangjie/%E4%BB%93%E9%A2%89-%E9%B8%BF%E8%92%99%E6%AD%A</summary>
      
    
    
    
    
    <category term="仓颉" scheme="https://blog.huangyuanlove.com/tags/%E4%BB%93%E9%A2%89/"/>
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-flutter-使用PlatformView</title>
    <link href="https://blog.huangyuanlove.com/2025/06/10/%E9%B8%BF%E8%92%99-flutter-%E4%BD%BF%E7%94%A8PlatformView/"/>
    <id>https://blog.huangyuanlove.com/2025/06/10/%E9%B8%BF%E8%92%99-flutter-%E4%BD%BF%E7%94%A8PlatformView/</id>
    <published>2025-06-10T08:14:54.000Z</published>
    <updated>2025-06-16T07:09:50.985Z</updated>
    
    <content type="html"><![CDATA[<p>我们自己的业务比较简单，基本上没有使用PlatformView，所有的页面要么是原生，要么是flutter，没有这种在flutter页面上展示原生控件的需求。<br>这里介绍一下如何在纯flutter项目中使用platformView展示鸿蒙组件。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>按照之前的环境搭建和第一个helloworld，搭建好环境，运行起来。</p><h2 id="原生侧"><a href="#原生侧" class="headerlink" title="原生侧"></a>原生侧</h2><p>使用DevEco打开项目工程下的ohos文件夹，DevEco会将该文件夹识别为一个鸿蒙项目，可以获得完整的代码提示和语法高亮。<br>我们先从底层向接口方向编写代码。</p><h3 id="需要展示的View"><a href="#需要展示的View" class="headerlink" title="需要展示的View"></a>需要展示的View</h3><p>定义一个用来在Flutter上展示的 Component。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CustomView</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./CustomView&quot;</span> <span class="hljs-comment">//这里的CustomView是我们后面需要继承PlatformView的类</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Params</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/platform/PlatformView&#x27;</span>;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">export</span> struct <span class="hljs-title class_">ButtonComponent</span> &#123;<br>  <span class="hljs-meta">@Prop</span> <span class="hljs-attr">params</span>: <span class="hljs-title class_">Params</span><br>  <span class="hljs-attr">customView</span>: <span class="hljs-title class_">CustomView</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">params</span>.<span class="hljs-property">platformView</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">CustomView</span><br>  <span class="hljs-meta">@StorageLink</span>(<span class="hljs-string">&#x27;numValue&#x27;</span>) <span class="hljs-attr">storageLink</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;first&quot;</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">bkColor</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span><br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;发送数据给Flutter&quot;</span>)<br>        .<span class="hljs-title function_">border</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">color</span>: <span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span>&#125;)<br>        .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bkColor</span>)<br>        .<span class="hljs-title function_">onTouch</span>(<span class="hljs-function">(<span class="hljs-params">event: TouchEvent</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nodeController button on touched&quot;</span>)<br>        &#125;)<br>        .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">event: ClickEvent</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">customView</span>.<span class="hljs-title function_">sendMessage</span>();<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nodeController button on click&quot;</span>)<br>        &#125;)<br><br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`来自Flutter的数据 : <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.storageLink&#125;</span>`</span>)<br>        .<span class="hljs-title function_">onTouch</span>(<span class="hljs-function">(<span class="hljs-params">event: TouchEvent</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nodeController text on touched&quot;</span>)<br>        &#125;)<br><br>    &#125;.<span class="hljs-title function_">alignItems</span>(<span class="hljs-title class_">HorizontalAlign</span>.<span class="hljs-property">Center</span>)<br>    .<span class="hljs-title function_">justifyContent</span>(<span class="hljs-title class_">FlexAlign</span>.<span class="hljs-property">Center</span>)<br>    .<span class="hljs-title function_">direction</span>(<span class="hljs-title class_">Direction</span>.<span class="hljs-property">Ltr</span>)<br>    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="PlatformView的编写"><a href="#PlatformView的编写" class="headerlink" title="PlatformView的编写"></a>PlatformView的编写</h3><p>我们需要继承<code>PlatformView</code>,并且实现其中的<code>getView</code>方法，返回一个<code>WrappedBuilder</code>, 在这个<code>WrappedBuilder</code>中，返回我们上面自定义的<code>ButtonComponent</code>。<br>当然免不了互相传输数据，因此我们这里还需要实现<code>MethodCallHandler</code>接口.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MethodChannel</span>, &#123;<br>  <span class="hljs-title class_">MethodCallHandler</span>,<br>  <span class="hljs-title class_">MethodResult</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/common/MethodChannel&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PlatformView</span>, &#123; <span class="hljs-title class_">Params</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/platform/PlatformView&#x27;</span>;<br><span class="hljs-keyword">import</span> common <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos.app.ability.common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BinaryMessenger</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/common/BinaryMessenger&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">StandardMethodCodec</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/common/StandardMethodCodec&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MethodCall</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/common/MethodCall&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ButtonComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ButtonComponent&#x27;</span>;<br><br><span class="hljs-meta">@Observed</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PlatformView</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodCallHandler</span> &#123;<br>  <span class="hljs-attr">numValue</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;test&quot;</span>;<br><br>  <span class="hljs-attr">methodChannel</span>: <span class="hljs-title class_">MethodChannel</span>;<br>  <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">context: common.Context, viewId: <span class="hljs-built_in">number</span>, args: ESObject, message: BinaryMessenger</span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nodeController viewId:&quot;</span> + viewId)<br>    <span class="hljs-comment">// 注册消息通道，消息通道根据具体需求添加，代码仅作为示例</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">methodChannel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodChannel</span>(message, <span class="hljs-string">`com.huangyuanlove/customView<span class="hljs-subst">$&#123;viewId&#125;</span>`</span>, <span class="hljs-title class_">StandardMethodCodec</span>.<span class="hljs-property">INSTANCE</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">methodChannel</span>.<span class="hljs-title function_">setMethodCallHandler</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">onMethodCall</span>(<span class="hljs-attr">call</span>: <span class="hljs-title class_">MethodCall</span>, <span class="hljs-attr">result</span>: <span class="hljs-title class_">MethodResult</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-comment">// 接受Dart侧发来的消息</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">method</span>: <span class="hljs-built_in">string</span> = call.<span class="hljs-property">method</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">link1</span>: <span class="hljs-title class_">SubscribedAbstractProperty</span>&lt;<span class="hljs-built_in">number</span>&gt; = <span class="hljs-title class_">AppStorage</span>.<span class="hljs-title function_">link</span>(<span class="hljs-string">&#x27;numValue&#x27;</span>);<br>    <span class="hljs-keyword">switch</span> (method) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;getMessageFromFlutterView&#x27;</span>:<br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">value</span>: <span class="hljs-title class_">ESObject</span> = call.<span class="hljs-property">args</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">numValue</span> = value;<br>        link1.<span class="hljs-title function_">set</span>(value)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nodeController receive message from dart: &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">numValue</span>);<br>        result.<span class="hljs-title function_">success</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> sendMessage = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nodeController sendMessage&quot;</span>)<br>    <span class="hljs-comment">//向Dart侧发送消息</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">methodChannel</span>.<span class="hljs-title function_">invokeMethod</span>(<span class="hljs-string">&#x27;getMessageFromOhosView&#x27;</span>, <span class="hljs-string">&#x27;natvie - &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>++);<br>  &#125;<br><br>  <span class="hljs-title function_">getView</span>(): <span class="hljs-title class_">WrappedBuilder</span>&lt;[<span class="hljs-title class_">Params</span>]&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WrappedBuilder</span>(<span class="hljs-title class_">ButtonBuilder</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">dispose</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br>&#125;<br><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ButtonBuilder</span>(<span class="hljs-params">params: Params</span>) &#123;<br>  <span class="hljs-title class_">ButtonComponent</span>(&#123; <span class="hljs-attr">params</span>: params &#125;)<br>    .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Yellow</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义PlatformViewFactory"><a href="#自定义PlatformViewFactory" class="headerlink" title="自定义PlatformViewFactory"></a>自定义PlatformViewFactory</h3><p>在这里需要在其create方法中创建自定义的PlatformView的实例。这个<code>PlatformViewFactory</code>主要就干这件事情。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> common <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos.app.ability.common&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MessageCodec</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/common/MessageCodec&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PlatformViewFactory</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/platform/PlatformViewFactory&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BinaryMessenger</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/common/BinaryMessenger&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PlatformView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/platform/PlatformView&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CustomView</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./CustomView&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PlatformViewFactory</span> &#123;<br>  <span class="hljs-attr">message</span>: <span class="hljs-title class_">BinaryMessenger</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">message: BinaryMessenger, createArgsCodes: MessageCodec&lt;<span class="hljs-built_in">Object</span>&gt;</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(createArgsCodes);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = message;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">create</span>(<span class="hljs-attr">context</span>: common.<span class="hljs-property">Context</span>, <span class="hljs-attr">viewId</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">args</span>: <span class="hljs-title class_">Object</span>): <span class="hljs-title class_">PlatformView</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomView</span>(context, viewId, args, <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义FlutterPlugin"><a href="#自定义FlutterPlugin" class="headerlink" title="自定义FlutterPlugin"></a>自定义FlutterPlugin</h3><p>这里我们需要自定义一个继承于FlutterPlugin的CustomPlugin插件，在onAttachedToEngine中，注册自定义的PlatformViewFactory。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span>  &#123; <span class="hljs-title class_">FlutterPlugin</span>,<br>  <span class="hljs-title class_">FlutterPluginBinding</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/embedding/engine/plugins/FlutterPlugin&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">StandardMessageCodec</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos/src/main/ets/plugin/common/StandardMessageCodec&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CustomFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./CustomFactory&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FlutterPlugin</span> &#123;<br>  <span class="hljs-title function_">getUniqueClassName</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;CustomPlugin&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">onAttachedToEngine</span>(<span class="hljs-attr">binding</span>: <span class="hljs-title class_">FlutterPluginBinding</span>): <span class="hljs-built_in">void</span> &#123;<br>    binding.<span class="hljs-title function_">getPlatformViewRegistry</span>()?.<br>    <span class="hljs-title function_">registerViewFactory</span>(<span class="hljs-string">&#x27;com.huangyuanlove/customView&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomFactory</span>(binding.<span class="hljs-title function_">getBinaryMessenger</span>(), <span class="hljs-title class_">StandardMessageCodec</span>.<span class="hljs-property">INSTANCE</span>));<br>  &#125;<br><br>  <span class="hljs-title function_">onDetachedFromEngine</span>(<span class="hljs-attr">binding</span>: <span class="hljs-title class_">FlutterPluginBinding</span>): <span class="hljs-built_in">void</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加Plugin"><a href="#添加Plugin" class="headerlink" title="添加Plugin"></a>添加Plugin</h3><p>现在我们需要将上面自定义的plugin在<code>EntryAbility</code>中注册一下.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FlutterAbility</span>, <span class="hljs-title class_">FlutterEngine</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">GeneratedPluginRegistrant</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../plugins/GeneratedPluginRegistrant&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CustomPlugin</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../widget/CustomPlugin&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EntryAbility</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">FlutterAbility</span> &#123;<br>  <span class="hljs-title function_">configureFlutterEngine</span>(<span class="hljs-params">flutterEngine: FlutterEngine</span>) &#123;<br>    <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">configureFlutterEngine</span>(flutterEngine)<br>    <span class="hljs-title class_">GeneratedPluginRegistrant</span>.<span class="hljs-title function_">registerWith</span>(flutterEngine)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addPlugin</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomPlugin</span>());<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>  至此，我们完成了原生侧的开发，下面看一下flutter侧怎么搞</p><h2 id="Flutter侧"><a href="#Flutter侧" class="headerlink" title="Flutter侧"></a>Flutter侧</h2><h3 id="用于发送和接收数据的Controller"><a href="#用于发送和接收数据的Controller" class="headerlink" title="用于发送和接收数据的Controller"></a>用于发送和接收数据的Controller</h3><p>这里我们先封装一个用于和原生侧进行数据交互的类，就叫<code>CustomViewController</code>了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomViewController</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> MethodChannel _channel;<br>  <span class="hljs-keyword">final</span> StreamController&lt;<span class="hljs-built_in">String</span>&gt; _controller = StreamController&lt;<span class="hljs-built_in">String</span>&gt;();<br><br>  CustomViewController._(<br>    <span class="hljs-keyword">this</span>._channel,<br>  ) &#123;<br>    _channel.setMethodCallHandler(<br>      (call) <span class="hljs-keyword">async</span> &#123;<br>        <span class="hljs-keyword">switch</span> (call.method) &#123;<br>          <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;getMessageFromOhosView&#x27;</span>:<br>            <span class="hljs-comment">// 从native端获取数据</span><br>            <span class="hljs-keyword">final</span> result = call.arguments <span class="hljs-keyword">as</span> <span class="hljs-built_in">String</span>;<br>            _controller.sink.add(result);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;,<br>    );<br>  &#125;<br><br>  Stream&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-keyword">get</span> customDataStream =&gt; _controller.stream;<br><br>  <span class="hljs-comment">// 发送数据给native</span><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; sendMessageToOhosView(<span class="hljs-built_in">String</span> message) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">await</span> _channel.invokeMethod(<br>      <span class="hljs-string">&#x27;getMessageFromFlutterView&#x27;</span>,<br>      message,<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个类不封装也行，看自己的喜好。</p><h3 id="用于展示原生控件的Widget"><a href="#用于展示原生控件的Widget" class="headerlink" title="用于展示原生控件的Widget"></a>用于展示原生控件的Widget</h3><p>flutter侧比较简单，只需要搞一个用来展示原生控件的Widget就可以了，交互的话还是走channel，就是用上面封装的<code>CustomViewController</code>.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/services.dart&#x27;</span>;<br><br><span class="hljs-keyword">typedef</span> OnViewCreated = <span class="hljs-built_in">Function</span>(CustomViewController);<br><br><span class="hljs-comment">///<span class="language-markdown">自定义OhosView</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomOhosView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> OnViewCreated onViewCreated;<br><br>  <span class="hljs-keyword">const</span> CustomOhosView(<span class="hljs-keyword">this</span>.onViewCreated, &#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;CustomOhosView&gt; createState() =&gt; _CustomOhosViewState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_CustomOhosViewState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">CustomOhosView</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">late</span> MethodChannel _channel;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> _getPlatformFaceView();<br>  &#125;<br><br>  Widget _getPlatformFaceView() &#123;<br>    <span class="hljs-keyword">return</span> OhosView(<br>      viewType: <span class="hljs-string">&#x27;com.huangyuanlove/customView&#x27;</span>,<br>      onPlatformViewCreated: _onPlatformViewCreated,<br>      creationParams: <span class="hljs-keyword">const</span> &lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt;&#123;<span class="hljs-string">&#x27;initParams&#x27;</span>: <span class="hljs-string">&#x27;hello world&#x27;</span>&#125;,<br>      creationParamsCodec: <span class="hljs-keyword">const</span> StandardMessageCodec(),<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> _onPlatformViewCreated(<span class="hljs-built_in">int</span> id) &#123;<br>    _channel = MethodChannel(<span class="hljs-string">&#x27;com.huangyuanlove/customView<span class="hljs-subst">$id</span>&#x27;</span>);<br>    <span class="hljs-keyword">final</span> controller = CustomViewController._(<br>      _channel,<br>    );<br>    widget.onViewCreated(controller);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里的<code>OhosView</code>组件就是用来桥接PlatformView组件的。<br>其中：</p><blockquote><p>viewType：传递给Native侧，告知插件需要创建那个PlatformView，这个PlatformView需要在插件初始化时注册。<br>onPlatformViewCreated：PlatformView创建成功时的回调。<br>creationParams：传递给PlatformView的初始化参数。</p></blockquote><p>这里需要注意，参数<code>viewType</code>必须和原生侧的<code>CustomPlugin</code>类中的<code>onAttachedToEngine</code>方法中，调用<code>registerViewFactory</code>方法第一个参数一致。<br>在<code>_onPlatformViewCreated</code>方法中注册的<code>Channel</code>就更不需要多说了.</p><h3 id="展示并运行"><a href="#展示并运行" class="headerlink" title="展示并运行"></a>展示并运行</h3><p>我们找个页面来同时展示一下flutter组件和原生组件，这里为了简单，直接修改了<code>main.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:math&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:ohflutter_3221/widget/CustomOhosView.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> MaterialApp(home: Main()));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> Main(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">const</span> Scaffold(<br>      body: CustomViewExample(),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomViewExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> CustomViewExample(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;CustomViewExample&gt; createState() =&gt; _CustomViewExampleState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_CustomViewExampleState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">CustomViewExample</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">String</span> receivedData = <span class="hljs-string">&#x27;&#x27;</span>;<br>  CustomViewController? _controller;<br><br>  <span class="hljs-keyword">void</span> _onCustomOhosViewCreated(CustomViewController controller) &#123;<br>    _controller = controller;<br>    _controller?.customDataStream.listen((data) &#123;<br>      <span class="hljs-comment">//接收到来自OHOS端的数据</span><br>      setState(() &#123;<br>        receivedData = <span class="hljs-string">&#x27;来自ohos的数据：<span class="hljs-subst">$data</span>&#x27;</span>;<br>      &#125;);<br>    &#125;);<br>  &#125;<br><br>  Widget _buildOhosView() &#123;<br>    <span class="hljs-keyword">return</span> Expanded(<br>      flex: <span class="hljs-number">1</span>,<br>      child: Container(<br>        color: Colors.blueAccent.withAlpha(<span class="hljs-number">60</span>),<br>        child: CustomOhosView(_onCustomOhosViewCreated),<br>      ),<br>    );<br>  &#125;<br><br>  Widget _buildFlutterView() &#123;<br>    <span class="hljs-keyword">return</span> Expanded(<br>      flex: <span class="hljs-number">1</span>,<br>      child: Column(<br>        mainAxisAlignment: MainAxisAlignment.center,<br>        mainAxisSize: MainAxisSize.max,<br>        children: [<br>          TextButton(<br>            onPressed: () &#123;<br>              <span class="hljs-keyword">final</span> randomNum = Random().nextInt(<span class="hljs-number">10</span>);<br>              _controller?.sendMessageToOhosView(<span class="hljs-string">&#x27;flutter - <span class="hljs-subst">$randomNum</span> &#x27;</span>);<br>            &#125;,<br>            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;发送数据给ohos&#x27;</span>),<br>          ),<br>          <span class="hljs-keyword">const</span> SizedBox(height: <span class="hljs-number">10</span>),<br>          Text(receivedData),<br>        ],<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Column(<br>      children: [<br>        _buildOhosView(),<br>        _buildFlutterView(),<br>      ],<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们就完成了原生组件的展示，和flutter组件的通信。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>放个效果图<br><img src="/image/harmony_flutter/platform_view.gif" alt="platform_view"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们自己的业务比较简单，基本上没有使用PlatformView，所有的页面要么是原生，要么是flutter，没有这种在flutter页面上展示原生控件的需求。&lt;br&gt;这里介绍一下如何在纯flutter项目中使用platformView展示鸿蒙组件。&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-flutter-使用FlutterEntry的路由管理和参数传递_下</title>
    <link href="https://blog.huangyuanlove.com/2025/06/10/%E9%B8%BF%E8%92%99-flutter-%E4%BD%BF%E7%94%A8FlutterEntry%E7%9A%84%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%92%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92-%E4%B8%8B/"/>
    <id>https://blog.huangyuanlove.com/2025/06/10/%E9%B8%BF%E8%92%99-flutter-%E4%BD%BF%E7%94%A8FlutterEntry%E7%9A%84%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%92%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92-%E4%B8%8B/</id>
    <published>2025-06-10T03:44:44.000Z</published>
    <updated>2025-06-16T07:09:50.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面两篇介绍了如何打开指定页面，并且传递对应的参数。这一篇中我们来看下在页面返回时，如何将数据传递给上一个页面。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>按照之前的介绍，我们在<code>flutter</code>打开<code>native</code>时，也是通过<code>methodChannel</code>调用原生的方法打开的对应页面，那么当原生页面返回的时候，也是会将数据放在<code>HMRouterPathCallback</code>回调中返回。当我们获取到对应的数据之后，可以通过<code>MethodResult</code>将数据返回给<code>flutter</code>。<br>当<code>flutter</code>页面返回时，需要先判断能不能由<code>flutter</code>进行返回，不能返回的话再通过<code>methodChannel</code>调用 <code>native</code>返回。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="native页面返回"><a href="#native页面返回" class="headerlink" title="native页面返回"></a>native页面返回</h3><p>对于 native 页面返回，我们看一下上一篇中提到的 flutter 打开 native，在·EntryAbility·中调用的<code>setRouterPushHandler</code>，当页面返回的时候，会回调<code>HMRouterMgr.push</code>传入的<code>HMRouterPathCallback</code>对象中的方法。我们来改造一下<code>setRouterPushHandler</code>这个方法，将 MethodResult 对象也传过来，当页面返回的时候调用MethodResult.success将参数返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">FlutterRouterPlugin</span>.<span class="hljs-title function_">setRouterPushHandler</span>(<span class="hljs-function">(<span class="hljs-params">path:<span class="hljs-built_in">string</span>,args:Record&lt;<span class="hljs-built_in">string</span>,<span class="hljs-built_in">Object</span>&gt;|<span class="hljs-literal">undefined</span>,result: MethodResult</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`rouerHandler:path=&gt; <span class="hljs-subst">$&#123;path&#125;</span> ,args=&gt;<span class="hljs-subst">$&#123;args&#125;</span>`</span>)<br>  <span class="hljs-keyword">if</span>(path ==<span class="hljs-string">&#x27;pages/flutter/FromFlutterPage&#x27;</span>)&#123;<br>    <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">pageUrl</span>:<span class="hljs-string">&#x27;pages/flutter/FromFlutterPage&#x27;</span>,<span class="hljs-attr">param</span>:args&#125;,&#123;<br>      <span class="hljs-attr">onResult</span>:<span class="hljs-function">(<span class="hljs-params">popInfo:PopInfo</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(popInfo)&#123;<br>          result.<span class="hljs-title function_">success</span>(popInfo.<span class="hljs-property">result</span>)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>          result.<span class="hljs-title function_">success</span>(<span class="hljs-string">&quot;&quot;</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="flutter页面返回"><a href="#flutter页面返回" class="headerlink" title="flutter页面返回"></a>flutter页面返回</h3><p>按照之前的介绍，flutter 返回也统一调用插件的返回方法。<br>在插件的<code>FlutterRouterPlatform</code>中添加<code>pop</code>方法:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> pop([args]) &#123;<br>  <span class="hljs-keyword">throw</span> UnimplementedError(<span class="hljs-string">&#x27;open() has not been implemented.&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在插件的<code>MethodChannelFlutterRouter</code>中添加实现：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> pop([args]) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">await</span> methodChannel.invokeMethod(<span class="hljs-string">&#x27;pop&#x27;</span>, args);<br>&#125;<br></code></pre></td></tr></table></figure><p>在插件的<code>FlutterRouterPlugin</code>中添加调用，这里我们还是将返回的处理交给宿主项目决定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">static</span> <span class="hljs-attr">routerPopHandler</span>:<span class="hljs-function">(<span class="hljs-params">call:MethodCall,result: MethodResult</span>)=&gt;</span><span class="hljs-built_in">boolean</span> =<span class="hljs-function">(<span class="hljs-params">call,result</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-title function_">setRouterPopHandler</span>(<span class="hljs-params">handler:(call:MethodCall,result: MethodResult)=&gt;<span class="hljs-built_in">boolean</span></span>)&#123;<br>  <span class="hljs-title class_">FlutterRouterPlugin</span>.<span class="hljs-property">routerPopHandler</span> = handler<br>&#125;<br><span class="hljs-title function_">onMethodCall</span>(<span class="hljs-attr">call</span>: <span class="hljs-title class_">MethodCall</span>, <span class="hljs-attr">result</span>: <span class="hljs-title class_">MethodResult</span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-keyword">if</span>(call.<span class="hljs-property">method</span> ==<span class="hljs-string">&#x27;pop&#x27;</span>)&#123;<br>    <span class="hljs-title class_">FlutterRouterPlugin</span>.<span class="hljs-title function_">routerPopHandler</span>(call,result)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在插件的<code>FlutterRouter</code>中统一调用返回的方法：先判断 flutter 是否可以 pop</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> pop(context, [<span class="hljs-built_in">dynamic</span> args]) &#123;<br>  <span class="hljs-keyword">if</span> (Navigator.of(context).canPop()) &#123;<br>    Navigator.of(context).pop(args);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    FlutterRouterPlatform.instance.pop(args);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了测试简单全面，我们在 flutter_module中添加一个 flutter 页面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//from_flutter_page.dart</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_router/flutter_router.dart&#x27;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FromFlutterPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; args;<br>  <span class="hljs-keyword">const</span> FromFlutterPage(<span class="hljs-keyword">this</span>.args,&#123;  <span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;FromFlutterPage&gt; createState() =&gt; _FromFlutterPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_FromFlutterPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">FromFlutterPage</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(centerTitle: <span class="hljs-keyword">true</span>,title: Text(<span class="hljs-string">&#x27;from flutter&#x27;</span>,style: TextStyle(fontSize: <span class="hljs-number">16</span>,color: Color(<span class="hljs-number">0xff333333</span>)),),),<br>      body: Column(<br>        children: [<br>            Text(<span class="hljs-string">&quot;收到上个页面传过来的数据&quot;</span>),<br>          Text(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;widget.args&#125;</span>&quot;</span>),<br>          ElevatedButton(<br>            onPressed: () &#123;<br>              FlutterRouter().pop(context,&#123;<span class="hljs-string">&quot;user_id&quot;</span>:<span class="hljs-string">&quot;xuan&quot;</span>,<span class="hljs-string">&quot;page_name&quot;</span>:<span class="hljs-string">&quot;FromFlutterPage&quot;</span>&#125;);<br>            &#125;,<br>            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;带数据返回上个页面&quot;</span>,<br>                style: TextStyle(fontSize: <span class="hljs-number">16</span>, color: Color(<span class="hljs-number">0xff333333</span>))),<br>          ),<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意，添加的页面需要在 flutter 侧注册一下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//main.dart</span><br><span class="hljs-keyword">void</span> initRouter()&#123;<br>  RouterManager.instance.addRouter(<span class="hljs-string">&quot;login&quot;</span>,(args)&#123;<span class="hljs-keyword">return</span> LoginPage(args);&#125;);<br>  RouterManager.instance.addRouter(<span class="hljs-string">&quot;from_flutter&quot;</span>,(args)&#123;<span class="hljs-keyword">return</span> FromFlutterPage(args);&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后我们在LoginPage中添加一下相关跳转、返回、参数展示</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//login_page.dart</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:convert&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_router/flutter_router.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; args;<br><br>  <span class="hljs-keyword">const</span> LoginPage(<span class="hljs-keyword">this</span>.args, &#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;LoginPage&gt; createState() =&gt; _LoginPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_LoginPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">LoginPage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">String</span> nativeResult = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-built_in">String</span> flutterResult = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        title: Text(<span class="hljs-string">&quot;登录页面&quot;</span>),<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>      ),<br>      body: Column(<br>        children: [<br>          <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;登录页面获取到的参数&quot;</span>,<br>              style: TextStyle(fontSize: <span class="hljs-number">16</span>, color: Color(<span class="hljs-number">0xff333333</span>))),<br>          Text(jsonEncode(widget.args)),<br>          Text(<span class="hljs-string">&quot;name:<span class="hljs-subst">$&#123;widget.args[<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>&quot;</span>),<br>          Text(<span class="hljs-string">&quot;age:<span class="hljs-subst">$&#123;widget.args[<span class="hljs-string">&#x27;age&#x27;</span>]&#125;</span>&quot;</span>),<br>          ElevatedButton(<br>            onPressed: () &#123;<br>              <span class="hljs-comment">//HMRouterAPage</span><br>              FlutterRouter().open(context, <span class="hljs-string">&#x27;pages/flutter/FromFlutterPage&#x27;</span>,<br>                  arguments: &#123;<br>                    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;flutter_harmony&#x27;</span>,<br>                    <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">3</span><br>                  &#125;).then((value) &#123;<br>                debugPrint(<span class="hljs-string">&quot;native页面返回 flutter 传递的参数 <span class="hljs-subst">$&#123;jsonEncode(value)&#125;</span>&quot;</span>);<br>                setState(() &#123;<br>                  nativeResult = jsonEncode(value);<br>                &#125;);<br>              &#125;);<br>            &#125;,<br>            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;FromFlutterPage&quot;</span>,<br>                style: TextStyle(fontSize: <span class="hljs-number">16</span>, color: Color(<span class="hljs-number">0xff333333</span>))),<br>          ),<br>          ElevatedButton(<br>            onPressed: () &#123;<br>              FlutterRouter().open(context, <span class="hljs-string">&quot;from_flutter&quot;</span>, arguments: &#123;<br>                <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-string">&quot;LoginPage&quot;</span>,<br>                <span class="hljs-string">&quot;business_id&quot;</span>: <span class="hljs-string">&quot;123&quot;</span><br>              &#125;).then((value) &#123;<br>                debugPrint(<span class="hljs-string">&quot;flutter页面返回 flutter 传递的参数 <span class="hljs-subst">$&#123;jsonEncode(value)&#125;</span>&quot;</span>);<br>                setState(() &#123;<br>                  flutterResult = jsonEncode(value);<br>                &#125;);<br>              &#125;);<br>            &#125;,<br>            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;跳转到 flutter&quot;</span>,<br>                style: TextStyle(fontSize: <span class="hljs-number">16</span>, color: Color(<span class="hljs-number">0xff333333</span>))),<br>          ),<br>          ElevatedButton(<br>            onPressed: () &#123;<br>              FlutterRouter().pop(context, &#123;<span class="hljs-string">&quot;user_id&quot;</span>: <span class="hljs-string">&quot;xuan&quot;</span>&#125;);<br>            &#125;,<br>            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;返回上个页面携带参数&quot;</span>,<br>                style: TextStyle(fontSize: <span class="hljs-number">16</span>, color: Color(<span class="hljs-number">0xff333333</span>))),<br>          ),<br>          Container(<br>            margin: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">15</span>),<br>            color: <span class="hljs-keyword">const</span> Color(<span class="hljs-number">0xff9c649a</span>),<br>            child: Column(<br>              children: [<span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;flutter页面返回携带的参数：&#x27;</span>), Text(flutterResult)],<br>            ),<br>          ),<br>          Container(<br>            margin: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">15</span>),<br>            color: <span class="hljs-keyword">const</span> Color(<span class="hljs-number">0xff7b7a32</span>),<br>            child: Column(<br>              children: [<span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;native页面返回携带的参数：&#x27;</span>), Text(nativeResult)],<br>            ),<br>          ),<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们在 flutter 中需要做的事情就已经做完了，执行<code>flutter build har --debug</code>会在<code>my_flutter_module/.ohos/har</code>文件夹下看到三个<strong>har</strong>文件，直接复制到鸿蒙工程中进行依赖就行了。记得把源码依赖删掉</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//oh-package.json5</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;modelVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5.0.5&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Please describe the basic information.&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@hadss/hmrouter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0-rc.10&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@ohos/flutter_ohos&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:./har/flutter.har&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@ohos/flutter_module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.//har/flutter_module.har&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;flutter_router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:./har/flutter_router.har&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-attr">&quot;overrides&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@ohos/flutter_ohos&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:./har/flutter.har&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;flutter_router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:./har/flutter_router.har&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>最后一步，在<code>EntryAbility</code>中设置一下处理返回的调用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">onCreate</span>(<span class="hljs-attr">want</span>: <span class="hljs-title class_">Want</span>, <span class="hljs-attr">launchParam</span>: <span class="hljs-title class_">AbilityConstant</span>.<span class="hljs-property">LaunchParam</span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-title class_">FlutterRouterPlugin</span>.<span class="hljs-title function_">setRouterPopHandler</span>(<span class="hljs-function">(<span class="hljs-params">call:MethodCall,result: MethodResult</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`flutter 调用 pop  setRouterPopHandler:  <span class="hljs-subst">$&#123;call.method&#125;</span>  <span class="hljs-subst">$&#123;call.args&#125;</span>`</span>)<br>    <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">pop</span>(&#123;<span class="hljs-attr">param</span>:call.<span class="hljs-property">args</span>&#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就完成了页面返回时参数的传递。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>先看下效果<br><img src="/image/harmony_flutter/go_back_params.gif"></p><p>总结一下：</p><ol><li>native 打开 flutter 时，将参数拼接到初始化路径上。</li><li>flutter 侧需要将所有的页面注册到插件中</li><li>flutter 打开页面时，插件判断目标页面是 flutter 还是 native，选择对应的方法打开页面</li><li>页面返回时，通过 MethodResult 将数据返回</li></ol><hr><p>至此，鸿蒙和 flutter 混编的介绍就已经结束了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前面两篇介绍了如何打开指定页面，并且传递对应的参数。这一篇中我们来看下在页面返回时，如何将数据传递给上一个页面。&lt;/p&gt;
&lt;h2 id=&quot;方</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-flutter-使用FlutterEntry的路由管理和参数传递_中</title>
    <link href="https://blog.huangyuanlove.com/2025/06/08/%E9%B8%BF%E8%92%99-flutter-%E4%BD%BF%E7%94%A8FlutterEntry%E7%9A%84%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%92%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92-%E4%B8%AD/"/>
    <id>https://blog.huangyuanlove.com/2025/06/08/%E9%B8%BF%E8%92%99-flutter-%E4%BD%BF%E7%94%A8FlutterEntry%E7%9A%84%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%92%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92-%E4%B8%AD/</id>
    <published>2025-06-08T08:06:54.000Z</published>
    <updated>2025-06-16T07:09:50.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面我们完成了鸿蒙打开flutter指定页面，并且传递参数，接下来我们看一下在flutter侧打开鸿蒙原生页面，并且传递参数应该如何处理。<br>当然了，我们在前面也提到了，在flutter发起路由的时候，都交给插件来处理。并且我们在上一章中也创建好了flutter插件，并没有使用和原生交互，只是创建了一个flutter路由和页面映射的管理类。</p><h2 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h2><p>这里为了简单，我们在<code>my_flutter_module</code>下新建一个<code>plugins</code>文件，将插件工程放在这个文件夹下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd my_flutter_module/plugins/<br>flutter create --org com.huangyuanlove.flutter_router --template=plugin --platforms=ohos flutter_router<br></code></pre></td></tr></table></figure><p>这里我们演示鸿蒙项目下的插件，就没有支持 Android 和 iOS。<br>在 my_flutter_module中引用这个插件,在<code>pubspec.yaml</code>中添加引用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">flutter_router:</span> <br>    <span class="hljs-attr">path:</span> <span class="hljs-string">plugins/flutter_router</span><br></code></pre></td></tr></table></figure><h2 id="flutter打开native"><a href="#flutter打开native" class="headerlink" title="flutter打开native"></a>flutter打开native</h2><p>这里需要用到和native通信了。前面也提到过，当flutter发起路由时，先判断目标页面是不是flutter页面，是的话用flutter中的Navigator打开，否则调用channel通知原生打开。</p><p>因为打开原生页面有时候也需要传递一些参数，我们在<code>FlutterRouterPlatform</code>中定义这么一个方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Future&lt;T&gt; open&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">Object?</span>&gt;(url, &#123;<span class="hljs-built_in">dynamic</span> arguments&#125;) &#123;<br>  <span class="hljs-keyword">throw</span> UnimplementedError(<span class="hljs-string">&#x27;open() has not been implemented.&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后我们在<code>MethodChannelFlutterRouter</code>中实现这个方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br>Future&lt;T&gt; open&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">Object?</span>&gt;(url,<br>    &#123;<span class="hljs-built_in">dynamic</span> arguments&#125;) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">var</span> args = &#123;&#125;;<br>  args[<span class="hljs-string">&#x27;path&#x27;</span>] = url;<br><br>  <span class="hljs-keyword">if</span> (arguments != <span class="hljs-keyword">null</span>) &#123;<br>    args[<span class="hljs-string">&#x27;arguments&#x27;</span>] = arguments;<br>  &#125;<br>  debugPrint(<span class="hljs-string">&quot;-----------open---start--------&quot;</span>);<br>  debugPrint(<span class="hljs-string">&quot;path <span class="hljs-subst">$url</span>&quot;</span>);<br>  debugPrint(<span class="hljs-string">&quot;arguments <span class="hljs-subst">$arguments</span>&quot;</span>);<br>  debugPrint(<span class="hljs-string">&quot;-----------open----end-------&quot;</span>);<br><br>  <span class="hljs-keyword">final</span> result = <span class="hljs-keyword">await</span> methodChannel.invokeMethod(<span class="hljs-string">&#x27;open&#x27;</span>, args);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>看着代码挺多，实际上只是把<code>url</code>和<code>arguments</code>这两个参数打包到了<code>args</code>里面，通过<code>methodChannel</code>传给原生。</p><h3 id="原生侧处理"><a href="#原生侧处理" class="headerlink" title="原生侧处理"></a>原生侧处理</h3><p>这里我们可以使用DevEco打开插件目录下的ohos文件夹，把它当作一个鸿蒙工程。或者简单点，直接在当前工程中编辑也行。只是方法提示不太友好，我们可以把ohos工程中的<code>FlutterRouterPlugin</code>文件直接复制到当前鸿蒙工程中，编辑完后再复制回去。<br>我们看下<code>FlutterRouterPlugin</code>应该如何处理。<br>考虑到我们是传入的路径，也是打算注册路径和关联页面，但考虑到我们的实际业务情况，就开放了一个处理接口，由native侧设置，当触发打开native页面时，由native来处理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">FlutterPlugin</span>,<br>  <span class="hljs-title class_">FlutterPluginBinding</span>,<br>  <span class="hljs-title class_">MethodCall</span>,<br>  <span class="hljs-title class_">MethodCallHandler</span>,<br>  <span class="hljs-title class_">MethodChannel</span>,<br>  <span class="hljs-title class_">MethodResult</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos&#x27;</span>;<br><br><span class="hljs-comment">/** FlutterRouterPlugin **/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlutterRouterPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FlutterPlugin</span>, <span class="hljs-title class_">MethodCallHandler</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">channel</span>: <span class="hljs-title class_">MethodChannel</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-attr">routerPushHandler</span>: <span class="hljs-function">(<span class="hljs-params">path: <span class="hljs-built_in">string</span>, args: Record&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">Object</span>&gt; | <span class="hljs-literal">undefined</span>,result:MethodResult</span>) =&gt;</span> <span class="hljs-built_in">boolean</span> = <span class="hljs-function">(<span class="hljs-params">path, args,result</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">setRouterPushHandler</span>(<span class="hljs-params">handler: (path: <span class="hljs-built_in">string</span>, args: Record&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">Object</span>&gt; | <span class="hljs-literal">undefined</span>,result:MethodResult) =&gt; <span class="hljs-built_in">boolean</span></span>) &#123;<br>    <span class="hljs-title class_">FlutterRouterPlugin</span>.<span class="hljs-property">routerPushHandler</span> = handler<br>  &#125;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>  &#125;<br><br>  <span class="hljs-title function_">getUniqueClassName</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;FlutterRouterPlugin&quot;</span><br>  &#125;<br><br>  <span class="hljs-title function_">onAttachedToEngine</span>(<span class="hljs-attr">binding</span>: <span class="hljs-title class_">FlutterPluginBinding</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">channel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodChannel</span>(binding.<span class="hljs-title function_">getBinaryMessenger</span>(), <span class="hljs-string">&quot;flutter_router&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">channel</span>.<span class="hljs-title function_">setMethodCallHandler</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">onDetachedFromEngine</span>(<span class="hljs-attr">binding</span>: <span class="hljs-title class_">FlutterPluginBinding</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">channel</span> != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">channel</span>.<span class="hljs-title function_">setMethodCallHandler</span>(<span class="hljs-literal">null</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">onMethodCall</span>(<span class="hljs-attr">call</span>: <span class="hljs-title class_">MethodCall</span>, <span class="hljs-attr">result</span>: <span class="hljs-title class_">MethodResult</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-keyword">if</span> (call.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;getPlatformVersion&quot;</span>) &#123;<br>      result.<span class="hljs-title function_">success</span>(<span class="hljs-string">&quot;OpenHarmony ^ ^ &quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (call.<span class="hljs-property">method</span> == <span class="hljs-string">&#x27;open&#x27;</span>) &#123;<br>      <span class="hljs-keyword">let</span> <span class="hljs-attr">path</span>: <span class="hljs-built_in">string</span> = call.<span class="hljs-title function_">argument</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br>      <span class="hljs-keyword">let</span> <span class="hljs-attr">args</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-title class_">Object</span>&gt; | <span class="hljs-literal">undefined</span> = call.<span class="hljs-title function_">argument</span>(<span class="hljs-string">&#x27;arguments&#x27;</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;-------onMethodCall----open---start--------&quot;</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`path <span class="hljs-subst">$&#123;path&#125;</span>`</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`arguments <span class="hljs-subst">$&#123;args&#125;</span>`</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;------onMethodCall-----open----end-------&quot;</span>)<br>      <span class="hljs-title class_">FlutterRouterPlugin</span>.<span class="hljs-title function_">routerPushHandler</span>(path, args,result)<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result.<span class="hljs-title function_">notImplemented</span>()<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们再写一个鸿蒙页面，用来测试flutter打开native的情况</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HMRouter</span>, <span class="hljs-title class_">HMRouterMgr</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@hadss/hmrouter&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ActionBar</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../comm/ActionBar&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UIUtils</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@kit.ArkUI&quot;</span>;<br><br><span class="hljs-meta">@HMRouter</span>(&#123; <span class="hljs-attr">pageUrl</span>: <span class="hljs-string">&#x27;pages/flutter/FromFlutterPage&#x27;</span> &#125;)<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">export</span> struct <span class="hljs-title class_">FromFlutterPage</span> &#123;<br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">routerParam</span>: <span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-title class_">Object</span>&gt; | <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><br>  <span class="hljs-title function_">aboutToAppear</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">routerParam</span> = <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">getCurrentParam</span>() <span class="hljs-keyword">as</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-title class_">Object</span>&gt;<br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">ActionBar</span>(&#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;从 flutter 打开的页面&quot;</span>,<span class="hljs-attr">onClickBack</span>:<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">pop</span>()&#125; &#125;)<br><br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;获取到的路由参数&#x27;</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">routerParamsToStr</span>())<br><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">routerParamsToStr</span>(): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">routerParam</span>) &#123;<br>      <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span><br><br>      <span class="hljs-keyword">let</span> <span class="hljs-attr">tmp</span>:<span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-title class_">Object</span>&gt; = <span class="hljs-title class_">UIUtils</span>.<span class="hljs-property">getTarget</span>&lt;<span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-title class_">Object</span>&gt;&gt;(<span class="hljs-variable language_">this</span>.<span class="hljs-property">routerParam</span>);<br>      tmp.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value,key</span>)=&gt;</span>&#123;<br>        result += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> : <span class="hljs-subst">$&#123;value&#125;</span> \n`</span><br>      &#125;)<br><br>      <span class="hljs-keyword">return</span> result<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;无参数&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们在<code>EntryAbility</code>的<code>onCreate</code>方法中设置一下<code>routerPushHandler</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">FlutterRouterPlugin</span>.<span class="hljs-title function_">setRouterPushHandler</span>(<span class="hljs-function">(<span class="hljs-params">path:<span class="hljs-built_in">string</span>,args:Record&lt;<span class="hljs-built_in">string</span>,<span class="hljs-built_in">Object</span>&gt;|<span class="hljs-literal">undefined</span>,result: MethodResult</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`rouerHandler:path=&gt; <span class="hljs-subst">$&#123;path&#125;</span> ,args=&gt;<span class="hljs-subst">$&#123;args&#125;</span>`</span>)<br>  <span class="hljs-keyword">if</span>(path ==<span class="hljs-string">&#x27;pages/flutter/FromFlutterPage&#x27;</span>)&#123;<br>    <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">pageUrl</span>:<span class="hljs-string">&#x27;pages/flutter/FromFlutterPage&#x27;</span>,<span class="hljs-attr">param</span>:args&#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这里我们判断了path的值和跳转对应的页面。</p><h3 id="flutter侧调用"><a href="#flutter侧调用" class="headerlink" title="flutter侧调用"></a>flutter侧调用</h3><p>我们调用的方法都写在了<code>FlutterRouter</code>中,并且也是在这里判断是打开 flutter 页面还是打开native 页面<br>我们在<code>RouterManager</code>中添加一个判断是否为 flutter 页面的方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">bool</span> hasRouterWidget(<span class="hljs-built_in">String</span> path) &#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> routerName = _getRouterName(path);<br>  <span class="hljs-keyword">return</span> _routerMap.containsKey(routerName);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们在<code>FlutterRouter</code>写一下对应的打开页面的方法:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_router/router_manager.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;flutter_router_platform_interface.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlutterRouter</span> </span>&#123;<br>  Future&lt;<span class="hljs-built_in">String?</span>&gt; getPlatformVersion() &#123;<br>    <span class="hljs-keyword">return</span> FlutterRouterPlatform.instance.getPlatformVersion();<br>  &#125;<br>  Future&lt;T?&gt; open&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">Object?</span>&gt;(context, path,<br>      &#123;<span class="hljs-built_in">Object?</span> arguments&#125;) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">bool</span> useFlutterPage = RouterManager.instance.hasRouterWidget(path);<br>    <span class="hljs-keyword">if</span>(useFlutterPage)&#123;<br>      debugPrint(<span class="hljs-string">&quot;FlutterRouter#open 打开 flutter&quot;</span>);<br>      Widget target =  RouterManager.instance.getRouterWidget(path,params: arguments);<br>      <span class="hljs-keyword">return</span> Navigator.of(context).push(MaterialPageRoute(<br>        builder: (context) =&gt; target,<br>      ),);<br>      <span class="hljs-comment">// return Navigator.of(context).pushNamed(path, arguments: arguments);</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 打开native页面: path已在native端注册</span><br>      debugPrint(<span class="hljs-string">&quot;FlutterRouter#open 打开 native&quot;</span>);<br>      <span class="hljs-keyword">return</span> FlutterRouterPlatform.instance<br>          .open&lt;T&gt;(path, arguments: arguments)<br>          .then((value) &#123;<br>        <span class="hljs-keyword">return</span> value;<br>      &#125;);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>之后我们在之前使用的<code>LoginPage</code>页面中调用一下这个方法:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart">ElevatedButton(<br>  onPressed: () &#123;<br>    <span class="hljs-comment">//HMRouterAPage</span><br>    FlutterRouter().open(context, <span class="hljs-string">&#x27;pages/flutter/FromFlutterPage&#x27;</span>,<br>        arguments: &#123;<br>          <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;flutter_harmony&#x27;</span>,<br>          <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">3</span><br>        &#125;);<br>  &#125;,<br>  child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;FromFlutterPage&quot;</span>,<br>      style: TextStyle(fontSize: <span class="hljs-number">16</span>, color: Color(<span class="hljs-number">0xff333333</span>))),<br>),<br></code></pre></td></tr></table></figure><p>看一下效果<br><img src="/image/harmony_flutter/flutter_to_native.gif"></p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><ol><li>flutter打开页面时，调用<code>FlutterRouter#open</code>方法，</li><li>在该方法中判断目标页面是 flutter 页面还是 native 页面</li><li>如果是 native 页面，则通过 methodChannel 调用 native 方法</li><li>最终调用的 native 方法由宿主原生工程中设置，由宿主原生工程来打开对应页面</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前面我们完成了鸿蒙打开flutter指定页面，并且传递参数，接下来我们看一下在flutter侧打开鸿蒙原生页面，并且传递参数应该如何处理。&lt;</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-flutter-使用FlutterEntry的路由管理和参数传递_上</title>
    <link href="https://blog.huangyuanlove.com/2025/06/04/%E9%B8%BF%E8%92%99-flutter-%E4%BD%BF%E7%94%A8FlutterEntry%E7%9A%84%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%92%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92_%E4%B8%8A/"/>
    <id>https://blog.huangyuanlove.com/2025/06/04/%E9%B8%BF%E8%92%99-flutter-%E4%BD%BF%E7%94%A8FlutterEntry%E7%9A%84%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%92%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92_%E4%B8%8A/</id>
    <published>2025-06-04T08:18:01.000Z</published>
    <updated>2025-06-16T07:09:50.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在前面介绍了如何搭建环境，如何向现有鸿蒙工程中添加 flutter 模块，这篇文章中我们来看一下参数传递问题。<br>我们先看一下有哪些场景</p><ol><li>native 打开 flutter 页面</li><li>flutter 打开 native 页面</li><li>flutter 打开 flutter 页面</li><li>native 返回 flutter 页面</li><li>flutter 返回 native 页面</li><li>flutter 返回 flutter 页面</li></ol><p>一开始考虑的是 flutter 打开 flutter 的时候用 flutter 的路由，不需要 native 参与，比如 FlutterA 跳转到 FlutterB，直接在 flutter 进行跳转。但是也有可能会出现由 nativeA 打开 FlutterB，这时候 FlutterB 返回时需要将数据传给上个页面，如果按照一开始的逻辑，FlutterB 页面就需要判断来源，增加了复杂性。<br>因此，我们决定 flutter 打开 flutter 页需要重新打开一个新的 native 页面，让这个 native 页面加载对应的 flutter 页面。<br>也就是说，一个 native 页面只承载一个FlutterView。<br>这种情况下就需要我们写插件了。</p><h2 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h2><p>这里为了简单，我们在<code>my_flutter_module</code>下新建一个<code>plugins</code>文件，将插件工程放在这个文件夹下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd my_flutter_module/plugins/<br>flutter create --org com.huangyuanlove.flutter_router --template=plugin --platforms=ohos flutter_router<br></code></pre></td></tr></table></figure><p>这里我们演示鸿蒙项目下的插件，就没有支持 Android 和 iOS。<br>在 my_flutter_module中引用这个插件,在<code>pubspec.yaml</code>中添加引用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">flutter_router:</span> <br>    <span class="hljs-attr">path:</span> <span class="hljs-string">plugins/flutter_router</span><br></code></pre></td></tr></table></figure><h2 id="路由策略"><a href="#路由策略" class="headerlink" title="路由策略"></a>路由策略</h2><p>这里主要考虑flutter发起路由时的情况：</p><ol><li>flutter 页面路由统一调用插件中的方法进行跳转。</li><li>在 flutter 的 main 函数中注册页面路径相关参数</li><li>跳转时判断目标是 flutter 还是 native，如果是 flutter，则使用 Navigator；如果是 native ，则通过 methodChannel 调用原生打开</li><li>当页面返回时，先判断是否可以由flutter进行pop(flutter打开flutter页面的情况)，可以的话则由flutter进行pop，否则通过methodChannel调用原生进行返回</li></ol><h3 id="native打开flutter"><a href="#native打开flutter" class="headerlink" title="native打开flutter"></a>native打开flutter</h3><p>在前面的章节，我们了解了如何打开flutter页面，但仅仅是打开了默认的页面，并没有打开指定的页面和传入参数，在这一节中，我们来看下如何实现。</p><h3 id="flutter页面注册"><a href="#flutter页面注册" class="headerlink" title="flutter页面注册"></a>flutter页面注册</h3><p>由于我们确定是用路径+参数的形式来确定要打开的页面，因此需要我们先将路径和对应的flutter页面关联起来，并且能创建页面的时候把对应的参数传进去。<br>我们在flutter_router插件中创建一个用来记录路径和页面关系的类<code>router_manager.dart</code>,考虑到创建页面的时候需要传递参数，所以我们可以这么保存</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">typedef</span> RouteWidgetBuilder = Widget <span class="hljs-built_in">Function</span>(<span class="hljs-built_in">dynamic</span> args);<br><span class="hljs-keyword">final</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, RouteWidgetBuilder&gt; _routerMap = &#123;&#125;;<br><br><span class="hljs-built_in">bool</span> addRouter(<span class="hljs-built_in">String</span> path, RouteWidgetBuilder routerBuilder) &#123;<br>  _routerMap[path] = routerBuilder;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="路径和参数获取"><a href="#路径和参数获取" class="headerlink" title="路径和参数获取"></a>路径和参数获取</h3><p>由于没有找到太好的方法来传递参数，暂时先将参数拼接到路径上，因此，我们还需要定义两个方法：从带参数路径中获取路径，从带参数路径中获取参数。<br>比如要打开的全路径为：<code>login?&#123;&quot;name&quot;:&quot;harmonyos&quot;,&quot;age&quot;:3&#125;</code>,我们获取到的路径为<code>login</code>,获取到的参数为<code>&#123;&quot;name&quot;:&quot;harmonyos&quot;,&quot;age&quot;:3&#125;</code>,也就是说路径和参数是用<code>?</code>拼接，并且参数是json字符串，这样方便我们解析。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">String</span> _getRouterName(<span class="hljs-built_in">String?</span> path) &#123;<br>  <span class="hljs-keyword">if</span> (path == <span class="hljs-keyword">null</span>) &#123;<br>    debugPrint(<span class="hljs-string">&quot;获取路径出错，path 为空&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/&quot;</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (path.contains(<span class="hljs-string">&#x27;?&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">var</span> uri = <span class="hljs-built_in">Uri</span>.parse(path);<br>    <span class="hljs-keyword">return</span> uri.path;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> path;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">Object?</span> _getRouteArgs(<span class="hljs-built_in">String?</span> route) &#123;<br>  <span class="hljs-keyword">if</span> (route == <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (route.contains(<span class="hljs-string">&#x27;?&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">var</span> uri = <span class="hljs-built_in">Uri</span>.parse(route);<br><br>    <span class="hljs-built_in">String</span> query = uri.query;<br>    <span class="hljs-keyword">try</span> &#123;<br>      query = <span class="hljs-built_in">Uri</span>.decodeFull(query);<br>      <span class="hljs-keyword">return</span> json.decode(query);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-comment">// Map&lt;String, String&gt;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Uri</span>.splitQueryString(query);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们还需要一个根据路径获取页面的方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget getRouterWidget(<span class="hljs-built_in">String</span> path, &#123;<span class="hljs-built_in">Object?</span> params&#125;) &#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> routerName = _getRouterName(path);<br>  <span class="hljs-built_in">Object?</span> pathParam = _getRouteArgs(path);<br>  debugPrint(<br>      <span class="hljs-string">&quot;getRouterWidget path:<span class="hljs-subst">$path</span>, routerName:<span class="hljs-subst">$routerName</span>,pathParam:<span class="hljs-subst">$pathParam</span> ,params:<span class="hljs-subst">$params</span>&quot;</span>);<br>  RouteWidgetBuilder? routerBuilder = _routerMap[routerName];<br>  <span class="hljs-keyword">if</span> (routerBuilder != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> routerBuilder(pathParam ?? params);<br>  &#125;<br>  <span class="hljs-keyword">return</span> Container();<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里我们就已经做好了native打开flutter页面的准备。</p><h3 id="准备目标页面"><a href="#准备目标页面" class="headerlink" title="准备目标页面"></a>准备目标页面</h3><p>这假设我们有一个login页面，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//login.dart</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:convert&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; args;<br><br>  <span class="hljs-keyword">const</span> LoginPage(<span class="hljs-keyword">this</span>.args, &#123;<span class="hljs-keyword">super</span>.key&#125;);<br>  <span class="hljs-meta">@override</span><br>  State&lt;LoginPage&gt; createState() =&gt; _LoginPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_LoginPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">LoginPage</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: Text(<span class="hljs-string">&quot;登录页面&quot;</span>),centerTitle: <span class="hljs-keyword">true</span>,),<br>      body: Column(<br>        children: [<br>          <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;登录页面获取到的参数&quot;</span>,<br>              style: TextStyle(fontSize: <span class="hljs-number">16</span>, color: Color(<span class="hljs-number">0xff333333</span>))),<br>          Text(jsonEncode(widget.args)),<br>          Text(<span class="hljs-string">&quot;name:<span class="hljs-subst">$&#123;widget.args[<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>&quot;</span>),<br>          Text(<span class="hljs-string">&quot;age:<span class="hljs-subst">$&#123;widget.args[<span class="hljs-string">&#x27;age&#x27;</span>]&#125;</span>&quot;</span>),<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="flutter中的处理"><a href="#flutter中的处理" class="headerlink" title="flutter中的处理"></a>flutter中的处理</h3><p>然后我们在flutter的main方法中注册，之后获取要打开的路径，获取对应页面和参数，最后展示出来.<br>我们在<code>main.dart</code>中做一下处理</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:ui&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_router/router_manager.dart&#x27;</span>;<br><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;login_page.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  initRouter(); <span class="hljs-comment">//注册flutter页面</span><br>  <span class="hljs-keyword">var</span> routerName = PlatformDispatcher.instance.defaultRouteName;<br>  debugPrint(<span class="hljs-string">&quot;获取到需要加载的路径：<span class="hljs-subst">$&#123;routerName&#125;</span>&quot;</span>);<br>  runApp(MyApp(path: routerName));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> path;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.path, <span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-comment">// This widget is the root of your application.</span><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: RouterManager.instance.getRouterWidget(path),<br>    );<br><br>  &#125;<br>&#125;<br><span class="hljs-keyword">void</span> initRouter()&#123;<br>  RouterManager.instance.addRouter(<span class="hljs-string">&quot;login&quot;</span>,(args)&#123;<span class="hljs-keyword">return</span> LoginPage(args);&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="鸿蒙侧的处理"><a href="#鸿蒙侧的处理" class="headerlink" title="鸿蒙侧的处理"></a>鸿蒙侧的处理</h3><p>我们先从原生页面点击按钮之后跳转到flutter的登录页面，并且传递一些参数过去。<br>我这里使用HMRouter这个三方库来做的页面跳转。<br>添加flutter模块还是和前面的讲的一样，没啥太大的区别</p><h4 id="EntryAbility"><a href="#EntryAbility" class="headerlink" title="EntryAbility"></a>EntryAbility</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">UIAbility</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos.app.ability.UIAbility&#x27;</span>;<br><span class="hljs-keyword">import</span> hilog <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos.hilog&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AbilityConstant</span>, <span class="hljs-title class_">Want</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.AbilityKit&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UIContext</span>, <span class="hljs-variable language_">window</span>, uiObserver <span class="hljs-keyword">as</span> observer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.ArkUI&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JSON</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.ArkTS&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HMRouterMgr</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@hadss/hmrouter&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ExclusiveAppComponent</span>, <span class="hljs-title class_">FlutterManager</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EntryAbility</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">UIAbility</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExclusiveAppComponent</span>&lt;<span class="hljs-title class_">UIAbility</span>&gt;&#123;<br><br>  <span class="hljs-title function_">detachFromFlutterEngine</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br>  <span class="hljs-title function_">getAppComponent</span>(): <span class="hljs-title class_">UIAbility</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>  &#125;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">uiContext</span>: <span class="hljs-title class_">UIContext</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-title function_">onCreate</span>(<span class="hljs-attr">want</span>: <span class="hljs-title class_">Want</span>, <span class="hljs-attr">launchParam</span>: <span class="hljs-title class_">AbilityConstant</span>.<span class="hljs-property">LaunchParam</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">init</span>(&#123;<br>      <span class="hljs-attr">context</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span><br>    &#125;)<br>    <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">pushUIAbility</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br><br>  <span class="hljs-title function_">onDestroy</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">popUIAbility</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">onWindowStageCreate</span>(<span class="hljs-attr">windowStage</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">WindowStage</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">pushWindowStage</span>(<span class="hljs-variable language_">this</span>, windowStage);<br><br>    windowStage.<span class="hljs-title function_">loadContent</span>(<span class="hljs-string">&#x27;pages/Index&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// windowStage.loadContent(&#x27;pages/tel_inquiry_waiting_page/index&#x27;, (err) =&gt; &#123;</span><br>      <span class="hljs-keyword">if</span> (err.<span class="hljs-property">code</span>) &#123;<br>        hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x0000</span>, <span class="hljs-string">&#x27;testTag&#x27;</span>, <span class="hljs-string">&#x27;Failed to load the content. Cause: %&#123;public&#125;s&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err) ?? <span class="hljs-string">&#x27;&#x27;</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">onWindowStageDestroy</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">popWindowStage</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">// Main window is destroyed, release UI related resources</span><br>    hilog.<span class="hljs-title function_">info</span>(<span class="hljs-number">0x0000</span>, <span class="hljs-string">&#x27;testTag&#x27;</span>, <span class="hljs-string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="hljs-string">&#x27;Ability onWindowStageDestroy&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">uiContext</span>) &#123;<br>      observer.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;routerPageUpdate&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">uiContext</span>);<br>    &#125;<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="index-ets"><a href="#index-ets" class="headerlink" title="index.ets"></a>index.ets</h4><p>主页</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HMDefaultGlobalAnimator</span>, <span class="hljs-title class_">HMNavigation</span>, <span class="hljs-title class_">HMRouterMgr</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@hadss/hmrouter&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AttributeUpdater</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.ArkUI&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FlutterMainPage</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./flutter/FlutterMainPage&#x27;</span>;<br><br><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">Index</span> &#123;<br><br>  <span class="hljs-attr">modifier</span>: <span class="hljs-title class_">NavModifier</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NavModifier</span>();<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>()&#123;<br>      <span class="hljs-title class_">HMNavigation</span>(&#123;<br>        <span class="hljs-attr">navigationId</span>: <span class="hljs-string">&#x27;mainNavigation&#x27;</span>, <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">standardAnimator</span>: <span class="hljs-title class_">HMDefaultGlobalAnimator</span>.<span class="hljs-property">STANDARD_ANIMATOR</span>,<br>          <span class="hljs-attr">dialogAnimator</span>: <span class="hljs-title class_">HMDefaultGlobalAnimator</span>.<span class="hljs-property">DIALOG_ANIMATOR</span>,<br>          <span class="hljs-attr">modifier</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">modifier</span><br>        &#125;<br>      &#125;)&#123;<br>        <span class="hljs-title class_">Column</span>() &#123;<br><br>          <span class="hljs-title class_">FlutterMainPage</span>()<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NavModifier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AttributeUpdater</span>&lt;<span class="hljs-title class_">NavigationAttribute</span>&gt; &#123;<br>  <span class="hljs-title function_">initializeModifier</span>(<span class="hljs-attr">instance</span>: <span class="hljs-title class_">NavigationAttribute</span>): <span class="hljs-built_in">void</span> &#123;<br>    instance.<span class="hljs-title function_">mode</span>(<span class="hljs-title class_">NavigationMode</span>.<span class="hljs-property">Stack</span>);<br>    instance.<span class="hljs-title function_">navBarWidth</span>(<span class="hljs-string">&#x27;100%&#x27;</span>);<br>    instance.<span class="hljs-title function_">hideTitleBar</span>(<span class="hljs-literal">true</span>);<br>    instance.<span class="hljs-title function_">hideToolBar</span>(<span class="hljs-literal">true</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MyFlutterEntry"><a href="#MyFlutterEntry" class="headerlink" title="MyFlutterEntry"></a>MyFlutterEntry</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">GeneratedPluginRegistrant</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FlutterEngine</span>, <span class="hljs-title class_">FlutterEntry</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos&#x27;</span>;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFlutterEntry</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">FlutterEntry</span> &#123;<br>  <span class="hljs-title function_">configureFlutterEngine</span>(<span class="hljs-attr">flutterEngine</span>: <span class="hljs-title class_">FlutterEngine</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">configureFlutterEngine</span>(flutterEngine)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;MyFlutterEntry configureFlutterEngine&quot;</span>)<br>    <span class="hljs-title class_">GeneratedPluginRegistrant</span>.<span class="hljs-title function_">registerWith</span>(flutterEngine)<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="MyFlutterPage"><a href="#MyFlutterPage" class="headerlink" title="MyFlutterPage"></a>MyFlutterPage</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FlutterManager</span>, <span class="hljs-title class_">FlutterPage</span>, <span class="hljs-title class_">FlutterView</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HMLifecycleState</span>, <span class="hljs-title class_">HMRouter</span>, <span class="hljs-title class_">HMRouterMgr</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@hadss/hmrouter&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MyFlutterEntry</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./MyFlutterEntry&#x27;</span><br><br><span class="hljs-meta">@HMRouter</span>(&#123; <span class="hljs-attr">pageUrl</span>: <span class="hljs-string">&#x27;pages/flutter/MyFlutterPage&#x27;</span> &#125;)<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">export</span> struct <span class="hljs-title class_">MyFlutterPage</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">flutterEntry</span>: <span class="hljs-title class_">MyFlutterEntry</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">private</span> flutterView?: <span class="hljs-title class_">FlutterView</span><br><br>  <span class="hljs-title function_">aboutToAppear</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">param</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; = <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">getCurrentParam</span>() <span class="hljs-keyword">as</span> <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`MyFlutterPage params <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(param)&#125;</span>`</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFlutterEntry</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>), param)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>.<span class="hljs-title function_">aboutToAppear</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterView</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>.<span class="hljs-title function_">getFlutterView</span>()<br>    <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">getCurrentLifecycleOwner</span>()?.<span class="hljs-title function_">addObserver</span>(<span class="hljs-title class_">HMLifecycleState</span>.<span class="hljs-property">onShown</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>?.<span class="hljs-title function_">onPageShow</span>()<br>      <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">setUseFullScreen</span>(<span class="hljs-literal">true</span>)<br>    &#125;)<br>    <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">getCurrentLifecycleOwner</span>()?.<span class="hljs-title function_">addObserver</span>(<span class="hljs-title class_">HMLifecycleState</span>.<span class="hljs-property">onHidden</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>?.<span class="hljs-title function_">onPageHide</span>()<br>      <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">setUseFullScreen</span>(<span class="hljs-literal">false</span>)<br>    &#125;)<br>    <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">getCurrentLifecycleOwner</span>()?.<span class="hljs-title function_">addObserver</span>(<span class="hljs-title class_">HMLifecycleState</span>.<span class="hljs-property">onBackPressed</span>, (): <span class="hljs-function"><span class="hljs-params">boolean</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">// this.flutterEntry?.onBackPress()</span><br>      <span class="hljs-comment">// (getContext(this) as common.UIAbilityContext).eventHub.emit(&#x27;EVENT_BACK_PRESS&#x27;)</span><br>      <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">pop</span>()<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">aboutToDisappear</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>?.<span class="hljs-title function_">aboutToDisappear</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br><br>      <span class="hljs-title class_">FlutterPage</span>(&#123; <span class="hljs-attr">viewId</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterView</span>?.<span class="hljs-title function_">getId</span>() &#125;).<span class="hljs-title function_">expandSafeArea</span>([<span class="hljs-title class_">SafeAreaType</span>.<span class="hljs-property">SYSTEM</span>], [<span class="hljs-title class_">SafeAreaEdge</span>.<span class="hljs-property">BOTTOM</span>])<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FlutterMainPage"><a href="#FlutterMainPage" class="headerlink" title="FlutterMainPage"></a>FlutterMainPage</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HMPopInfo</span>, <span class="hljs-title class_">HMRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@hadss/hmrouter&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ActionBar</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../comm/ActionBar&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FlutterPath</span>, <span class="hljs-title class_">MyFlutterRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./MyFlutterRouter&#x27;</span>;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">export</span> struct <span class="hljs-title class_">FlutterMainPage</span> &#123;<br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">message</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">popResult</span>:<span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-title class_">Object</span>&gt; | <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">ActionBar</span>(&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&quot;flutter测试页面&quot;</span>&#125;)<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;HMRouter flutter&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-title class_">MyFlutterRouter</span>.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">FlutterPath</span>.<span class="hljs-property">LOGIN</span>, &#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;harmonyos&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">3</span> &#125;, &#123;<br>          <span class="hljs-attr">onResult</span>: <span class="hljs-function">(<span class="hljs-params">popInfo: HMPopInfo</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`FlutterMainPage.push result <span class="hljs-subst">$&#123;popInfo.result&#125;</span>`</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">popResult</span> = popInfo.<span class="hljs-property">result</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-title class_">Object</span>&gt;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">popResult</span>)&#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;&quot;</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">popResult</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value,key</span>)=&gt;</span>&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> += <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> : <span class="hljs-subst">$&#123;value&#125;</span> \n`</span><br>              &#125;)<br>            &#125;<br>          &#125;,<br>          <span class="hljs-attr">onArrival</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`FlutterMainPage.push onArrival `</span>)<br>          &#125;,<br>          <span class="hljs-attr">onLost</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`FlutterMainPage.push onLost `</span>)<br>          &#125;<br>        &#125;)<br>      &#125;)<br><br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&quot;页面返回携带的参数&quot;</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>)<br><br>    &#125;<br>    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MyFlutterRouter"><a href="#MyFlutterRouter" class="headerlink" title="MyFlutterRouter"></a>MyFlutterRouter</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HMPopInfo</span>, <span class="hljs-title class_">HMRouterMgr</span>, <span class="hljs-title class_">HMRouterPathCallback</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@hadss/hmrouter&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JSON</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.ArkTS&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FlutterAbilityLaunchConfigs</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/flutter_ohos&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">FlutterPath</span> &#123;<br>  <span class="hljs-variable constant_">MAIN</span> = <span class="hljs-string">&#x27;main&#x27;</span>,<br>  <span class="hljs-variable constant_">LOGIN</span> = <span class="hljs-string">&#x27;login&#x27;</span>,<br>  <span class="hljs-variable constant_">TEST</span> = <span class="hljs-string">&#x27;test&#x27;</span>,<br>  <span class="hljs-variable constant_">ROOT</span> = <span class="hljs-string">&#x27;/&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFlutterRouter</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">path: FlutterPath, params: Record&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">Object</span>&gt; | <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>,</span><br><span class="hljs-params">    callback?: HMRouterPathCallback</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">target</span>: <span class="hljs-built_in">string</span> = path.<span class="hljs-title function_">toString</span>()<br>    <span class="hljs-keyword">if</span> (params) &#123;<br>      target = <span class="hljs-string">`<span class="hljs-subst">$&#123;target&#125;</span>?<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(params)&#125;</span>`</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">routerParams</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; = &#123;&#125;<br>    routerParams[<span class="hljs-title class_">FlutterAbilityLaunchConfigs</span>.<span class="hljs-property">EXTRA_INITIAL_ROUTE</span>] = target;<br><br>    <span class="hljs-title class_">HMRouterMgr</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">pageUrl</span>: <span class="hljs-string">&#x27;pages/flutter/MyFlutterPage&#x27;</span>, <span class="hljs-attr">param</span>: routerParams &#125;, &#123;<br>      <span class="hljs-attr">onResult</span>: <span class="hljs-function">(<span class="hljs-params">popInfo: HMPopInfo</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`获取到页面返回时携带的参数 <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(popInfo.result)&#125;</span>`</span>)<br>        <span class="hljs-keyword">if</span> (callback &amp;&amp; callback.<span class="hljs-property">onResult</span>) &#123;<br>          callback.<span class="hljs-title function_">onResult</span>(popInfo)<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">onArrival</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (callback &amp;&amp; callback.<span class="hljs-property">onArrival</span>) &#123;<br>          callback.<span class="hljs-title function_">onArrival</span>()<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">onLost</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (callback &amp;&amp; callback.<span class="hljs-property">onLost</span>) &#123;<br>          callback.<span class="hljs-title function_">onLost</span>()<br>        &#125;<br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>这样我们就完成了从native侧跳转到指定页面，并且还可以将参数传递过去。<br>这里需要特别注意的是在<code>MyFlutterRouter</code>中，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">routerParams</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; = &#123;&#125;<br>routerParams[<span class="hljs-title class_">FlutterAbilityLaunchConfigs</span>.<span class="hljs-property">EXTRA_INITIAL_ROUTE</span>] = target;<br></code></pre></td></tr></table></figure><p>这里的参数key用的是<code>FlutterAbilityLaunchConfigs.EXTRA_INITIAL_ROUTE</code>,值为<code>route</code>。<br>这是因为在<code>FlutterEntry</code>中<code>getInitialRoute</code>方法中，获取初始路径使用的就是这个</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">getInitialRoute</span>(): <span class="hljs-built_in">string</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">parameters</span>![<span class="hljs-title class_">FlutterAbilityLaunchConfigs</span>.<span class="hljs-property">EXTRA_INITIAL_ROUTE</span>]) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">parameters</span>![<span class="hljs-title class_">FlutterAbilityLaunchConfigs</span>.<span class="hljs-property">EXTRA_INITIAL_ROUTE</span>] <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>看下效果图：</p><p><img src="/image/harmony_flutter/harmony_flutter_initial_route.gif" alt="鸿蒙打开flutter指定页面并且传递参数"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们在前面介绍了如何搭建环境，如何向现有鸿蒙工程中添加 flutter 模块，这篇文章中我们来看一下参数传递问题。&lt;br&gt;我们先看一下有哪些</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-flutter-环境搭建和第一个HelloWorld</title>
    <link href="https://blog.huangyuanlove.com/2025/05/27/%E9%B8%BF%E8%92%99-flutter-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E7%AC%AC%E4%B8%80%E4%B8%AAHelloWorld/"/>
    <id>https://blog.huangyuanlove.com/2025/05/27/%E9%B8%BF%E8%92%99-flutter-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E7%AC%AC%E4%B8%80%E4%B8%AAHelloWorld/</id>
    <published>2025-05-27T07:59:28.000Z</published>
    <updated>2025-06-16T07:09:50.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正在慢慢的补齐鸿蒙版本应用的功能，之前 Android 和 iOS 上有一部分功能是 flutter 实现的，现在需要把相关代码移植到鸿蒙应用中。慢慢来，不着急。<br>由于目前只有64位引擎，暂不支持模拟器，需要使用真机调试。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>现存的flutter 相关代码使用的是 flutter3.0.2 版本，正好趁这个机会升级一下版本。<br>由于鸿蒙版的flutter 3.22.0 已经 release，直接升级到这个版本。<br>这里插播一条消息</p><blockquote><p>所有鸿蒙相关开源仓后续均迁移至GitCode平台，SIG、TPC组织已完成迁移，OpenHarmony主组织仓也即将完成迁移<br>SDK:<br>gitcode分支（官方分支，持续更新）：<br><a href="https://gitcode.com/openharmony-sig/flutter_flutter/tree/3.22.0-ohos">https://gitcode.com/openharmony-sig/flutter_flutter/tree/3.22.0-ohos</a><br>原始仓库<br><a href="https://gitee.com/harmonycommando_flutter/flutter">https://gitee.com/harmonycommando_flutter/flutter</a><br>Engine:<br>gitcode分支（官方分支，持续更新）：<br><a href="https://gitcode.com/openharmony-sig/flutter_engine/tree/oh-3.22.0">https://gitcode.com/openharmony-sig/flutter_engine/tree/oh-3.22.0</a><br>原始仓库<br><a href="https://gitee.com/harmonycommando_flutter/flutter_engine">https://gitee.com/harmonycommando_flutter/flutter_engine</a></p></blockquote><h3 id="鸿蒙环境"><a href="#鸿蒙环境" class="headerlink" title="鸿蒙环境"></a>鸿蒙环境</h3><p>鸿蒙的环境很简单，下载最新的 DevEco 安装好就行了。这样就包含了开发鸿蒙所需要的所有工具。<br>但使用 flutter 混编时还需要将几个工具路径添加的环境变量里面。<br>当然了，不下载 DevEco，下载对应的<code>Command Line Tools for HarmonyOS </code>也可以。但是免不了会编写一些 ArkTS 相关的鸿蒙代码，比如录音、相机的调用等，目前来看还没有其他的IDE 支持 ArkTS 的语法，所以，还是建议安装 DevEco。<br>需要添加到环境变量的工具。<br>mac上需要配置这些</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">export TOOL_HOME=/Applications/DevEco-Studio.app/Contents # mac环境<br>export DEVECO_SDK_HOME=$TOOL_HOME/sdk # command-line-tools/sdk<br>export PATH=$TOOL_HOME/tools/ohpm/bin:$PATH # command-line-tools/ohpm/bin<br>export PATH=$TOOL_HOME/tools/hvigor/bin:$PATH # command-line-tools/hvigor/bin<br>export PATH=$TOOL_HOME/tools/node/bin:$PATH # command-line-tools/tool/node/bin<br></code></pre></td></tr></table></figure><p>在 windows 上有些修改，<br>需要配置一个变量名为<code>HOS_SDK_HOME</code>,值为sdk路径的变量，比如我是安装的DevEco，sdk路径就是<code>D:\DevEco\DevEco Studio\sdk</code><br><img src="/image/harmony_flutter/HOS_SDK_HOME.png">。<br>然后我们再将<code>D:\DevEco\DevEco Studio\tools\hvigor\bin</code>、<code>D:\DevEco\DevEco Studio\tools\node</code>、<code>D:\DevEco\DevEco Studio\tools\ohpm\bin</code>添加到环境变量。</p><p><strong>注意注意注意</strong><br>如用下载的是flutter分支是<code>3.22.0-ohos</code>,则环境变量名字为<code>DEVECO_SDK_HOME</code></p><h3 id="flutter-环境"><a href="#flutter-环境" class="headerlink" title="flutter 环境"></a>flutter 环境</h3><p>克隆(flutter_flutter)[<a href="https://gitcode.com/openharmony-tpc/flutter_flutter/tree/3.22.0-ohos]%E4%BB%93%E5%BA%93%E7%9A%84%603.22.0-ohos%60%E5%88%86%E6%94%AF%E5%B0%B1%E5%8F%AF%E4%BB%A5%E3%80%82">https://gitcode.com/openharmony-tpc/flutter_flutter/tree/3.22.0-ohos]仓库的`3.22.0-ohos`分支就可以。</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone -b 3.22.1-ohos-1.0.1 https://gitcode.com/openharmony-sig/flutter_flutter.git<br></code></pre></td></tr></table></figure><p>下载完成后，将<code>flutter</code>添加到环境变量<br>mac环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=&lt;flutter_flutter path&gt;/bin:$PATH<br>export PUB_HOSTED_URL=https://pub.flutter-io.cn  #国内的镜像，也可以使用其他镜像，比如清华镜像源<br>export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn #国内的镜像，也可以使用其他镜像，比如清华镜像源<br></code></pre></td></tr></table></figure><p>windows环境变量，也是将<code>&lt;flutter_flutter path&gt;\bin</code>添加到环境变量。然后再分别新建<code>PUB_HOSTED_URL</code>、<code>FLUTTER_STORAGE_BASE_URL</code>添加到环境变量。</p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>命令行执行一下<code>flutter doctor -v</code>,如果能找到能执行成功，并且Futter与OpenHarmony应都为ok标识，若两处提示缺少环境，按提示补上相应环境即可。</p><p><img src="/image/harmony_flutter/harmony_flutter_doctor_mac.png" alt="harmony_flutter_doctor_mac"></p><h2 id="第一个-HelloWorld"><a href="#第一个-HelloWorld" class="headerlink" title="第一个 HelloWorld"></a>第一个 HelloWorld</h2><p>创建项目的命令和官方的 flutter 是一样的，只不过是多了一个鸿蒙平台的支持。<br>我们创建一个支持 Android、iOS 和鸿蒙的 flutter 项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">flutter create  --platforms android,ios,ohos  -i objc -a java ohflutter_3221<br></code></pre></td></tr></table></figure><p>可以指定 iOS 平台使用 oc,Android平台使用 Java 语言，鸿蒙平台不需要指定，只有一个 ArkTS 可用<br>执行的结果也没什么两样,只不过在对应的项目文件夹下多了一个<code>ohos</code>文件夹，和 <code>android</code>、<code>ios</code>文件夹一样，用来存放原生相关的代码<br>然后我们连接好设备，在工程文件夹下执行<code>flutter run</code>，会提示我们需要配置调试签名。<br><img src="/image/harmony_flutter/oh_flutter_config_sign.png" alt="oh_flutter_config_sign">。<br>这里我们需要注册一个华为开发者账号，然后按照提示进行签名。<br>配置完签名之后，我们再次执行<code>flutter run</code></p><p>看下效果<br><img src="/image/harmony_flutter/oh_flutter_hello_world.gif" alt="运行结果"></p><h2 id="FlutterPage"><a href="#FlutterPage" class="headerlink" title="FlutterPage"></a>FlutterPage</h2><p>我们可以使用DevEcoStudio打开项目下的ohos文件夹中的项目看一下，其中的<code>EntryAbility</code>继承了<code>FlutterAbility</code>,在FlutterAbility中，我们可以看到<code>FlutterManager</code>，<code>FlutterView</code>,以及在<code>onWindowStageCreate</code>方法中默认加载的<code>pages/Index</code>。<br>因此我们如果想要向现有鸿蒙工程中添加flutter模块时，借鉴一下这里面的写法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;正在慢慢的补齐鸿蒙版本应用的功能，之前 Android 和 iOS 上有一部分功能是 flutter 实现的，现在需要把相关代码移植到鸿蒙应</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-卡证识别</title>
    <link href="https://blog.huangyuanlove.com/2025/05/06/%E9%B8%BF%E8%92%99-%E5%8D%A1%E8%AF%81%E8%AF%86%E5%88%AB/"/>
    <id>https://blog.huangyuanlove.com/2025/05/06/%E9%B8%BF%E8%92%99-%E5%8D%A1%E8%AF%81%E8%AF%86%E5%88%AB/</id>
    <published>2025-05-06T11:14:38.000Z</published>
    <updated>2025-05-12T01:27:12.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在移动端实名认证的过程中，需要移动端识别图片是不是身份证，并且识别出身份证上的相关信息，上报到服务端，减少后台人工比对的工作量。<br>我们之前是使用的服务端api，将拍好的照片先上传至服务端识别，然后由服务端告诉移动端相关信息。在鸿蒙上看到了Vision Kit(场景视觉化服务)中有卡证识别，提供身份证（目前仅支持中国大陆二代身份证，且不包含民汉双文身份证）、行驶证、驾驶证、护照、银行卡等证件的结构化识别服务，满足卡证的自动分类功能，系统可自动判断所属卡证类型并返回结构化信息和卡证图片信息。</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>对于需要填充卡证信息的场景，如身份证、银行卡信息等，可使用卡证识别控件读取OCR（Optical Character Recognition）信息，将结果信息返回后进行填充。支持单独识别正面、反面，或同时进行双面识别。<br>我们先来看一下身份证识别相关配置。<br>使用的控件是<code>CardRecognition</code>，直接嵌入到页面上就可以该控件会直接调用相机进行识别，这里不需要我们申请权限，类似与 SaveButton 这种安全控件。<br>使用之后会被应用隐私数据访问记录中记录下来。<br>使用该控件之前需要先判断下设备是否支持.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">if</span>(<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&quot;SystemCapability.AI.Component.CardRecognition&quot;</span>))&#123;<br>     <span class="hljs-title class_">CardRecognition</span>(&#123;<br>       .....<br>     &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>据其他开发者反馈，某些设备上这个canIUse方法会失效，不过我还没遇到过。<br>接下来配置一下需要用到的属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">CardRecognition</span>(&#123;<br>    <span class="hljs-attr">supportType</span>:<span class="hljs-title class_">CardType</span>.<span class="hljs-property">CARD_ID</span>,<br>    <span class="hljs-attr">cardSide</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">cardSide</span>,<br>    <span class="hljs-attr">cardRecognitionConfig</span>:&#123;<br>    <span class="hljs-attr">isPhotoSelectionSupported</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">defaultShootingMode</span>:<span class="hljs-title class_">ShootingMode</span>.<span class="hljs-property">AUTO</span><br>    &#125;,<br>    <span class="hljs-attr">callback</span>:<span class="hljs-title function_">async</span>(<span class="hljs-attr">params</span>:<span class="hljs-title class_">CallbackParam</span>)=&gt;&#123;<br>    <span class="hljs-keyword">if</span>(params.<span class="hljs-property">code</span> == <span class="hljs-number">200</span> &amp;&amp; params.<span class="hljs-property">cardInfo</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;识别成功&quot;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123; <span class="hljs-built_in">JSON</span>.stringify(params.cardInfo)&#125;</span>`</span>)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cardSide</span> == <span class="hljs-title class_">CardSide</span>.<span class="hljs-property">FRONT</span>)&#123;<br>        emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;id_card_recognition&quot;</span>,&#123;<span class="hljs-attr">data</span>:params.<span class="hljs-property">cardInfo</span>.<span class="hljs-property">front</span>&#125;)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;id_card_recognition&quot;</span>,&#123;<span class="hljs-attr">data</span>:params.<span class="hljs-property">cardInfo</span>.<span class="hljs-property">back</span>&#125;)<br>        &#125;<br>        router.<span class="hljs-title function_">back</span>()<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;识别失败&quot;</span>)<br>        promptAction.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;识别失败&quot;</span>&#125;)<br>        router.<span class="hljs-title function_">back</span>()<br>    &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>这里的<code>supportType</code>和<code>callback</code>属性是必填项。其中<code>supportType</code>属性我们这里设置的是<code>CardType.CARD_ID</code>,表示要识别身份证信息，注意导入包时 <code>import &#123; CardType &#125; from &#39;@hms.ai.CardRecognition&#39;;</code>，不要搞混了。<br>这里还支持其他属性，可以在官网查询<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/vision-card-recognition#section156871424104118">CardType</a><br>然后是cardSide属性，这个是选填的，虽然文档上说默认值为<code>CardSide.DEFAULT</code>,解释也是说<code>卡证默认面。如身份证为人像面，其他卡证为正面。</code>,但在实际操作中会发现，使用默认值做身份证识别的时候，是需要识别完正面再识别反面。<br>但我们这里希望每次只识别一面就行。因此我们从上个页面传入参数，来表示我们需要识别哪个。</p><p>在<code>cardRecognitionConfig</code>属性中，<code>defaultShootingMode</code>设置为自动拍照，也就是当识别到是身份证时就直接拍照了，不需要手动点拍照之后再进行识别。<br><code>isPhotoSelectionSupported</code>这个属性就很好理解了，为true会在页面左下角显示图库按钮，支持从图库选择图片进行识别。</p><p>最后就是<code>callback</code>了，有一个类型为<code>CallbackParam</code>的参数，这个参数对象只有三个属性：<code>code:number</code>、<code>cardType:CardType</code>、<code>cardInfo:Record&lt;string, Record&lt;string, string&gt;&gt;</code>。当code值为200时表示识别成功，我们可以在cardInfo中获取识别到的信息。</p><div><img src='/image/HarmonyOS/身份证识别过程.png' width='30%' heigh='30%'/><img src='/image/HarmonyOS/识别成功.png' width='30%' heigh='30%'/><img src='/image/HarmonyOS/识别结果.png' width='30%' heigh='30%'/></div><p>第一张图就是识别过程中截取的一张图，会提示<code>请对准身份证人面像</code>，下面会有一个<strong>安全访问</strong>标识，该标识会自动消失。当检测到画面中有身份证时，会有边框提示。识别成功后会捕捉一张身份证的图片，该图片对应的字段是<code>cardImageUri</code>,也就是最右边图片中的中间那张图，在最右边这张图上我们也可以看到常用的能识别到的字段。<br>当然对于银行卡识别也是一样的，具体的取值可以看官网介绍<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/vision-card-recognition#section911365315328">cardInfo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在移动端实名认证的过程中，需要移动端识别图片是不是身份证，并且识别出身份证上的相关信息，上报到服务端，减少后台人工比对的工作量。&lt;br&gt;我们</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-flutter-如何向现有鸿蒙项目中添加flutter模块</title>
    <link href="https://blog.huangyuanlove.com/2025/04/29/%E9%B8%BF%E8%92%99-flutter-%E5%A6%82%E4%BD%95%E5%90%91%E7%8E%B0%E6%9C%89%E9%B8%BF%E8%92%99%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0flutter%E6%A8%A1%E5%9D%97/"/>
    <id>https://blog.huangyuanlove.com/2025/04/29/%E9%B8%BF%E8%92%99-flutter-%E5%A6%82%E4%BD%95%E5%90%91%E7%8E%B0%E6%9C%89%E9%B8%BF%E8%92%99%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0flutter%E6%A8%A1%E5%9D%97/</id>
    <published>2025-04-29T02:37:47.000Z</published>
    <updated>2025-06-16T07:09:50.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在版本迭代时，有部分新增的功能，需要开发新的业务模块，这里希望使用跨平台框架，实现代码Android、iOS、HarmonyOS 复用。之前的部分业务使用flutter 开发，HarmonyOS 也支持 flutter 的接入，因此，这次依然使用选择使用 flutter。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>在上一篇中详细介绍了如何安装和配置环境，flutter使用的是<code>3.22.0-ohos</code>的版本，如果需要使用多个flutter版本的话，可以使用fvm来管理和切换多个版本</p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><h3 id="创建-flutter-模块"><a href="#创建-flutter-模块" class="headerlink" title="创建 flutter 模块"></a>创建 flutter 模块</h3><p>在鸿蒙项目文件夹中创建flutter module</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">为方便代码管理，将flutter代码放到工程目录内统一管理</span><br>cd HarmonyProject<br><span class="hljs-meta prompt_"># </span><span class="language-bash">1.以module形式集成到项目，创建flutter_module</span><br>flutter create -t module my_flutter_module<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.构建har文件,注意，这里需要限制性一下flutter的构建，否则是没有har文件的</span><br>cd flutter_module<br>flutter build har --release<br></code></pre></td></tr></table></figure><h3 id="引用-flutter"><a href="#引用-flutter" class="headerlink" title="引用 flutter"></a>引用 flutter</h3><p>这里有两种方案，直接应用源码和引用har文件。<br>我们可以在开发阶段引用源码，在测试发版时引用 har 文件。</p><h4 id="引用源码"><a href="#引用源码" class="headerlink" title="引用源码"></a>引用源码</h4><p>修改鸿蒙工程根目录下的<code>oh-package.json5</code>文件并添加对应的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json5">&quot;dependencies&quot;:&#123;<br>    &quot;@ohos/flutter_ohos&quot;: &quot;file:./my_flutter_module/.ohos/har/flutter.har&quot;,<br>    &quot;@ohos/flutter_module&quot;: &quot;./my_flutter_module/.ohos/flutter_module&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改项目工程下的<code>build-profile.json5</code>文件，添加一个新的module</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 以下为新增内容</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;flutter_module&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;srcPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./my_flutter_module/.ohos/flutter_module&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;targets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;applyToProducts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;default&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="引用har文件"><a href="#引用har文件" class="headerlink" title="引用har文件"></a>引用har文件</h4><p>在测试发版的时候先将 flutter 模块打成 har 包，复制到鸿蒙项目中，直接引用 har 文件就好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">2.构建har文件</span><br>cd my_flutter_module<br>flutter build har --release<br></code></pre></td></tr></table></figure><p>我们可以在<code>my_flutter_module/.ohos/har</code>文件夹下看到两个har文件： <code>flutter.har</code>和<code>flutter_module.har</code>。<br>我们可以将这两个文件复制到harmony项目中直接应用。</p><p>这里有个小问题，flutter 项目引入了三方库时，会生成多个 har 文件，在鸿蒙工程内运行时会报错，<br>我们可以添加<code>overrides</code>声明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;overrides&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@ohos/flutter_ohos&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:./har/flutter.har&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fluttertoast&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:har/fluttertoast.har&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;path_provider_ohos&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:har/path_provider_ohos.har&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;permission_handler_ohos&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:har/permission_handler_ohos.har&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>需要注意的是，在切换引用方式的时候，记得修改工程下的<code>build-profile.json5</code>文件。</p><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>我们这里使用FlutterEntry来展示flutter相关页面。</p><h3 id="EntryAbility-可以继承-UIAbility"><a href="#EntryAbility-可以继承-UIAbility" class="headerlink" title="EntryAbility 可以继承 UIAbility"></a>EntryAbility 可以继承 UIAbility</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EntryAbility</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">UIAbility</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExclusiveAppComponent</span>&lt;<span class="hljs-title class_">UIAbility</span>&gt; &#123;<br><br>  <span class="hljs-title function_">detachFromFlutterEngine</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-comment">// throw new Error(&#x27;Method not implemented.&#x27;);</span><br>  &#125;<br><br>  <span class="hljs-title function_">getAppComponent</span>(): <span class="hljs-title class_">UIAbility</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">onCreate</span>(<span class="hljs-attr">want</span>: <span class="hljs-title class_">Want</span>, <span class="hljs-attr">launchParam</span>: <span class="hljs-title class_">AbilityConstant</span>.<span class="hljs-property">LaunchParam</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">pushUIAbility</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">onDestroy</span>(): <span class="hljs-built_in">void</span> | <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; &#123;<br>    <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">popUIAbility</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">onWindowStageCreate</span>(<span class="hljs-attr">windowStage</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">WindowStage</span>): <span class="hljs-built_in">void</span> &#123;<br>    windowStage.<span class="hljs-title function_">getMainWindowSync</span>().<span class="hljs-title function_">setWindowLayoutFullScreen</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">pushWindowStage</span>(<span class="hljs-variable language_">this</span>, windowStage);<br>    windowStage.<span class="hljs-title function_">loadContent</span>(<span class="hljs-string">&#x27;pages/Index&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">onWindowStageDestroy</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">popWindowStage</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="继承-FlutterEntry-并注册插件"><a href="#继承-FlutterEntry-并注册插件" class="headerlink" title="继承 FlutterEntry 并注册插件"></a>继承 FlutterEntry 并注册插件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFlutterEntry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">FlutterEntry</span> &#123;<br>  <span class="hljs-title function_">configureFlutterEngine</span>(<span class="hljs-attr">flutterEngine</span>: <span class="hljs-title class_">FlutterEngine</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">configureFlutterEngine</span>(flutterEngine);<br>    <span class="hljs-title class_">GeneratedPluginRegistrant</span>.<span class="hljs-title function_">registerWith</span>(flutterEngine);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">delegate</span>?.<span class="hljs-title function_">addPlugin</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BatteryPlugin</span>());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FlutterEntry-需要和-FlutterView-一起使用"><a href="#FlutterEntry-需要和-FlutterView-一起使用" class="headerlink" title="FlutterEntry 需要和 FlutterView 一起使用"></a>FlutterEntry 需要和 FlutterView 一起使用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">Index</span> &#123;<br>  <span class="hljs-keyword">private</span> context = <span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-keyword">as</span> common.<span class="hljs-property">UIAbilityContext</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">flutterEntry</span>: <span class="hljs-title class_">FlutterEntry</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">private</span> flutterView?: <span class="hljs-title class_">FlutterView</span><br><br>  <span class="hljs-title function_">aboutToAppear</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;Flutter&quot;</span>, <span class="hljs-string">&quot;Index aboutToAppear===&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFlutterEntry</span>(<span class="hljs-title function_">getContext</span>(<span class="hljs-variable language_">this</span>))<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>.<span class="hljs-title function_">aboutToAppear</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterView</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>.<span class="hljs-title function_">getFlutterView</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">aboutToDisappear</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;Flutter&quot;</span>, <span class="hljs-string">&quot;Index aboutToDisappear===&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>?.<span class="hljs-title function_">aboutToDisappear</span>()<br>  &#125;<br><br>  <span class="hljs-comment">// Navigation的生命周期是onShown</span><br>  <span class="hljs-title function_">onPageShow</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;Flutter&quot;</span>, <span class="hljs-string">&quot;Index onPageShow===&quot;</span>);<br>     <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">setUseFullScreen</span>(<span class="hljs-literal">true</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>?.<span class="hljs-title function_">onPageShow</span>()<br>  &#125;<br><br>  <span class="hljs-comment">// Navigation的生命周期是onHidden</span><br>  <span class="hljs-title function_">onPageHide</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">d</span>(<span class="hljs-string">&quot;Flutter&quot;</span>, <span class="hljs-string">&quot;Index onPageHide===&quot;</span>);<br>     <span class="hljs-title class_">FlutterManager</span>.<span class="hljs-title function_">getInstance</span>().<span class="hljs-title function_">setUseFullScreen</span>(<span class="hljs-literal">false</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterEntry</span>?.<span class="hljs-title function_">onPageHide</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Stack</span>() &#123;<br>      <span class="hljs-title class_">FlutterPage</span>(&#123; <span class="hljs-attr">viewId</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">flutterView</span>?.<span class="hljs-title function_">getId</span>() &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">onBackPress</span>(): <span class="hljs-built_in">boolean</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">eventHub</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;EVENT_BACK_PRESS&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>运行后我们使用router跳转到这个页面，发现是可以加载出来的，点击页面按钮行为也是正常的。</p><p><img src="/image/harmony_flutter/flutter_entry_demo.gif" alt="flutter entry示例"></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>接下来我们继续看下路由管理以及参数传递问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在版本迭代时，有部分新增的功能，需要开发新的业务模块，这里希望使用跨平台框架，实现代码Android、iOS、HarmonyOS 复用。之前</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-使用Charles抓包</title>
    <link href="https://blog.huangyuanlove.com/2025/04/20/%E9%B8%BF%E8%92%99-%E4%BD%BF%E7%94%A8Charles%E6%8A%93%E5%8C%85/"/>
    <id>https://blog.huangyuanlove.com/2025/04/20/%E9%B8%BF%E8%92%99-%E4%BD%BF%E7%94%A8Charles%E6%8A%93%E5%8C%85/</id>
    <published>2025-04-20T02:04:25.000Z</published>
    <updated>2025-04-18T08:18:37.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>抓包，对于各位开发者应该不陌生，各种抓包工具应该的都听说过，像 charles、fiddler、Wireshark‌等。在 Android 和 iOS 上抓包都挺简单的，把证书存放到手机上，然后安装一下，网络设置里面配置一下代理，代码里面忽略一下证书校验或者信任一下用户证书就好了。<br>但在鸿蒙手机上，似乎第一步把证书存放到手机上就卡住了一部分人。</p><h2 id="鸿蒙应用中的网络请求"><a href="#鸿蒙应用中的网络请求" class="headerlink" title="鸿蒙应用中的网络请求"></a>鸿蒙应用中的网络请求</h2><p>在开发文档中有提到两种网络请求的方法，一开始是用 http，再后来推荐使用 rcp。现在上架的应用估计大部分是用的 http 或者axios 这个封装好的框架进行的网络请求。  </p><h3 id="rcp-抓包"><a href="#rcp-抓包" class="headerlink" title="rcp 抓包"></a>rcp 抓包</h3><p>在官方文档中，并没有找到http 如何忽略证书校验或者信任用户证书，只翻到了如何使用自定义证书。<br>嘿嘿，问题不大，因为我们用的是 rcp 做的网络请求，自己封装了一下。并且在官方文档中找到了跳过证书校验的配置：</p><blockquote><p>SecurityConfiguration接口允许开发人员在会话中配置与安全相关的设置，包括证书和服务器身份验证。</p></blockquote><p>其中有个属性：remoteValidation，解释说明是证书颁发机构（CA），用于验证远程服务器的身份。默认值为’system’。<br>我们可以配置的类型有：<code>&quot;system&quot;</code>、<code>&quot;skip&quot;</code>、<code>CertificateAuthority</code>、<code>ValidationCallback</code>，其中默认值为’system’。<br>如果未设置此字段，系统CA将被用于验证远程服务器的标识。<br>‘system’：表示使用系统CA配置。<br>‘skip’：跳过验证。<br>CertificateAuthority：证书颁发机构（CA）验证。<br>ValidationCallback：自定义证书校验。  </p><p>这不就简单了么，整个 demo 试一下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;charles抓包 rcp&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">const</span> session = rcp.<span class="hljs-title function_">createSession</span>();<br>  <span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> rcp.<span class="hljs-title class_">Request</span>(<span class="hljs-string">&#x27;https:/xxxxxx&#x27;</span>,<span class="hljs-string">&#x27;GET&#x27;</span>);<br>  request.<span class="hljs-property">configuration</span> = &#123;<br>    <span class="hljs-attr">security</span>: &#123;<br>      <span class="hljs-attr">remoteValidation</span>: <span class="hljs-string">&#x27;skip&#x27;</span>,<br>    &#125;,<br>  &#125;;<br>  session.<span class="hljs-title function_">fetch</span>(request).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">rep: rcp.Response</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">`Response succeeded: <span class="hljs-subst">$&#123;rep&#125;</span>`</span>);<br>  &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err: BusinessError</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Response err: Code is <span class="hljs-subst">$&#123;err.code&#125;</span>, message is <span class="hljs-subst">$&#123;err.message&#125;</span>`</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>打开抓包软件，手机 wifi 设置里面配置一下代理，就可以看到能抓包了，甚至不需要安装证书。</p><h3 id="http-抓包"><a href="#http-抓包" class="headerlink" title="http 抓包"></a>http 抓包</h3><p>由于没有找到如何忽略证书，就和 Android 抓包一样，先把证书安装到手机上。<br>在抓包软件中导出证书，注意查看一下<strong>证书的有效期</strong>，当然安装抓包软件的电脑上也需要安装一下证书，并且需要信任才行。<br>然后使用<code>hdc file send</code>将证书发送到手机上，问题就在这里，不知道手机的文件夹目录是啥。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdc file send charles-ssl-proxying-certificate.pem /storage/media/100/local/files/Docs/Download/charles.pem<br></code></pre></td></tr></table></figure><p>这里的目标路径为<code>/storage/media/100/local/files/Docs/Download/</code>,也就是我们在手机文件管理里面看到的<code>Download</code>文件夹。这里需要注意的是，需要在后面加目标文件的名字,这也是和Android的<code>adb psuh</code>最大的区别，adb 只需要指定到文件夹就好，相当于把文件复制到这个文件夹中，复制之后的名字可以不指定。<br>我们可以在 DevEco 的右下角<code>Device File Browser</code>把文件夹展开看一下：<br><img src="/image/HarmonyOS/harmony_os_next_file_system.png"></p><p>然后我们打开证书安装页面：<code>hdc shell aa start -a MainAbility -b com.ohos.certmanager </code>,或者在手机设置–&gt;隐私和安全–&gt;高级–&gt;证书与凭据–&gt;从存储设备安装,点击 CA 证书，会弹出警告弹窗，我们点击继续，找到我们刚才发送到设备的证书，完成安装  </p><p><img src="/image/HarmonyOS/install_pem_tip.png"></p><p>随后撸一坨代码测试一下  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;charles抓包 http&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">let</span> httpRequest = http.<span class="hljs-title function_">createHttp</span>();<br>  httpRequest.<span class="hljs-title function_">request</span>(<br>    <span class="hljs-comment">// 填写HTTP请求的URL地址，可以带参数也可以不带参数。URL地址需要开发者自定义。请求的参数可以在extraData中指定</span><br>    <span class="hljs-string">&quot;https://biztest.chunyutianxia.com/user_operation/app_interface/home_page/?app=0&amp;platform=android&amp;systemVer=10&amp;version=10.6.12&amp;app_ver=Build+10.6.12.250402&amp;cyudId=53f38352-da64-4dac-b4e0-1b0cc681f6a0&amp;secureId=e9ddd1fd-fffe-8a9f-57f7-defffdca8058&amp;installId=1742785027244&amp;phoneType=COL-AL10_by_HUAWEI&amp;vendor=chunyu&amp;screen_height=2060&amp;screen_width=1080&quot;</span>,<br>    &#123;<br>      <span class="hljs-attr">method</span>: http.<span class="hljs-property">RequestMethod</span>.<span class="hljs-property">GET</span>, <span class="hljs-comment">// 可选，默认为http.RequestMethod.GET</span><br>      <span class="hljs-comment">// 开发者根据自身业务需要添加header字段</span><br>      <span class="hljs-attr">header</span>: &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>      &#125;,<br><br>      <span class="hljs-attr">expectDataType</span>: http.<span class="hljs-property">HttpDataType</span>.<span class="hljs-property">STRING</span>, <span class="hljs-comment">// 可选，指定返回数据的类型</span><br>      <span class="hljs-attr">priority</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 可选，默认为1</span><br>      <span class="hljs-attr">connectTimeout</span>: <span class="hljs-number">60000</span>, <span class="hljs-comment">// 可选，默认为60000ms</span><br>      <span class="hljs-attr">readTimeout</span>: <span class="hljs-number">60000</span>, <span class="hljs-comment">// 可选，默认为60000ms</span><br>      <span class="hljs-attr">usingProxy</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 可选，默认不使用网络代理，自API 10开始支持该属性</span><br>      <span class="hljs-comment">// caPath:filePath</span><br><br>    &#125;, <span class="hljs-function">(<span class="hljs-params">err: BusinessError, data: http.HttpResponse</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!err) &#123;<br>      <span class="hljs-comment">// data.result为HTTP响应内容，可根据业务需要进行解析</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Result:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data.<span class="hljs-property">result</span>));<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;code:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data.<span class="hljs-property">responseCode</span>));<br>      <span class="hljs-comment">// data.header为HTTP响应头，可根据业务需要进行解析</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;header:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data.<span class="hljs-property">header</span>));<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;cookies:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data.<span class="hljs-property">cookies</span>)); <span class="hljs-comment">// 8+</span><br>      <span class="hljs-comment">// 当该请求使用完毕时，调用destroy方法主动销毁</span><br>      httpRequest.<span class="hljs-title function_">destroy</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;error:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err));<br><br>      <span class="hljs-comment">// 当该请求使用完毕时，调用destroy方法主动销毁</span><br>      httpRequest.<span class="hljs-title function_">destroy</span>();<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;flutter 鸿蒙打点：&quot;</span>)<br>    &#125;<br>  &#125;<br>  );<br><br>&#125;)<br></code></pre></td></tr></table></figure><p>同样的操作，熟悉的配方就可以看到抓包结果了。</p><h2 id="以下是排查过程，没啥参考价值"><a href="#以下是排查过程，没啥参考价值" class="headerlink" title="以下是排查过程，没啥参考价值"></a>以下是排查过程，没啥参考价值</h2><h3 id="发送文件"><a href="#发送文件" class="headerlink" title="发送文件"></a>发送文件</h3><p>一开始使用 hdc 发送文件一直失败，一个原因是找不到正确的文件夹，另外一个原因就是没有加指定目标文件的文件名，路径只写到了某个文件夹。<br>还想尝试使用手机上登录微信，通过微信发送。<br>蓝牙配对一下，使用蓝牙发送。<br>电脑上搞个 ftp，手机上访问下载一下。<br>这些方案应该都能解决文件传输问题，但我就想用 hdc 搞定一下，折腾了好半天，搜了一摞一摞的教程。。。</p><h3 id="http-抓包报错"><a href="#http-抓包报错" class="headerlink" title="http 抓包报错"></a>http 抓包报错</h3><p>安装完证书，配置好代理之后抓包时发现 http 请求失败，报错<code>2300060 远程服务器SSL证书或SSH秘钥不正确</code>.<br>刚开始以为是在 http 请求中需求配置点什么属性，比如<code>usingProxy</code>这个属性：可以配置属性值类型<code>boolean</code>或者<code>HttpProxy</code>。<br>首先设置为 true，抓包还是不行。<br>设置为<code>HttpProxy</code>对象，地址就写电脑的 ip 和抓包软件中设置的对应的端口号，结果还是报错。  </p><p>然后就以为需要把证书拷贝到沙箱目录，然后走自定义证书那一套流程，结果还是不行，照样是<code>2300060</code>这个错误码。  </p><p>之后就去翻官方文档，看到有个提示<br><img src="/image/HarmonyOS/http_2300060_error_code.png"></p><p>然后看了下证书有效期，果然是证书过期了，但奇怪的是在 Android 上可以抓包。解决方案就是在抓包软件里面重置一下证书，再重新导出一下，安装到手机上就可以了。</p><hr><p>为啥会关心这两个网络请求抓包：因为有个立项比较早的项目，是由前端主导的，当时还没有 rcp，于是选择了axios。后面又立项了另外一个项目，是客户端主导的，并且这时候官方文档也开始推荐使用 rcp 了。</p><hr><p>以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;抓包，对于各位开发者应该不陌生，各种抓包工具应该的都听说过，像 charles、fiddler、Wireshark‌等。在 Android </summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-试一下属性字符串</title>
    <link href="https://blog.huangyuanlove.com/2025/04/09/%E9%B8%BF%E8%92%99-%E8%AF%95%E4%B8%80%E4%B8%8B%E5%B1%9E%E6%80%A7%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://blog.huangyuanlove.com/2025/04/09/%E9%B8%BF%E8%92%99-%E8%AF%95%E4%B8%80%E4%B8%8B%E5%B1%9E%E6%80%A7%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2025-04-09T14:00:40.000Z</published>
    <updated>2025-04-28T09:38:18.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发中，经常会遇到一段文字中需要设置不同的字体样式和点击事件，最常见的就是在”我已仔细阅读并同意《隐私政策》和《用户协议》”这种情况，需要将书名号中的文字高亮，并且在点击的时候需要跳转到不同页面。一般我们可以使用Text+Span来实现，但我们还有另外一种方法：属性字符串</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>方便灵活应用文本样式的对象，可通过<code>TextController</code>中的<code>setStyledString</code>方法与<code>Text</code>组件绑定，可通过<code>RichEditorStyledStringController</code>中的<code>setStyledString</code>方法与<code>RichEditor</code>组件绑定。<br>但需要注意以下几点：</p><ul><li>当组件样式和属性字符串中的样式冲突时，冲突部分以属性字符串设置的样式为准，未冲突部分则生效组件的样式。</li><li>当属性字符串和Text子组件冲突时，属性字符串优先级高，即当Text组件中绑定了属性字符串，忽略Text组件下包含Span等子组件的情况。</li><li>不支持@State修饰。</li><li>建议将StyledString定义为成员变量，从而避免应用退后台后被销毁。</li><li>目前不支持在worker线程中使用。</li></ul><p>最重要的一点，文档上没提到的:在<code>aboutToAppear</code>生命周期中调用<code>textController.setStyledString()</code>是没有效果的的。<br>着也是为什么文档中的示例将该方法的调用放在<code>onPageShow</code>方法的原因。<br>当然也可以在组件的<code>onAppear</code>方法中调用</p><h2 id="有哪些类型"><a href="#有哪些类型" class="headerlink" title="有哪些类型"></a>有哪些类型</h2><p>一般情况下，<code>MutableStyledString</code>使用的多一些。该类继承自<code>StyledString</code>,其构造方法如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">constructor</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span> | ImageAttachment | CustomSpan , styles?: <span class="hljs-built_in">Array</span>&lt;StyleOptions&gt;</span>)<br></code></pre></td></tr></table></figure><p>一般情况下我们是这么使用的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//创建无样式属性的字符串，然后调用该对象的 appendStyledString insertStyledString 等方法设置各种属性</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">mutableStyledString</span>:<span class="hljs-title class_">MutableStyledString</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutableStyledString</span>(<span class="hljs-string">&quot;字符串&quot;</span>)<br><br><span class="hljs-comment">//直接添加各种样式属性</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">mutableStyledString</span>:<span class="hljs-title class_">MutableStyledString</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutableStyledString</span>(<span class="hljs-string">&quot;字符串&quot;</span>,[&#123;<br>      <span class="hljs-attr">start</span>:<span class="hljs-number">2</span>,<br>      <span class="hljs-attr">length</span>:<span class="hljs-number">2</span>,<br>      <span class="hljs-attr">styledKey</span>:<span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">DECORATION</span>,<br>      <span class="hljs-attr">styledValue</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecorationStyle</span>(&#123;<span class="hljs-attr">color</span>:<span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>,<span class="hljs-attr">type</span>:<span class="hljs-title class_">TextDecorationType</span>.<span class="hljs-property">LineThrough</span>,<span class="hljs-attr">style</span>:<span class="hljs-title class_">TextDecorationStyle</span>.<span class="hljs-property">WAVY</span>&#125;)<br>    &#125;])<br></code></pre></td></tr></table></figure><p>这里的styledKey和styledValue是需要一一对应的，当这两个值不匹配时不生效。<br>比如： </p><blockquote><p>StyledStringKey.FONT &lt;-&gt; TextStyle<br>StyledStringKey.DECORATION &lt;-&gt; DecorationStyle<br>StyledStringKey.BASELINE_OFFSET &lt;-&gt; BaselineOffsetStyle<br>StyledStringKey.LETTER_SPACING &lt;-&gt; LetterSpacingStyle<br>StyledStringKey.TEXT_SHADOW &lt;-&gt; TextShadowStyle<br>StyledStringKey.LINE_HEIGHT &lt;-&gt; LineHeightStyle<br>StyledStringKey.BACKGROUND_COLOR &lt;-&gt; BackgroundColorStyle<br>StyledStringKey.URL &lt;-&gt; UrlStyle<br>StyledStringKey.GESTURE &lt;-&gt; GestureStyle<br>StyledStringKey.PARAGRAPH_STYLE &lt;-&gt; ParagraphStyle<br>StyledStringKey.USER_DATA &lt;-&gt;  extends UserDataSpan  </p></blockquote><p>还有两个比较特殊的：<code>StyledStringKey.CUSTOM_SPAN</code> 和 <code>StyledStringKey.IMAGE</code>，这两个用的比较少。</p><h2 id="拉出来溜溜"><a href="#拉出来溜溜" class="headerlink" title="拉出来溜溜"></a>拉出来溜溜</h2><p>来看下如何实现一开始说的那个例子</p><h3 id="Text-Span"><a href="#Text-Span" class="headerlink" title="Text + Span"></a>Text + Span</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Text</span>()&#123;<br>  <span class="hljs-title class_">Span</span>(<span class="hljs-string">&quot;我已仔细阅读并同意&quot;</span>).<span class="hljs-title function_">fontColor</span>(<span class="hljs-string">&quot;#333333&quot;</span>).<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">16</span>)<br>  <span class="hljs-title class_">Span</span>(<span class="hljs-string">&quot;《用户协议》&quot;</span>).<span class="hljs-title function_">fontColor</span>(<span class="hljs-string">&quot;#39d175&quot;</span>).<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>    promptAction.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;打开用户协议页面&quot;</span>&#125;)<br>  &#125;)<br>  <span class="hljs-title class_">Span</span>(<span class="hljs-string">&quot;和&quot;</span>).<span class="hljs-title function_">fontColor</span>(<span class="hljs-string">&quot;#333333&quot;</span>).<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">16</span>)<br>  <span class="hljs-title class_">Span</span>(<span class="hljs-string">&quot;《隐私协议》&quot;</span>).<span class="hljs-title function_">fontColor</span>(<span class="hljs-string">&quot;#39d175&quot;</span>).<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>    promptAction.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;打开隐私协议页面&quot;</span>&#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="StyledString"><a href="#StyledString" class="headerlink" title="StyledString"></a>StyledString</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Text</span>(<span class="hljs-literal">undefined</span>,&#123;<span class="hljs-attr">controller</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">protocolTextController</span>&#125;).<span class="hljs-title function_">onAppear</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-keyword">let</span> protocolStyledString : <span class="hljs-title class_">MutableStyledString</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutableStyledString</span>(<span class="hljs-string">&quot;我已仔细阅读并同意《用户协议》和《隐私协议》&quot;</span>,[<br>    &#123;<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">9</span>,<br>      <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">FONT</span>,<br>      <span class="hljs-attr">styledValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextStyle</span>(&#123;<br>        <span class="hljs-attr">fontColor</span>:<span class="hljs-string">&quot;#39d175&quot;</span>,<br>        <span class="hljs-attr">fontSize</span>:<span class="hljs-title class_">LengthMetrics</span>.<span class="hljs-title function_">fp</span>(<span class="hljs-number">16</span>),<br>      &#125;)<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">9</span>,<br>      <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">GESTURE</span>,<br>      <span class="hljs-attr">styledValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">GestureStyle</span>(&#123;<span class="hljs-attr">onClick</span>:<span class="hljs-function">(<span class="hljs-params">event:ClickEvent</span>)=&gt;</span>&#123;<br>        promptAction.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;打开用户协议页面&quot;</span>&#125;)<br>      &#125;,<span class="hljs-attr">onLongPress</span>:<span class="hljs-function">(<span class="hljs-params">event:GestureEvent</span>)=&gt;</span>&#123;&#125;&#125;)<br>    &#125;,<br><br>    &#123;<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">16</span>,<br>      <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">FONT</span>,<br>      <span class="hljs-attr">styledValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextStyle</span>(&#123;<br>        <span class="hljs-attr">fontColor</span>:<span class="hljs-string">&quot;#39d175&quot;</span>,<br>        <span class="hljs-attr">fontSize</span>:<span class="hljs-title class_">LengthMetrics</span>.<span class="hljs-title function_">fp</span>(<span class="hljs-number">16</span>),<br>      &#125;)<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">16</span>,<br>      <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">GESTURE</span>,<br>      <span class="hljs-attr">styledValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">GestureStyle</span>(&#123;<span class="hljs-attr">onClick</span>:<span class="hljs-function">(<span class="hljs-params">event:ClickEvent</span>)=&gt;</span>&#123;<br>        promptAction.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">&quot;打开隐私协议页面&quot;</span>&#125;)<br>      &#125;,<span class="hljs-attr">onLongPress</span>:<span class="hljs-function">(<span class="hljs-params">event:GestureEvent</span>)=&gt;</span>&#123;&#125;&#125;)<br>    &#125;<br>  ])<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">protocolTextController</span>.<span class="hljs-title function_">setStyledString</span>(protocolStyledString)<br>&#125;)<br></code></pre></td></tr></table></figure><p>当然这么比较起来还是<code>Text+Span</code>比较简洁。但当遇到Span不支持的属性的时候，还是得用<code>StyledString</code>,比如设置背景色、下划线、删除线、偏移、字间距等等</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>整个全乎的看下效果</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">mutableStyledString</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutableStyledString</span>(<span class="hljs-string">&quot;豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。&quot;</span>, [&#123;<br>  <span class="hljs-attr">start</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>  <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">FONT</span>,<br>  <span class="hljs-attr">styledValue</span>:  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextStyle</span>(&#123; <span class="hljs-attr">fontColor</span>: <span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span> &#125;)<br>&#125;, &#123;<br>  <span class="hljs-attr">start</span>: <span class="hljs-number">7</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>  <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">DECORATION</span>,<br>  <span class="hljs-attr">styledValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecorationStyle</span>(&#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">TextDecorationType</span>.<span class="hljs-property">LineThrough</span>,<br>    <span class="hljs-attr">style</span>: <span class="hljs-title class_">TextDecorationStyle</span>.<span class="hljs-property">WAVY</span><br>  &#125;)<br>&#125;, &#123;<br>  <span class="hljs-attr">start</span>: <span class="hljs-number">14</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>  <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">BASELINE_OFFSET</span>,<br>  <span class="hljs-attr">styledValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaselineOffsetStyle</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthMetrics</span>(<span class="hljs-number">6</span>, <span class="hljs-title class_">LengthUnit</span>.<span class="hljs-property">VP</span>))<br>&#125;<br>  , &#123;<br>    <span class="hljs-attr">start</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">LETTER_SPACING</span>,<br>    <span class="hljs-attr">styledValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">LetterSpacingStyle</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthMetrics</span>(<span class="hljs-number">6</span>, <span class="hljs-title class_">LengthUnit</span>.<span class="hljs-property">VP</span>))<br>  &#125;<br>  , &#123;<br>    <span class="hljs-attr">start</span>: <span class="hljs-number">28</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">TEXT_SHADOW</span>,<br>    <span class="hljs-attr">styledValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextShadowStyle</span>(&#123;<br>      <span class="hljs-attr">radius</span>: <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">ShadowType</span>.<span class="hljs-property">COLOR</span>,<br>      <span class="hljs-attr">color</span>: <span class="hljs-title class_">Color</span>.<span class="hljs-property">Yellow</span>,<br>      <span class="hljs-attr">offsetX</span>: <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">offsetY</span>: -<span class="hljs-number">10</span><br>    &#125;)<br>  &#125;<br>  , &#123;<br>    <span class="hljs-attr">start</span>: <span class="hljs-number">35</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">LINE_HEIGHT</span>,<br>    <span class="hljs-attr">styledValue</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">LineHeightStyle</span>(<span class="hljs-title class_">LengthMetrics</span>.<span class="hljs-title function_">fp</span>(<span class="hljs-number">20</span>))<br>  &#125;<br>  <span class="hljs-comment">// , &#123;</span><br>  <span class="hljs-comment">//   start: 42,</span><br>  <span class="hljs-comment">//   length: 6,</span><br>  <span class="hljs-comment">//   styledKey: StyledStringKey.BACKGROUND_COLOR,</span><br>  <span class="hljs-comment">//   styledValue: new BackgroundColorStyle(&#123;</span><br>  <span class="hljs-comment">//     color: Color.Pink,</span><br>  <span class="hljs-comment">//     radius: 6</span><br>  <span class="hljs-comment">//   &#125;)</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// , &#123;</span><br>  <span class="hljs-comment">//   start: 49,</span><br>  <span class="hljs-comment">//   length: 6,</span><br>  <span class="hljs-comment">//   styledKey: StyledStringKey.URL,</span><br>  <span class="hljs-comment">//   styledValue: new UrlStyle(&quot;https://www.example.com&quot;)</span><br>  <span class="hljs-comment">// &#125;</span><br>  , &#123;<br>    <span class="hljs-attr">start</span>: <span class="hljs-number">56</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">styledKey</span>: <span class="hljs-title class_">StyledStringKey</span>.<span class="hljs-property">PARAGRAPH_STYLE</span>,<br>    <span class="hljs-attr">styledValue</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">ParagraphStyle</span>(&#123; <span class="hljs-attr">textAlign</span>: <span class="hljs-title class_">TextAlign</span>.<span class="hljs-property">End</span>, <span class="hljs-attr">maxLines</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">wordBreak</span>: <span class="hljs-title class_">WordBreak</span>.<span class="hljs-property">BREAK_ALL</span>, <span class="hljs-attr">overflow</span>: <span class="hljs-title class_">TextOverflow</span>.<span class="hljs-property">Ellipsis</span>&#125;)<br>  &#125;<br>]);<br></code></pre></td></tr></table></figure><p>注意：<code>BackgroundColorStyle</code>和<code>UrlStyle</code>是api14开始支持的<br><img src="/image/HarmonyOS/styled_string.png" alt="属性字符串"></p><h3 id="CustomSpan"><a href="#CustomSpan" class="headerlink" title="CustomSpan"></a>CustomSpan</h3><p>我们需要继承<code>CustomSpan</code>并重写<code>onMeasure(measureInfo: CustomSpanMeasureInfo): CustomSpanMetrics</code>来完成测量，重写<code>onDraw(context: DrawContext, options: CustomSpanDrawInfo)</code>来完成绘制，这和<code>自定义组件的自定义布局</code>中重写<code>onMeasureSize</code>和<code>onPlaceChildren</code>差不多。</p><h4 id="先看一下构造函数"><a href="#先看一下构造函数" class="headerlink" title="先看一下构造函数"></a>先看一下构造函数</h4><p>CustomSpan对象只有一个无参构造函数，但一般情况下我们需要在构造函数中传入我们需要的参数，大多数情况我们需要传入要绘制的内容，这里简单的以绘制字符串为例。还需要一个UIContext的上下文对象，用于获取各种工具。<br>另外我们还需要根据需求，定义一些变量，来保存我们需要使用的参数。这里我们需要保存<code>字体大小</code>。  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCustomSpan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">CustomSpan</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">text: <span class="hljs-built_in">string</span>, uiContext: UIContext</span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span> = text;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uiContext</span> = uiContext<br>  &#125;<br><br>  <span class="hljs-attr">text</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">uiContext</span>: <span class="hljs-title class_">UIContext</span><br><br>  <span class="hljs-attr">fontSizeFp</span>:<span class="hljs-built_in">number</span> =<span class="hljs-number">0</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="onMeasure-measureInfo-CustomSpanMeasureInfo-CustomSpanMetrics"><a href="#onMeasure-measureInfo-CustomSpanMeasureInfo-CustomSpanMetrics" class="headerlink" title="onMeasure(measureInfo: CustomSpanMeasureInfo): CustomSpanMetrics"></a>onMeasure(measureInfo: CustomSpanMeasureInfo): CustomSpanMetrics</h4><p>这个方法中，我们可以获取到文字大小，需要返回一个<code>CustomSpanMetrics</code>对象，表示自定义绘制Span的尺寸。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">onMeasure</span>(<span class="hljs-attr">measureInfo</span>: <span class="hljs-title class_">CustomSpanMeasureInfo</span>): <span class="hljs-title class_">CustomSpanMetrics</span> &#123;<br>  <span class="hljs-comment">// measureInfo.fontSize单位为fp</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">fontSizeFp</span> = measureInfo.<span class="hljs-property">fontSize</span><br><br>  <span class="hljs-comment">// 传入的fontSize单位为fp，返回文本所占布局宽度和高度单位均为px。</span><br>  <span class="hljs-keyword">let</span> size =<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uiContext</span>.<span class="hljs-title function_">getMeasureUtils</span>().<span class="hljs-title function_">measureTextSize</span>(&#123; <span class="hljs-attr">textContent</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span>, <span class="hljs-attr">fontSize</span>: measureInfo.<span class="hljs-property">fontSize</span> &#125;)<br><br>  <span class="hljs-comment">//customSpanMetrics的width和height 单位为vp</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">customSpanMetrics</span> = &#123; <span class="hljs-attr">width</span>: <span class="hljs-title function_">px2vp</span>(size.<span class="hljs-property">width</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>), <span class="hljs-attr">height</span>: <span class="hljs-title function_">px2vp</span>(size.<span class="hljs-property">height</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>) &#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">customSpanMetrics</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样我们就获取到了Span的尺寸信息  </p><h4 id="onDraw-context-DrawContext-drawInfo-CustomSpanDrawInfo"><a href="#onDraw-context-DrawContext-drawInfo-CustomSpanDrawInfo" class="headerlink" title="onDraw(context: DrawContext, drawInfo: CustomSpanDrawInfo)"></a>onDraw(context: DrawContext, drawInfo: CustomSpanDrawInfo)</h4><p><code>DrawContext</code>的实例对象<code>context</code>中的size属性保存的画布的宽高，canvas属性保存了画布对象；这里需要注意的是：获取的画布是Text组件的画布，绘制时不会超出Text组件的范围。这里就先认为是属性的，戳进去看源码就是定义的get方法：<code>get canvas(): drawing.Canvas;</code><br>而<code>CustomSpanDrawInfo</code>的实例对象<code>drawInfo</code>则保存了自定义绘制Span的绘制信息。比如属性<code>x</code>是<strong>自定义绘制Span相对于挂载组件的偏移</strong>、<br><code>lineTop</code>是<strong>自定义绘制Span相对于Text组件的上边距</strong>、 <code>lineBottom</code>是<strong>自定义绘制Span相对于Text组件的下边距</strong>。<code>baseline</code>是<strong>自定义绘制Span的所在行的基线偏移量</strong>，它们的单位是都<code>px</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">onDraw</span>(<span class="hljs-attr">context</span>: <span class="hljs-title class_">DrawContext</span>, <span class="hljs-attr">drawInfo</span>: <span class="hljs-title class_">CustomSpanDrawInfo</span>): <span class="hljs-built_in">void</span> &#123;<br><br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`onDraw drawInfo x:<span class="hljs-subst">$&#123;drawInfo.x&#125;</span>  lineTop:<span class="hljs-subst">$&#123;drawInfo.lineTop&#125;</span>  lineBottom:<span class="hljs-subst">$&#123;drawInfo.lineBottom&#125;</span>  baseline:<span class="hljs-subst">$&#123;drawInfo.baseline&#125;</span>`</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`onDraw context <span class="hljs-subst">$&#123;vp2px(context.size.width)&#125;</span>   <span class="hljs-subst">$&#123;vp2px(context.size.height)&#125;</span>`</span>)<br>  <br>  <span class="hljs-keyword">let</span> canvas = context.<span class="hljs-property">canvas</span>;<br>  <span class="hljs-keyword">const</span> font = <span class="hljs-keyword">new</span> drawing.<span class="hljs-title class_">Font</span>();<br>  font.<span class="hljs-title function_">setSize</span>(<span class="hljs-title function_">vp2px</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fontSizeFp</span>));<br>  <span class="hljs-keyword">const</span> brush = <span class="hljs-keyword">new</span> drawing.<span class="hljs-title class_">Brush</span>();<br>  brush.<span class="hljs-title function_">setColor</span>(&#123;<br>    <span class="hljs-attr">alpha</span>: <span class="hljs-number">255</span>,<br>    <span class="hljs-attr">red</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">green</span>: <span class="hljs-number">74</span>,<br>    <span class="hljs-attr">blue</span>: <span class="hljs-number">175</span><br>  &#125;);<br><br>  canvas.<span class="hljs-title function_">attachBrush</span>(brush)<br>  <span class="hljs-keyword">const</span> textBlob = drawing.<span class="hljs-property">TextBlob</span>.<span class="hljs-title function_">makeFromString</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span>, font, drawing.<span class="hljs-property">TextEncoding</span>.<span class="hljs-property">TEXT_ENCODING_UTF8</span>);<br><br>  canvas.<span class="hljs-title function_">drawTextBlob</span>(textBlob, drawInfo.<span class="hljs-property">x</span>, drawInfo.<span class="hljs-property">baseline</span>);<br>  <br>  canvas.<span class="hljs-title function_">detachBrush</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就完成了一个简单的自绘制的Span。  </p><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>但是这里有个很大的问题：当绘制的文字多的时候，文字并不会换行。因为我们测量出来文字是按一行计算的，高度也是一行文字的高度。</p><p>想要计算需要几行，就需要知道Text组件的宽度。这里可以从构造函数中传进来。  </p><p>那么问题就变成了如何获取Text组件的宽度？可以从onAreaChange回调中获取，但这个函数并不可靠，有时候一步小心使用属性字符串时返回的宽度就是0。  </p><p>另外一个问题就是，我们如何知道组件的宽度可以放下几个字？假如一行可以放下5.4个字，那实际结果肯定是一行只绘制5个字。</p><p>我们可以根据这个方法来计算需要多大的高度。</p><p>还有一个问题就是在onDraw方法中drawInfo.baseLine属性，目前来看就是最后一行文字的baseLine，如果有多行文字，还需要我们自己计算每一行的baseLine</p><hr><p>哈哈，遗留的问题有时间再说吧，这个自定义绘制Span用的机会应该不大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在开发中，经常会遇到一段文字中需要设置不同的字体样式和点击事件，最常见的就是在”我已仔细阅读并同意《隐私政策》和《用户协议》”这种情况，需要</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-状态管理V1和V2在ForEach循环渲染的表现</title>
    <link href="https://blog.huangyuanlove.com/2025/03/24/%E9%B8%BF%E8%92%99-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86V1%E5%92%8CV2%E5%9C%A8ForEach%E5%BE%AA%E7%8E%AF%E6%B8%B2%E6%9F%93%E7%9A%84%E8%A1%A8%E7%8E%B0/"/>
    <id>https://blog.huangyuanlove.com/2025/03/24/%E9%B8%BF%E8%92%99-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86V1%E5%92%8CV2%E5%9C%A8ForEach%E5%BE%AA%E7%8E%AF%E6%B8%B2%E6%9F%93%E7%9A%84%E8%A1%A8%E7%8E%B0/</id>
    <published>2025-03-24T14:11:33.000Z</published>
    <updated>2025-03-26T02:37:40.795Z</updated>
    
    <content type="html"><![CDATA[<p>状态管理V2已经出来好长时间了，移除GAP说明也有一段时间了，相信有一部分朋友已经开始着手从V1迁移到V2了，应该也踩了不少坑。<br>下面向大家分享一下我使用状态管理V1和Foreach时遇到的坑，以及状态管理V2在Foreach循环渲染中的表现。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>这里就先默认大家都已经熟悉状态管理V1中的@Observed装饰器和@ObjectLink装饰器，以及ForEach循环渲染相关的知识，并且仔细阅读过<code>ForEach：循环渲染</code>章节中的<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-rendering-control-foreach#%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C%E9%9D%9E%E9%A2%84%E6%9C%9F">渲染结果非预期</a>了。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>先说场景需求：<br>典型的支付结算页面选择优惠券的场景。当用户在结算页面点击优惠券时，跳转到优惠券列表页面，并在该页面向服务器请求优惠券列表数据。<br>这是服务器会根据传入的订单信息按照需求计算出默认选中哪个优惠券，该页面支持下拉刷新。<br>我们来简化一下优惠券数据，关键数据优惠券id，抵扣信息和描述。于是我们很容易写出如下代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//数据类</span><br><span class="hljs-meta">@Observed</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CouponData</span> &#123;<br>  <span class="hljs-attr">id</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">defaultSelect</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">//用于展示数据的控件</span><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">CouponView</span> &#123;<br>  <span class="hljs-meta">@Watch</span>(<span class="hljs-string">&#x27;onCouponDataChange&#x27;</span>) <span class="hljs-meta">@ObjectLink</span> <span class="hljs-attr">model</span>: <span class="hljs-title class_">CouponData</span><br>  <span class="hljs-comment">//优惠券是单选，因此选中|取消选中优惠券时通知父组件更新数据</span><br>  <span class="hljs-attr">onChangeSelect</span>:<span class="hljs-function">(<span class="hljs-params">id:<span class="hljs-built_in">string</span>,select:<span class="hljs-built_in">boolean</span></span>)=&gt;</span><span class="hljs-built_in">void</span> = <span class="hljs-function">(<span class="hljs-params">id:<span class="hljs-built_in">string</span>,select:<span class="hljs-built_in">boolean</span></span>)=&gt;</span>&#123;&#125;<br><br>  <span class="hljs-title function_">onCouponDataChange</span>(<span class="hljs-params"></span>) &#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;ForeachPage&#x27;</span>, <span class="hljs-string">`onCouponDataChange <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.model.id&#125;</span>  <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.model.defaultSelect&#125;</span>`</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Row</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.model.name&#125;</span> , select :<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.model.defaultSelect&#125;</span>`</span>)<br>      <span class="hljs-title class_">Circle</span>()<br>        .<span class="hljs-title function_">width</span>(<span class="hljs-number">20</span>)<br>        .<span class="hljs-title function_">height</span>(<span class="hljs-number">20</span>)<br>        .<span class="hljs-title function_">fill</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span>.<span class="hljs-property">defaultSelect</span> ? <span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span> : <span class="hljs-title class_">Color</span>.<span class="hljs-property">Gray</span>)<br>        .<span class="hljs-title function_">stroke</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span>.<span class="hljs-property">defaultSelect</span> ? <span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span> : <span class="hljs-title class_">Color</span>.<span class="hljs-property">Grey</span>)<br><br>    &#125;.<span class="hljs-title function_">padding</span>(&#123; <span class="hljs-attr">top</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">bottom</span>: <span class="hljs-number">10</span> &#125;).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onChangeSelect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span>.<span class="hljs-property">id</span>,!<span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span>.<span class="hljs-property">defaultSelect</span>)<br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//为了简单展示，这里没有从服务器获取数据；下拉刷新也用按钮代替；点击确认时弹个toast提示一下选中的优惠券id</span><br><br><br><br><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">ForeachPage</span> &#123;<br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">couponDataList</span>: <span class="hljs-title class_">CouponData</span>[] = []<br>  <span class="hljs-title function_">aboutToAppear</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initData</span>()<br>  &#125;<br>  <span class="hljs-comment">//模拟一下数据</span><br>  <span class="hljs-title function_">initData</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span> = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>      <span class="hljs-keyword">let</span> <span class="hljs-attr">model</span>: <span class="hljs-title class_">CouponData</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CouponData</span>()<br>      model.<span class="hljs-property">id</span>= i.<span class="hljs-title function_">toString</span>()<br>      model.<span class="hljs-property">name</span> = <span class="hljs-string">`优惠券 <span class="hljs-subst">$&#123;i&#125;</span> 项`</span><br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>        model.<span class="hljs-property">defaultSelect</span> = <span class="hljs-literal">true</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        model.<span class="hljs-property">defaultSelect</span> = <span class="hljs-literal">false</span><br>      &#125;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>.<span class="hljs-title function_">push</span>(model)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br><br>    <span class="hljs-comment">//就当这里是下拉刷新了，问题不大</span><br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;刷新&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initData</span>()<br>      &#125;)<br>      <span class="hljs-title class_">List</span>() &#123;<br>        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>, <span class="hljs-function">(<span class="hljs-params">model: CouponData</span>) =&gt;</span> &#123;<br>          <span class="hljs-title class_">ListItem</span>() &#123;<br>            <span class="hljs-title class_">CouponView</span>(&#123; <span class="hljs-attr">model</span>: model ,<span class="hljs-attr">onChangeSelect</span>:<span class="hljs-function">(<span class="hljs-params">id:<span class="hljs-built_in">string</span>,select:<span class="hljs-built_in">boolean</span></span>)=&gt;</span>&#123;<br>              hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;ForeachPage&#x27;</span>, <span class="hljs-string">`onChangeSelect <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;select&#125;</span>`</span>)<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">data:CouponData</span>)=&gt;</span>&#123;<br>                <span class="hljs-keyword">if</span>(data.<span class="hljs-property">id</span> == id)&#123;<br>                  data.<span class="hljs-property">defaultSelect</span> = select<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                  <span class="hljs-keyword">if</span>(select)&#123;<br>                    data.<span class="hljs-property">defaultSelect</span> =<span class="hljs-literal">false</span>;<br>                  &#125;<br>                &#125;<br>              &#125;)<br>            &#125;&#125;)<br>          &#125;<br><br>        &#125;, <span class="hljs-function">(<span class="hljs-params">item: CouponData,index:<span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">let</span> key = item.<span class="hljs-property">id</span> +<span class="hljs-string">&quot;__&quot;</span> +item.<span class="hljs-property">defaultSelect</span><br>          hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;ForeachPage&#x27;</span>, key)<br>          <span class="hljs-keyword">return</span> key<br>        &#125;)<br>      &#125;.<span class="hljs-title function_">layoutWeight</span>(<span class="hljs-number">1</span>)<br><br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;确定&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">selectCouponID</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;未选中&#x27;</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">couponData:CouponData</span>)=&gt;</span>&#123;<br>          <span class="hljs-keyword">if</span>(couponData.<span class="hljs-property">defaultSelect</span>)&#123;<br>            selectCouponID = couponData.<span class="hljs-property">id</span><br>          &#125;<br>        &#125;)<br>        promptAction.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">`选中的优惠券是 <span class="hljs-subst">$&#123;selectCouponID&#125;</span>`</span>&#125;)<br>      &#125;)<br><br>    &#125;<br>    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用了ForEach循环渲染来生成List的子组件，并且根据开发文档的<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-rendering-control-foreach#%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE">使用建议</a>，我们没有让index参与key的生成，而是使用优惠券的唯一id作为key。<br>运行后切换选中状态，完美。<br>但是遇到了两个问题：</p><ol><li>点击刷新后，并没有将第二项设置未选中、其他项设置为未选中。  </li><li>没有办法切换选中状态。<br>—–emmmmmm——<br>不急，肯定有它的原因。</li></ol><p>看日志：发现在切换选中状态的时候列表项的key没有打印，说明选中状态的切换也就是UI的刷新不是因为key发生了变化，而是因为ObjectLink和Observed观测能力驱动的UI发生的变化。</p><p>接着就能确认问题1：因为切换选中状态时key没有变化，导致点击刷新之后，第二次列表的key和刚进入时列表key一致，因此UI没有刷新。<br>但这里有个问题：为什么参与计算key的属性发生了变化，但key却不会变化？这可能和ObjectLink和Observed观测能力的实现有关，这里没有确认。</p><p>但为什么没有办法切换选中状态？看文档中@State是可以观测到数组项赋值的。<br>根据问题1的结论接着推论：因为key相同，不会重新绘制列表项，这就引起了另外一个问题：列表项没有被重新绘制，因此列表项还是绑定着点击刷新之前数组中的对象，但我们点击列表项时，修改的是数组中的新对象，因此更不会刷新UI。</p><p>为了验证这个推论，我们第一次对数组赋值时将第二项默认选中设置为true； 点击刷新的时候，将第四项默认选中设置为true。<br>修改一下initData方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">  <span class="hljs-attr">firstInit</span>:<span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-title function_">initData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>=[]<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">model</span>: <span class="hljs-title class_">CouponData</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CouponData</span>()<br>    model.<span class="hljs-property">id</span>= i.<span class="hljs-title function_">toString</span>()<br>    model.<span class="hljs-property">name</span> = <span class="hljs-string">`优惠券 <span class="hljs-subst">$&#123;i+<span class="hljs-number">1</span>&#125;</span> 项`</span><br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstInit</span>)&#123;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span> ) &#123;<br>        model.<span class="hljs-property">defaultSelect</span> = <span class="hljs-literal">true</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        model.<span class="hljs-property">defaultSelect</span> = <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> ) &#123;<br>        model.<span class="hljs-property">defaultSelect</span> = <span class="hljs-literal">true</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        model.<span class="hljs-property">defaultSelect</span> = <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>.<span class="hljs-title function_">push</span>(model)<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstInit</span> = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候，我们进入页面，默认选中了第二项。然后点击第一项，将第一项切换为选中状态。之后点击刷新。发现第一项和第四项都变成了选中状态。</p><p>这时候我们点击第二项，可以将第二项切换为选中状态，并且第四项切换为未选中状态。这是是因key发生了变化，列表项重绘，绑定了数组中新的对象。</p><p>然后点击第三项或者第五项，都可以将第二项切换为未选中状态，但第三项和第五项本身不会被选中。因为第三项和第五项没有重绘，还是绑定的数组中之前的对象。</p><p>这时候选中第二项或者第四项之后，再点击第一项，发现并没有将第二项或者第四项切换为未选中状态，这是因为第一项没有被重绘，绑定的还是数组中之前的对象，并且是选中状态，这时候我们点击第一项是取消第一项的选中，并不会修改其他数据。</p><p>这里也验证了我们上面的推论。</p><p>这里就有人问了：</p><blockquote><p>emmm，那怎么办？<br>凉拌呗，换V2。<br>不行哇，这个数据类在其他地方也在用，还都是用的V1。<br>你看，着kpi不就有着落了嘛</p></blockquote><p>好吧，也有个比较恶心的办法，不追求极致性能、数据量较小的时候可以拿来应急：<br>定义一个变量，让这个变量参与key的生成，并且在每次刷新的时候都修改这个变量，进而达到强制让key发生变化，重绘所有列表项。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-attr">refreshTime</span>:<span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br><span class="hljs-title function_">initData</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">refreshTime</span> = systemDateTime.<span class="hljs-title function_">getTime</span>()<br>    ...<br>&#125;<br><span class="hljs-comment">//ForEach额key生成方法</span><br>(<span class="hljs-attr">item</span>: <span class="hljs-title class_">CouponData</span>,<span class="hljs-attr">index</span>:<span class="hljs-built_in">number</span>) =&gt; &#123;<br>          <span class="hljs-keyword">let</span> key = item.<span class="hljs-property">id</span> +<span class="hljs-string">&quot;__&quot;</span> +item.<span class="hljs-property">defaultSelect</span> +<span class="hljs-string">&quot;__&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">refreshTime</span><br>          hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;ForeachPage&#x27;</span>, key)<br>          <span class="hljs-keyword">return</span> key<br>        &#125;<br></code></pre></td></tr></table></figure><p>emmm，这样可以正常刷新。</p><h2 id="换V2呗"><a href="#换V2呗" class="headerlink" title="换V2呗"></a>换V2呗</h2><p>改动也没多少，不过有一点比较恶心，就是被@ObservedV2修饰的类，参与UI展示的属性必须被@Trace修饰，属性少了还好说，属性多了纯纯体力活。<br>写了个插件，可以从json字符串转为ArkTS对象，并且自动加上@Trace修饰<br><a href="https://github.com/huangyuanlove/JsonToArkTS">github</a><br><a href="https://gitee.com/huangyuan/JsonToArkTS">gitee</a><br><a href="https://gitcode.com/huangyuan_xuan/JsonToArkTS">gitcode</a>   </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@ComponentV2</span> <span class="hljs-comment">//修改为V2</span><br>struct <span class="hljs-title class_">ForeachPage</span> &#123;<br>  <span class="hljs-meta">@Local</span> <span class="hljs-attr">couponDataList</span>: <span class="hljs-title class_">CouponData</span>[] = [] <span class="hljs-comment">//修改为V2</span><br><br>  <span class="hljs-title function_">aboutToAppear</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initData</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">initData</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span> = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>      <span class="hljs-keyword">let</span> <span class="hljs-attr">model</span>: <span class="hljs-title class_">CouponData</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CouponData</span>()<br>      model.<span class="hljs-property">id</span> = i.<span class="hljs-title function_">toString</span>()<br>      model.<span class="hljs-property">name</span> = <span class="hljs-string">`优惠券 <span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span> 项`</span><br><br><br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>        model.<span class="hljs-property">defaultSelect</span> = <span class="hljs-literal">true</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        model.<span class="hljs-property">defaultSelect</span> = <span class="hljs-literal">false</span><br>      &#125;<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>.<span class="hljs-title function_">push</span>(model)<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;刷新&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initData</span>()<br>      &#125;)<br>      <span class="hljs-title class_">List</span>() &#123;<br>        <span class="hljs-title class_">ForEach</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>, <span class="hljs-function">(<span class="hljs-params">model: CouponData</span>) =&gt;</span> &#123;<br>          <span class="hljs-title class_">ListItem</span>() &#123;<br>            <span class="hljs-title class_">CouponView</span>(&#123;<br>              <span class="hljs-attr">model</span>: model, <span class="hljs-attr">onChangeSelect</span>: <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">string</span>, select: <span class="hljs-built_in">boolean</span></span>) =&gt;</span> &#123;<br>                hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;ForeachPage&#x27;</span>, <span class="hljs-string">`onChangeSelect <span class="hljs-subst">$&#123;id&#125;</span> <span class="hljs-subst">$&#123;select&#125;</span>`</span>)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">data: CouponData</span>) =&gt;</span> &#123;<br>                  <span class="hljs-keyword">if</span> (data.<span class="hljs-property">id</span> == id) &#123;<br>                    data.<span class="hljs-property">defaultSelect</span> = select<br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (select) &#123;<br>                      data.<span class="hljs-property">defaultSelect</span> = <span class="hljs-literal">false</span>;<br>                    &#125;<br>                  &#125;<br>                &#125;)<br>              &#125;<br>            &#125;)<br>          &#125;<br><br>        &#125;, <span class="hljs-function">(<span class="hljs-params">item: CouponData, index: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">let</span> key = item.<span class="hljs-property">id</span> + <span class="hljs-string">&quot;__&quot;</span> + item.<span class="hljs-property">defaultSelect</span><br>          hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;ForeachPage&#x27;</span>, key)<br>          <span class="hljs-keyword">return</span> key<br>        &#125;)<br>      &#125;.<span class="hljs-title function_">layoutWeight</span>(<span class="hljs-number">1</span>)<br><br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;确定&quot;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">selectCouponID</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;未选中&#x27;</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">couponDataList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">couponData: CouponData</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (couponData.<span class="hljs-property">defaultSelect</span>) &#123;<br>            selectCouponID = couponData.<span class="hljs-property">id</span><br>          &#125;<br>        &#125;)<br>        promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">`选中的优惠券是 <span class="hljs-subst">$&#123;selectCouponID&#125;</span>`</span> &#125;)<br>      &#125;)<br><br>    &#125;<br>    .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>    .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>  &#125;<br>&#125;<br><br><br><span class="hljs-meta">@ComponentV2</span>   <span class="hljs-comment">//修改为V2</span><br>struct <span class="hljs-title class_">CouponView</span> &#123;<br>  <span class="hljs-meta">@Require</span> <span class="hljs-meta">@Param</span> <span class="hljs-attr">model</span>: <span class="hljs-title class_">CouponData</span>   <span class="hljs-comment">//修改为V2</span><br>  <span class="hljs-meta">@Event</span> <span class="hljs-comment">//修改为V2</span><br>  <span class="hljs-attr">onChangeSelect</span>: <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">string</span>, select: <span class="hljs-built_in">boolean</span></span>) =&gt;</span> <span class="hljs-built_in">void</span> = <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">string</span>, select: <span class="hljs-built_in">boolean</span></span>) =&gt;</span> &#123;<br>  &#125;<br>  <span class="hljs-title function_">aboutToAppear</span>(): <span class="hljs-built_in">void</span> &#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;ForeachPage&#x27;</span>, <span class="hljs-string">`aboutToAppear <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.model.id&#125;</span>`</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Row</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.model.name&#125;</span> , select :<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.model.defaultSelect&#125;</span>`</span>)<br>      <span class="hljs-title class_">Circle</span>()<br>        .<span class="hljs-title function_">width</span>(<span class="hljs-number">20</span>)<br>        .<span class="hljs-title function_">height</span>(<span class="hljs-number">20</span>)<br>        .<span class="hljs-title function_">fill</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span>.<span class="hljs-property">defaultSelect</span> ? <span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span> : <span class="hljs-title class_">Color</span>.<span class="hljs-property">Gray</span>)<br>        .<span class="hljs-title function_">stroke</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span>.<span class="hljs-property">defaultSelect</span> ? <span class="hljs-title class_">Color</span>.<span class="hljs-property">Red</span> : <span class="hljs-title class_">Color</span>.<span class="hljs-property">Grey</span>)<br><br>    &#125;.<span class="hljs-title function_">padding</span>(&#123; <span class="hljs-attr">top</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">bottom</span>: <span class="hljs-number">10</span> &#125;).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onChangeSelect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span>.<span class="hljs-property">id</span>, !<span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span>.<span class="hljs-property">defaultSelect</span>)<br><br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@ObservedV2</span> <span class="hljs-comment">//修改为V2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CouponData</span> &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//修改为V2</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">defaultSelect</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">//修改为V2</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>当我们切换选中状态，然后点击刷新后，再次切换选中状态也是正常的。通过<code>CouponView</code>中<code>aboutToAppear</code>方法的日志，也可以看到只重绘了key发生改变的列表项。</p><p>所以，那么，因此，迁移到V2不？</p><p>你问我迁移了吗？正在迁移，或许等到V3出来，我就迁移完了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;状态管理V2已经出来好长时间了，移除GAP说明也有一段时间了，相信有一部分朋友已经开始着手从V1迁移到V2了，应该也踩了不少坑。&lt;br&gt;下面向大家分享一下我使用状态管理V1和Foreach时遇到的坑，以及状态管理V2在Foreach循环渲染中的表现。&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-多包开发:HAP、HAR和HSP</title>
    <link href="https://blog.huangyuanlove.com/2025/02/27/%E9%B8%BF%E8%92%99-%E5%A4%9A%E5%8C%85%E5%BC%80%E5%8F%91-HAP%E3%80%81HAR%E5%92%8CHSP/"/>
    <id>https://blog.huangyuanlove.com/2025/02/27/%E9%B8%BF%E8%92%99-%E5%A4%9A%E5%8C%85%E5%BC%80%E5%8F%91-HAP%E3%80%81HAR%E5%92%8CHSP/</id>
    <published>2025-02-27T02:01:17.000Z</published>
    <updated>2025-05-12T01:27:12.709Z</updated>
    
    <content type="html"><![CDATA[<p>支持模块化开发：将每个功能模块作为一个独立的 Module进行开发，Module 中可以包含源码、资源文件、第三方库、配置文件等，每一个 Module可以独立编译，实现特定的功能<br>支持多设备适配：每个 Module可以单独配置所支持的设备类型，那么在应用市场分发应用包时，也能够根据设备类型做精准的筛选和匹配，从而将不同的包合理的组合和部署到对应的设备上。</p><h2 id="Module-类型"><a href="#Module-类型" class="headerlink" title="Module 类型"></a>Module 类型</h2><h3 id="Ability类型的-Module"><a href="#Ability类型的-Module" class="headerlink" title="Ability类型的 Module"></a>Ability类型的 Module</h3><p>用于实现应用的功能和特性，每一个 Ability 类型的 Module编译后，会生成一个以<code>.hap</code>为后缀的文件，被称为HAP(Harmony Abilit Package)。可以被独立安装和运行，是应用安装的基本单位，一个应用中可以包含一个或多个HAP 包。其中又可以分为两种类型：<br>entry 类型的Module：应用主模块，包含应用的入口界面、入口图标和主功能特性，编译后生成entry 类型的 HAP。每一个应用分发到同一类型的设备上的应用程序包，只能包含唯一一个entry 类型的HAP，也可以不包含。<br>feature类型的 Module：应用的动态特性模块，编译后生成feature 类型的 HAP，一个应用可以包含一个或多个feature 类型的HAP，也可以不包含。</p><h3 id="Library类型的-Module"><a href="#Library类型的-Module" class="headerlink" title="Library类型的 Module"></a>Library类型的 Module</h3><p>用于实现代码和资源的共享，同一个Library 类型的 Module可以被其他的 Module多次引用。Library 类型的 Module分为 Static和 Shared 两种类型，编译后会生成共享包。<br>Static Library：静态共享库。编译后会生成一个以<code>.har</code>为后缀的文件，也就是静态共享包HAR(Harmony Archive)。<br>Shared Library：动态共享库，编译后会生成一个已<code>.hsp</code>为后缀的文件，也就是动态共享包HSR(Harmony Shared Package)</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>实际上，Shared Library编译后除了会生成一个 hsp 文件外，还会生成一个 har文件，这个 har 文件中包含了 hsp对外导出的接口，应用中其他模块需要通过har 文件来引用 hsp功能，为了表述方便，通常认为Shared Library编译后生成 HSP。来看一下二者的区别。</p><p>对于 HAR 文件来讲，其中的代码和资源跟随使用方编译，如果有多个使用方，他们的编译产物中会存在多份拷贝。建议开启混淆能力，保护代码资产。除了支持应用内引用，还可以独立打包发布，供其他应用引用。<br>对于 HSP 文件来讲，其中的代码和资源可以独立编译，运行时在一个进程中代码也只会存在一份。该文件一般随应用进行打包，当前支持应用内和集成态HSP。应用内HSP只支持应用内引用，集成态HSP支持发布到ohpm私仓和跨应用引用。</p><h3 id="HAP包限制"><a href="#HAP包限制" class="headerlink" title="HAP包限制"></a>HAP包限制</h3><ul><li><p>不支持导出接口和ArkUI组件，给其他模块使用。</p></li><li><p>多HAP场景下，App Pack包中同一设备类型的所有HAP中必须有且只有一个Entry类型的HAP，Feature类型的HAP可以有一个或者多个，也可以没有。</p></li><li><p>多HAP场景下，同一应用中的所有HAP的配置文件中的bundleName、versionCode、versionName、minCompatibleVersionCode、debug、minAPIVersion、targetAPIVersion、apiReleaseType相同，同一设备类型的所有HAP对应的moduleName标签必须唯一。HAP打包生成App Pack包时，会对上述参数配置进行校验。</p></li><li><p>多HAP场景下，同一应用的所有HAP、HSP的签名证书要保持一致。上架应用市场是以App Pack形式上架，应用市场分发时会将所有HAP从App Pack中拆分出来，同时对其中的所有HAP进行重签名，这样保证了所有HAP签名证书的一致性。在调试阶段，开发者通过命令行或DevEco Studio将HAP安装到设备上时，要保证所有HAP签名证书一致，否则会出现安装失败的问题。</p></li></ul><h3 id="HAR包限制"><a href="#HAR包限制" class="headerlink" title="HAR包限制"></a>HAR包限制</h3><ul><li><p>HAR不支持在设备上单独安装&#x2F;运行，只能作为应用模块的依赖项被引用。</p></li><li><p>HAR不支持在配置文件中声明ExtensionAbility组件，但支持UIAbility组件。</p><blockquote><p>说明<br>如果使用startAbility接口拉起HAR中的UIAbility，接口参数中的moduleName取值需要为依赖该HAR的HAP&#x2F;HSP的moduleName。</p></blockquote></li><li><p>HAR不支持在配置文件中声明pages页面，但是可以包含pages页面，并通过Navigation跳转的方式进行跳转。</p></li><li><p>HAR不支持引用AppScope目录中的资源。在编译构建时，AppScope中的内容不会打包到HAR中，因此会导致HAR资源引用失败。</p></li><li><p>HAR可以依赖其他HAR，但不支持循环依赖，也不支持依赖传递。</p></li></ul><h3 id="HSP包限制"><a href="#HSP包限制" class="headerlink" title="HSP包限制"></a>HSP包限制</h3><ul><li>HSP不支持在设备上单独安装&#x2F;运行，需要与依赖该HSP的HAP一起安装&#x2F;运行。HSP的版本号必须与HAP版本号一致。</li><li>HSP不支持在配置文件中声明ExtensionAbility组件，但支持在配置文件中声明UIAbility（除入口ability外）组件。</li><li>HSP可以依赖其他HAR或HSP，但不支持循环依赖，也不支持依赖传递。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;支持模块化开发：将每个功能模块作为一个独立的 Module进行开发，Module 中可以包含源码、资源文件、第三方库、配置文件等，每一个 Module可以独立编译，实现特定的功能&lt;br&gt;支持多设备适配：每个 Module可以单独配置所支持的设备类型，那么在应用市场分发应用包</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-状态管理V2其他方法</title>
    <link href="https://blog.huangyuanlove.com/2025/02/17/%E9%B8%BF%E8%92%99-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86V2%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.huangyuanlove.com/2025/02/17/%E9%B8%BF%E8%92%99-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86V2%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95/</id>
    <published>2025-02-17T13:40:11.000Z</published>
    <updated>2025-03-01T06:18:09.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除了之前介绍的状态管理装饰器，在 V2 中还有其他新增的方法。</p><h2 id="makeObserved"><a href="#makeObserved" class="headerlink" title="makeObserved"></a>makeObserved</h2><p>开发过程中我们经常会用到从服务器获取到数据(一般是 json 字符串)，转化为对象，然后设置到 UI 中做展示。但有一点比较麻烦：比如我们使用 rcp做网络请求，对返回对象调用<code>toJson() as xxx</code>转为对象，但这样获取到的对象是没办法被观察的，因为这样创建出来的对象不会被添加代理，这时候我们就可以使用<code>UIUtils.makeObserved(xxx)</code>来让改对象变为可观测的。  </p><p>比如：<br>定义两个数据类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@ObservedV2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-keyword">static</span> <span class="hljs-attr">staticProp</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">address</span>: <span class="hljs-title class_">Address</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>()<br>&#125;<br><br><span class="hljs-meta">@ObservedV2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">zipCode</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;000000&#x27;</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">city</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;北京&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们从 json 字符串中反序列化出来对象。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">aboutToAppear</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-meta">@Local</span> <span class="hljs-attr">jsonPerson</span>: <span class="hljs-title class_">Person</span> | <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">personJSON</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`</span><br><span class="hljs-string">  &#123;</span><br><span class="hljs-string">  &quot;name&quot;: &quot;huangyuan&quot;,</span><br><span class="hljs-string">  &quot;age&quot;: 19,</span><br><span class="hljs-string">  &quot;address&quot;: &#123;</span><br><span class="hljs-string">      &quot;zipCode&quot;: &quot;111111&quot;,</span><br><span class="hljs-string">      &quot;city&quot;: &quot;shangdong&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  `</span><br>  <span class="hljs-keyword">let</span> tmp = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(personJSON) <span class="hljs-keyword">as</span> <span class="hljs-title class_">Person</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">jsonPerson</span> = <span class="hljs-title class_">UIUtils</span>.<span class="hljs-title function_">makeObserved</span>(tmp)<br>&#125;<br></code></pre></td></tr></table></figure><p>这样<code>this.jsonPerson</code>就是可以被观测到的对象了。当我们修改该对象的属性，对应的 UI 也可以刷新了</p><h2 id="getTarget"><a href="#getTarget" class="headerlink" title="getTarget"></a>getTarget</h2><ul><li>在状态管理中V1中，会给@Observed装饰的类对象以及使用状态变量装饰器如@State装饰的Class、Date、Map、Set、Array添加一层代理用于观测一层属性或API调用产生的变化。</li><li>在状态管理V2中，会给使用状态变量装饰器如@Trace、@Local装饰的Date、Map、Set、Array添加一层代理用于观测API调用产生的变化。</li></ul><p>我们可以使用<code>UIUtils.getTarget(xxx)</code>来获取到代理对象的原始对象。 但是当我们更改getTarget获取的原始对象中的内容不会被观察到变化，也<strong>不会</strong>触发UI刷新</p><h2 id="ObservedV2的类实例不支持JSON-stringify序列化"><a href="#ObservedV2的类实例不支持JSON-stringify序列化" class="headerlink" title="@ObservedV2的类实例不支持JSON.stringify序列化"></a>@ObservedV2的类实例不支持JSON.stringify序列化</h2><p>这个主要是针对使用new操作符创建且被<code>@ObservedV2</code>装饰的对象。即便是使用<code>UIUtils.getTarget</code>方法来获取原始对象，也不会对V2装饰器生成的前缀进行处理:<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-new-makeobserved-V5"></a></p><blockquote><p>状态管理V2装饰器会为装饰的变量生成getter和setter方法，同时为原有变量名添加”_<em>ob</em>“的前缀。出于性能考虑，getTarget接口不会对V2装饰器生成的前缀进行处理，因此向getTarget接口传入@ObservedV2装饰的类对象实例时，返回的对象依旧为对象本身，且被@Trace装饰的属性名仍有”_<em>ob</em>“前缀。</p></blockquote><p>来看个例子：</p><p>还是上面定义的两个数据类，被<code>@ObservedV2</code>修饰。<br>再来创建两个实例对象，一个还是和上面一样从json字符串中反序列化，另外一个使用<code>new</code>操作符创建。</p><p>然后我们输出一下使用<code>JSON.stringify</code>序列化之后的字符串</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;makeObserved 转为json&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>  hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>,<span class="hljs-string">&#x27;StateManagerV2Page&#x27;</span>,<span class="hljs-string">`toJSON: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-variable language_">this</span>.jsonPerson)&#125;</span>`</span>)<br>&#125;)<br><span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;new对象 转为json&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>  hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>,<span class="hljs-string">&#x27;StateManagerV2Page&#x27;</span>,<span class="hljs-string">`toJSON: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-variable language_">this</span>.person)&#125;</span>`</span>)<br>&#125;)<br><span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;new对象 getTarget 转为json&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>  hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>,<span class="hljs-string">&#x27;StateManagerV2Page&#x27;</span>,<span class="hljs-string">`toJSON: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(UIUtils.getTarget(<span class="hljs-variable language_">this</span>.person))&#125;</span>`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>当我们一次点击这三个按钮后，控制台输出</p><blockquote><p>toJSON: {“name”:”huangyuan”,”age”:19,”address”:{“zipCode”:”111111”,”city”:”shangdong”}}<br>toJSON: {“__ob_name”:”xuan”,”__ob_age”:18,”__ob_address”:{“__ob_zipCode”:”000000”,”__ob_city”:”北京”}}<br>toJSON: {“__ob_name”:”xuan”,”__ob_age”:18,”__ob_address”:{“__ob_zipCode”:”000000”,”__ob_city”:”北京”}}</p></blockquote><p>可以看到，使用<code>new</code>操作符创建的ObservedV2对象属性都添加了<code>__ob_</code>前缀,而通过json 字符串反序列化之后再使用<code>UIUtils.makeObserved</code>方法添加代理之后的对象并没有添加<code>__ob_</code>前缀。</p><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p>在状态管理 V2 中，更倾向于单向数据流，所有可同步数据的修改都有父控件来处理，然后同步到子组件。 子组件想要修改数据时，需要调用用<code>@Event</code>修饰的回调方法。写起来略显繁琐，这里因此提供了<code>!!</code>双向绑定语法糖。<br>在使用时，子组件中<code>@Event</code>方法名需要声明为<code>“$”+ @Param</code>属性名，这里还有一些需要注意的地方</p><blockquote><p>如果父组件使用了!!双向绑定语法，则表明父组件的变化会同步给子组件，子组件的变化也会同步给父组件。<br>如果父组件没有使用!!，则父组件发生的变化是单向的。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Local</span> <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">4</span><br><span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Star</span>(&#123;<span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>!!&#125;) <span class="hljs-comment">//注意这里，在参数的末尾加了双叹号</span><br>&#125;<br><br><span class="hljs-meta">@ComponentV2</span><br>struct <span class="hljs-title class_">Star</span>&#123;<br><br>  <span class="hljs-meta">@Param</span> <span class="hljs-meta">@Require</span> <span class="hljs-attr">count</span>:<span class="hljs-built_in">number</span><br>  <span class="hljs-meta">@Event</span> <span class="hljs-attr">$count</span>:<span class="hljs-function">(<span class="hljs-params">val:<span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span><br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>()&#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`value <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.count&#125;</span>`</span>)<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;改变value&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.$count(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> +<span class="hljs-number">1</span>)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们点击<code>Star</code>中的<code>改变value</code>按钮时，组件中<code>count</code>值也会跟着改变。这个双向绑定的语法糖可以粗暴的理解为</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Star</span>(&#123; <span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, <span class="hljs-attr">$value</span>: <span class="hljs-function">(<span class="hljs-params">val: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = val &#125;&#125;)<br></code></pre></td></tr></table></figure><p>如果是较为复杂的属性变化，还是使用原始的方案，不要使用语法糖了。  </p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;除了之前介绍的状态管理装饰器，在 V2 中还有其他新增的方法。&lt;/p&gt;
&lt;h2 id=&quot;makeObserved&quot;&gt;&lt;a href=&quot;#ma</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-状态管理V2</title>
    <link href="https://blog.huangyuanlove.com/2025/02/08/%E9%B8%BF%E8%92%99-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86V2/"/>
    <id>https://blog.huangyuanlove.com/2025/02/08/%E9%B8%BF%E8%92%99-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86V2/</id>
    <published>2025-02-08T09:12:02.000Z</published>
    <updated>2025-02-13T09:57:42.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面我们讲了状态管理V1相关装饰器和注意事项，一般来讲是足够在开发中使用了，但还是有一些不方便的地方，因此又有了状态管理 V2。<br>截止到现在，V2的指南中已经移除了 gap提示，说明已经稳定可用。官方也希望我们尽快做迁移，当然，将来会不会出 V3 那就不得而知了。</p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>V2 版本的状态管理装饰器有以下几种，都是从api12开始支持。不过问题不大，目前应用市场上架鸿蒙应用最低版本要求就是api12</p><ul><li>@ComponentV2装饰器：自定义组件</li><li>@ObservedV2装饰器和@Trace装饰器</li><li>@Local装饰器：组件内部状态</li><li>@Param：组件外部输入</li><li>@Once：初始化同步一次</li><li>@Event装饰器：规范组件输出</li><li>@Provider装饰器和@Consumer装饰器：跨组件层级双向同步</li><li>@Monitor装饰器：状态变量修改监听</li><li>@Computed装饰器：计算属性</li></ul><h3 id="ComponentV2"><a href="#ComponentV2" class="headerlink" title="@ComponentV2"></a>@ComponentV2</h3><p>和V1中的@Component装饰器一样，@ComponentV2装饰器用于装饰自定义组件：只有在该装饰器修饰的类中才能使用，也仅能使用其他V2版本的状态管理装饰器，无法在同一个自定义组件中混用V1、V2装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@ComponentV2</span> <span class="hljs-comment">// 装饰器</span><br>struct <span class="hljs-title class_">Index</span> &#123; <span class="hljs-comment">// struct声明的数据结构</span><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// build定义的UI</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ObservedV2和-Trace"><a href="#ObservedV2和-Trace" class="headerlink" title="@ObservedV2和@Trace"></a>@ObservedV2和@Trace</h3><p>先来看下这两个，后续介绍其他装饰器时有用到。<br>这两个装饰器被用来做深度观测，也就是嵌套类的变化。在 V1 版本中，我们使用<code>@Observed</code>和<code>@ObjectLink</code>来实现，但有一个问题就是无法进行嵌套观测，只能观测当前层级的属性变化。V2 版本的这两个装饰器配合使用，可以实现跨嵌套层级观测。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@ObservedV2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">address</span>:<span class="hljs-title class_">Address</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>()<br>&#125;<br><br><span class="hljs-meta">@ObservedV2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span>&#123;<br>  <span class="hljs-meta">@Trace</span> zipCode : <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;000000&#x27;</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">city</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;北京&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个嵌套类，使用<code>@ObservedV2</code>装饰需要观测的类，并且在类中使用<code>@Trace</code>修饰每一个需要参与UI绘制的属性。当需要观测的类和属性较多时，写起来就比较恶心了。<br>还有一个非常恶心也非常麻烦的点：@ObservedV2的类实例目前不支持使用JSON.stringify进行序列化。</p><h3 id="Local"><a href="#Local" class="headerlink" title="@Local"></a>@Local</h3><p>该装饰器修饰的变量<strong>只能</strong>在本地初始化，不能由外部传入，目的是能更好的表示组件内部的状态，不会被外部传入参数影响。<br>和<code>@State</code>相比，它无法观察到class对象属性的赋值，仅能观察到对象的整体赋值，也就是说它的观测能力仅限于被装饰变量的本身。<br>当需要观察class对象属性的变化时，需要使用<code>@ObservedV2</code>和<code>@Trace</code>装饰器。<br>有一点需要注意的地方：在状态管理V2中，会给使用状态变量装饰器如@Trace、@Local装饰的Date、Map、Set、Array添加一层代理用于观测API调用产生的变化，因此我们在取其中的值进行比较时，需要使用<code>UIUtils.getTarget()</code>获取原始对象进行比较。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-attr">list</span>: <span class="hljs-built_in">string</span>[][] = [[<span class="hljs-string">&#x27;a&#x27;</span>], [<span class="hljs-string">&#x27;b&#x27;</span>], [<span class="hljs-string">&#x27;c&#x27;</span>]];<br><span class="hljs-meta">@Local</span> <span class="hljs-attr">strList</span>: <span class="hljs-built_in">string</span>[] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[<span class="hljs-number">0</span>];<br><span class="hljs-meta">@Monitor</span>(<span class="hljs-string">&quot;strList&quot;</span>)<br><span class="hljs-title function_">onStrChange</span>(<span class="hljs-params">monitor: IMonitor</span>) &#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;@Local&#x27;</span>, <span class="hljs-string">&#x27;strList has changed&#x27;</span>)<br>&#125;<br><br><span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>          <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改为同一个对象&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">strList</span> !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[<span class="hljs-number">0</span>]) &#123;<br>          hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;@Local&#x27;</span>, <span class="hljs-string">&#x27;重新赋值&#x27;</span>)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">strList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>      &#125;)<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改为同一个对象&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">UIUtils</span>.<span class="hljs-title function_">getTarget</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">strList</span>) !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[<span class="hljs-number">0</span>]) &#123;<br>          hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;@Local&#x27;</span>, <span class="hljs-string">&#x27;重新赋值&#x27;</span>)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">strList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>      &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们定义了一个二维数组，同时将数组第一项赋值给被<code>@Local</code>修饰的变量，同时使用<code>@Monitor</code>观察该变量的变化。<br>当我们点击第一个按钮时，发现控制台会打印<code>重新赋值</code>和<code>strList has changed</code>。当我们点击第二个按钮时，控制台没有打印。</p><h3 id="Param"><a href="#Param" class="headerlink" title="@Param"></a>@Param</h3><p>可以从父组件传入，也可以在本地初始化，如果配合<code>@Require</code>使用，则父组件必须传入该参数，此时本地初始化的值将被覆盖。<br>有一点需要注意：不能在组件内部直接修改变量本身，但可以修改类对象的属性;如何类对象属性<strong>没有</strong>被<code>@Trace</code>修饰，修改类对象属性也不会引起 UI 刷新<br>当我们在组件内部直接修改变量本身时，则会提示<code>Cannot assign to &#39;count&#39; because it is a read-only property.</code></p><p><img src="/image/HarmonyOS/%E4%BF%AE%E6%94%B9@Param%E5%8F%98%E9%87%8F%E6%8A%A5%E9%94%99%E6%8F%90%E7%A4%BA.png" alt="修改@Param变量报错提示"></p><h3 id="Once"><a href="#Once" class="headerlink" title="@Once"></a>@Once</h3><p>如果想要直接在组件内修改被<code>@Param</code>修饰的变量本身，可以配合<code>@Once</code>，但是，但是，但是，被<code>@Once</code>装饰的变量仅能在外部初始化一次，当在外部修改该变量本身时，不会同步到子组件。看下示例:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@ObservedV2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">address</span>:<span class="hljs-title class_">Address</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>()<br>&#125;<br><br><span class="hljs-meta">@ObservedV2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span>&#123;<br>  <span class="hljs-meta">@Trace</span> zipCode : <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;000000&#x27;</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">city</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;北京&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>两个数据类都被<code>@ObservedV2</code>修饰，属性都被<code>@Trace</code>修饰，方便我们观察数据变化。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><span class="hljs-meta">@ComponentV2</span><br>struct <span class="hljs-title class_">PersonView</span> &#123;<br>  <span class="hljs-meta">@Require</span> <span class="hljs-meta">@Param</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>  <span class="hljs-meta">@Param</span> <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;子组件内容，未被@Once 修饰&#x27;</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.name&#125;</span>  <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.age&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.count&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">name</span> += <span class="hljs-string">&#x27;a&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">age</span>++<br>      &#125;)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.address.zipCode&#125;</span>  <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.address.city&#125;</span>`</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-meta">@ComponentV2</span><br>struct <span class="hljs-title class_">PersonView2</span> &#123;<br>  <span class="hljs-meta">@Require</span> <span class="hljs-meta">@Param</span> <span class="hljs-meta">@Once</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>  <span class="hljs-meta">@Once</span> <span class="hljs-meta">@Param</span> <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;子组件内容，被@Once 修饰&#x27;</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.name&#125;</span>  <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.age&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.count&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">name</span> += <span class="hljs-string">&#x27;a&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">age</span>++<br>      &#125;)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.address.zipCode&#125;</span>  <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.address.city&#125;</span>`</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个自定义组件，其中 <code>PersonView2</code>内部的变量都是用<code>@Once</code>修饰。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Local</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;父组件内容&#x27;</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.name&#125;</span>  <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.age&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.count&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.address.zipCode&#125;</span>  <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.address.city&#125;</span>`</span>)<br><br>      <span class="hljs-title class_">PersonView</span>(&#123; <span class="hljs-attr">person</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>, <span class="hljs-attr">count</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> &#125;).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&quot;#66ace4&quot;</span>)<br>      <span class="hljs-title class_">PersonView2</span>(&#123; <span class="hljs-attr">person</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>, <span class="hljs-attr">count</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> &#125;).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&quot;#66ace4&quot;</span>)<br>      <span class="hljs-title class_">Flex</span>(&#123; <span class="hljs-attr">wrap</span>: <span class="hljs-title class_">FlexWrap</span>.<span class="hljs-property">Wrap</span>, <span class="hljs-attr">space</span>: &#123; <span class="hljs-attr">main</span>: <span class="hljs-title class_">LengthMetrics</span>.<span class="hljs-title function_">vp</span>(<span class="hljs-number">5</span>), <span class="hljs-attr">cross</span>: <span class="hljs-title class_">LengthMetrics</span>.<span class="hljs-title function_">vp</span>(<span class="hljs-number">5</span>) &#125; &#125;) &#123;<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改Person属性&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">age</span> += <span class="hljs-number">3</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">name</span> += <span class="hljs-string">&#x27;c&#x27;</span><br>        &#125;)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改Count&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += <span class="hljs-number">7</span><br>        &#125;)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改 address属性&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">address</span>.<span class="hljs-property">zipCode</span> += <span class="hljs-string">&#x27;9&#x27;</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">address</span>.<span class="hljs-property">city</span> += <span class="hljs-string">&#x27;w&#x27;</span><br>        &#125;)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;对Person重新赋值&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;new person&#x27;</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">age</span> = <span class="hljs-number">22</span><br>        &#125;)<br>      &#125;<br>    &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&quot;#55ff6134&quot;</span>)<br>  &#125;<br></code></pre></td></tr></table></figure><p>我们在父组件和两个子组件中传入了同一个<code>person</code>对象和<code>count</code>，然后用四个按钮来修改<code>person</code>对象的属性、修改<code>person</code>本身来做一个直观的展示</p><p><img src="/image/HarmonyOS/@Once%E6%95%88%E6%9E%9C.gif" alt="@Once装饰器作用"><br>可以从图中看到，当我们点击<code>修改Person属性</code>按钮时，父组件、两个子组件都可以刷新 UI，而点击<code>修改Count</code>和<code>对Person重新赋值</code>时，只有父组件和<code>PersonView</code>刷新了UI,可以看到<code>@Once</code>是拦截了数据源的变化，不影响<code>@Param</code>的观察能力。并且拦截的是数据源的赋值操作，修改其属性并不会被拦截。</p><p>还有一点就是，当我们点击<code>对Person重新赋值</code>后，再点击<code>修改Person属性</code>，发现只有父组件和<code>PersonView</code>刷新了UI，因为这时在父组件和<code>PersonView</code>中已经是新的对象了，而<code>PersonView2</code>中还是之前的对象，同步被打断，无法进行更新。</p><h3 id="Event"><a href="#Event" class="headerlink" title="@Event"></a>@Event</h3><p>上面说了这么多，但就是想做到像 V1中的数据双向同步怎么办？毕竟这是一个挺常见的需求。<br>假如不提供对应装饰器的话，我们可以很容易想到让父组件传入一个回调方法，当需要改变数据时，调用传入的回调方法，让父组件来更新数据。<br>在 V2 中也是这么做的：使用<code>@Event</code>装饰器装饰回调方法并调用，可以实现更改数据源的变量，再通过<code>@Local</code>的同步机制，将修改同步回<code>@Param</code>，以此达到主动更新<code>@Param</code>装饰变量的效果。<br>文档上解释说是为了<code>规范组件输出</code>:</p><blockquote><p>@Param标志着组件的输入，表明该变量受父组件影响，而@Event标志着组件的输出，可以通过该方法影响父组件。使用@Event装饰回调方法是一种规范，表明该回调作为自定义组件的输出。父组件需要判断是否提供对应方法用于子组件更改@Param变量的数据源。</p></blockquote><p>直接看示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@ComponentV2</span><br>struct <span class="hljs-title class_">ShowEventAnno</span> &#123;<br>  <span class="hljs-meta">@Event</span> <span class="hljs-attr">changeFontColor</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span><br>  <span class="hljs-meta">@Event</span> <span class="hljs-attr">changeFontSize</span>: <span class="hljs-function">(<span class="hljs-params">size: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">void</span><br>  <span class="hljs-meta">@Require</span> <span class="hljs-meta">@Param</span> <span class="hljs-attr">fontColor</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-meta">@Require</span> <span class="hljs-meta">@Param</span> <span class="hljs-attr">fontSize</span>: <span class="hljs-built_in">number</span><br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>()&#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;ShowEventAnno View&#x27;</span>).<span class="hljs-title function_">fontColor</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fontColor</span>).<span class="hljs-title function_">fontSize</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fontSize</span>)<br>      <span class="hljs-title class_">Row</span>()&#123;<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改文字大小&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>          <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">changeFontSize</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">changeFontSize</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fontSize</span> +<span class="hljs-number">2</span>)<br>          &#125;<br>        &#125;)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改文字颜色&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>          <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">changeFontColor</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">changeFontColor</span>()<br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用@Event装饰箭头函数，这个函数的参数、返回值类型没有要求。当我们需要修改<code>@Param</code>修饰的变量时，比如在点击事件中，可以调用传入的@Event 修饰的函数，通知父控件对数据进行修改。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Local</span> <span class="hljs-attr">fontColor</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;#ff6134&#x27;</span><br><span class="hljs-meta">@Local</span> <span class="hljs-attr">fontSize</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">14</span><br><span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">ShowEventAnno</span>(&#123;<br>      <span class="hljs-attr">fontColor</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">fontColor</span>,<br>      <span class="hljs-attr">fontSize</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">fontSize</span>,<br>      <span class="hljs-attr">changeFontColor</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">fontColor</span> == <span class="hljs-string">&#x27;#ff6134&#x27;</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">fontColor</span> = <span class="hljs-string">&#x27;#39d167&#x27;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">fontColor</span> = <span class="hljs-string">&#x27;#ff6134&#x27;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">changeFontSize</span>: <span class="hljs-function">(<span class="hljs-params">size: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">fontSize</span> = size<br>      &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的是，使用@Event修改父组件的值是立刻生效的，但从父组件将变化同步回子组件的过程是异步的，即在调用完@Event的方法后，子组件内的值不会立刻变化。这是因为@Event将子组件值实际的变化能力交由父组件处理，在父组件实际决定如何处理后，将最终值在渲染之前同步回子组件。</p><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="@Monitor"></a>@Monitor</h3><p>可以用来监听状态变量的改变，在V1版本的<code>@Watch</code>中，无法实现对对象、数组中某一单个属性或数组项变化的监听，且无法获取变化之前的值。并且<code>@Monitor</code>既可以用在自定义组件中，也可以用在数据类中，可以同时监听多个对象属性，也可以精确的监听对象的某个属性。<br>需要注意的是：</p><ul><li>监听的变量需要被@Local、@Param、@Provider、@Consumer、@Computed装饰，未被状态变量装饰器装饰的变量在变化时无法被监听。@Monitor可以同时监听多个状态变量，这些变量名之间用”,”隔开。</li><li>监听的状态变量为类对象时，仅能监听对象整体的变化。监听类属性的变化需要类属性被@Trace装饰，未被@Trace装饰的属性的变化无法被监听。</li><li>支持对数组中的项进行监听，包括多维数组，对象数组。@Monitor无法监听内置类型（Array、Map、Date、Set）的API调用引起的变化。当@Monitor监听数组整体时，只能观测到数组整体的赋值。可以通过监听数组的长度变化来判断数组是否有插入、删除等变化。当前仅支持使用”.”的方式表达深层属性、数组项的监听。</li></ul><p>一个简单的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Local</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;xuan&quot;</span>;<br><span class="hljs-meta">@Local</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">12</span>;<br><span class="hljs-meta">@Monitor</span>(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>)<br><span class="hljs-title function_">onStrChange</span>(<span class="hljs-params">monitor: IMonitor</span>) &#123;<br>  monitor.<span class="hljs-property">dirty</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">paramsName: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;MonitorPage&#x27;</span>,<br>      <span class="hljs-string">`属性名：<span class="hljs-subst">$&#123;paramsName&#125;</span>  由 <span class="hljs-subst">$&#123;monitor.value(paramsName)?.before&#125;</span> 修改为 <span class="hljs-subst">$&#123;monitor.value(paramsName)?.now&#125;</span>`</span>)<br>  &#125;)<br>&#125;<br><span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Column</span>() &#123;<br>    <span class="hljs-title class_">Text</span>(<span class="hljs-string">`name:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>  message:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>`</span>)<br>    <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;修改简单类型变量&quot;</span>)<br>      .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> += <span class="hljs-string">&quot;a&quot;</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> += <span class="hljs-number">3</span><br>      &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们点击<code>修改简单类型变量</code>按钮时，会触发<code>@Monitor</code>装饰的方法，但需要注意的是，该方法的参数是<code>IMonitor</code>类型，它有两个属性： <code>dirty: Array&lt;string&gt;</code>和<code>value&lt;T&gt;(path?: string): IMonitorValue&lt;T&gt; | undefined</code>，其中<code>dirty</code>保存发生变化的属性名。而<code>value</code>是一个方法，用于获取指定属性的变化信息，当该方法有返回值时，返回值是<code>IMonitorValue</code>类型，包含<code>before</code>、<code>now</code>和<code>path</code>属性。</p><p>我们还可以精确的监听类对象的某个属性，这个监听可以写在类中，也可以写在控件中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><span class="hljs-meta">@ObservedV2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;Tom&quot;</span>;<br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">region</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;North&quot;</span>;<br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">job</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;Teacher&quot;</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">25</span>;<br><br>  <span class="hljs-comment">// name被@Trace装饰，能够监听变化</span><br>  <span class="hljs-meta">@Monitor</span>(<span class="hljs-string">&quot;name&quot;</span>)<br>  <span class="hljs-title function_">onNameChange</span>(<span class="hljs-params">monitor: IMonitor</span>) &#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;MonitorTest&#x27;</span>, <span class="hljs-string">`name change from <span class="hljs-subst">$&#123;monitor.value()?.before&#125;</span> to <span class="hljs-subst">$&#123;monitor.value()?.now&#125;</span>`</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// age未被@Trace装饰，不能监听变化</span><br>  <span class="hljs-meta">@Monitor</span>(<span class="hljs-string">&quot;age&quot;</span>)<br>  <span class="hljs-title function_">onAgeChange</span>(<span class="hljs-params">monitor: IMonitor</span>) &#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;MonitorTest&#x27;</span>, <span class="hljs-string">`age change from <span class="hljs-subst">$&#123;monitor.value()?.before&#125;</span> to <span class="hljs-subst">$&#123;monitor.value()?.now&#125;</span>`</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// region与job均被@Trace装饰，能够监听变化</span><br>  <span class="hljs-meta">@Monitor</span>(<span class="hljs-string">&quot;region&quot;</span>, <span class="hljs-string">&quot;job&quot;</span>)<br>  <span class="hljs-title function_">onChange</span>(<span class="hljs-params">monitor: IMonitor</span>) &#123;<br>    monitor.<span class="hljs-property">dirty</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">path: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>      hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;MonitorTest&#x27;</span>,<br>        <span class="hljs-string">`<span class="hljs-subst">$&#123;path&#125;</span> change from <span class="hljs-subst">$&#123;monitor.value(path)?.before&#125;</span> to <span class="hljs-subst">$&#123;monitor.value(path)?.now&#125;</span>`</span>);<br>    &#125;)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在控件中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">  <span class="hljs-meta">@Local</span> <span class="hljs-attr">monitorTest</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>  <span class="hljs-meta">@Monitor</span>(<span class="hljs-string">&quot;monitorTest.name&quot;</span>)<br>  <span class="hljs-title function_">onChangeName</span>(<span class="hljs-params">monitor: IMonitor</span>) &#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;MonitorPage&#x27;</span>, <span class="hljs-string">&#x27;在自定义控件中监听对象属性变化：&#x27;</span> +<br>      <span class="hljs-string">`<span class="hljs-subst">$&#123;monitor.value()?.path&#125;</span> 由 <span class="hljs-subst">$&#123;monitor.value()?.before&#125;</span> 修改为 <span class="hljs-subst">$&#123;monitor.value()?.now&#125;</span>`</span>)<br>  &#125;<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">Column</span>() &#123;<br>        <span class="hljs-title class_">Text</span>(<span class="hljs-string">`name: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.monitorTest.name&#125;</span> ,age:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.monitorTest.age&#125;</span> ,region: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.monitorTest.region&#125;</span>, job:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.monitorTest.job&#125;</span>`</span>)<br>          .<span class="hljs-title function_">padding</span>(<span class="hljs-number">4</span>)<br>          .<span class="hljs-title function_">borderWidth</span>(<span class="hljs-number">1</span>)<br>          .<span class="hljs-title function_">borderColor</span>(<span class="hljs-string">&quot;#887612&quot;</span>)<br><br><br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;change name&quot;</span>)<br>          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">monitorTest</span>.<span class="hljs-property">name</span> += <span class="hljs-string">&#x27;b&#x27;</span>; <span class="hljs-comment">// 能够触发onNameChange方法</span><br>          &#125;)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;change age&quot;</span>)<br>          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">monitorTest</span>.<span class="hljs-property">age</span> += <span class="hljs-number">1</span>; <span class="hljs-comment">// 不能够触发onAgeChange方法</span><br>          &#125;)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;change region&quot;</span>)<br>          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">monitorTest</span>.<span class="hljs-property">region</span> +=<span class="hljs-string">&#x27;region &#x27;</span>; <span class="hljs-comment">// 能够触发onChange方法</span><br>          &#125;)<br>        <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;change job&quot;</span>)<br>          .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">monitorTest</span>.<span class="hljs-property">job</span> +=<span class="hljs-string">&#x27;job &#x27;</span>; <span class="hljs-comment">// 能够触发onChange方法</span><br>          &#125;)<br>      &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>这个也有一点需要注意，当我们对类对象重新赋值，但是赋值前后类对象的属性值不变，也不会触发<code>@Monitor</code>回调。<br>还有一点需要注意的是监听的生效和失效时间：<br>当在组件中使用时，<code>@Monitor</code>会在状态变量初始化完成之后生效，并在组件销毁时失效。<br>当在类中使用时，<code>@Monitor</code>会在类创建完成后生效，在类销毁时失效。这个时机晚于类的constructor，早于自定义组件的aboutToAppear。然而由于类的实际销毁释放依赖于垃圾回收机制，因此会出现即使所在自定义组件已经销毁，类却还未及时销毁，导致类中定义的@Monitor仍在监听变化的情况。</p><h3 id="Computed"><a href="#Computed" class="headerlink" title="@Computed"></a>@Computed</h3><p>千呼万唤始出来的装饰器，谁家的状态管理还没有计算属性哇<br>该装饰器为方法装饰器，装饰getter方法。<code>@Computed</code>会检测被计算的属性变化，当被计算的属性变化时，<code>@Computed</code>只会被求解一次。<br>该装饰器既可以在组件中使用，也可以在数据类中使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@ObservedV2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span> =<span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-meta">@Trace</span> <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br><br>  <span class="hljs-meta">@Computed</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">info</span>()&#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>,<span class="hljs-string">&#x27;ComputedPge&#x27;</span>,<span class="hljs-string">&quot;在数据类中获取所有信息&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`name:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> , age:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>`</span><br>  &#125;<br>&#125;<br>  <span class="hljs-meta">@Local</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;xuan&#x27;</span>;<br>  <span class="hljs-meta">@Local</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">18</span>;<br>  <span class="hljs-meta">@Local</span> <span class="hljs-attr">address</span>:<span class="hljs-built_in">string</span>=<span class="hljs-string">&#x27;北京&#x27;</span><br><br>  <span class="hljs-meta">@Local</span> <span class="hljs-attr">person</span>:<span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>  <span class="hljs-meta">@Computed</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">info</span>() &#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>,<span class="hljs-string">&#x27;ComputedPge&#x27;</span>,<span class="hljs-string">&quot;获取所有信息&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`name:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> ,age:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span> , address:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.address&#125;</span>`</span><br>  &#125;<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br><br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.info&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.info&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.info&#125;</span>`</span>)<br><br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改简单属性&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>++;<br>      &#125;)<br><br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.info&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.info&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.info&#125;</span>`</span>)<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改对象属性&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">name</span> +=<span class="hljs-string">&#x27;p&#x27;</span><br>      &#125;)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>可以在控制台看到，虽然我们展示多次，但控制台只打印了一次信息；当我们分别点击<code>修改简单属性</code>和<code>修改对象属性</code>时，控制台也是打印一次信息。<br>这里还有个注意点：@Computed装饰的属性可以初始化@Param</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前面我们讲了状态管理V1相关装饰器和注意事项，一般来讲是足够在开发中使用了，但还是有一些不方便的地方，因此又有了状态管理 V2。&lt;br&gt;截止</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-状态管理V1</title>
    <link href="https://blog.huangyuanlove.com/2025/01/26/%E9%B8%BF%E8%92%99-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86V1/"/>
    <id>https://blog.huangyuanlove.com/2025/01/26/%E9%B8%BF%E8%92%99-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86V1/</id>
    <published>2025-01-26T07:31:53.000Z</published>
    <updated>2025-02-12T08:38:07.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着鸿蒙Next的推广，做鸿蒙开发的人是越来越多，提问和寻求帮助的人也是越来越多，就我自己回答的问题而言，大部分和状态管理相关，比如List刷新问题，，还有一些录音录像拍照问题。也不是太难的问题，需要特别仔细的阅读官方文档，有些问题的解决方法还分散在好几个文档里面，文档上也没有对一些关键点做特别讲解。这里就最常见的问题总结一下，希望后来的朋友少走一些弯路。</p><h2 id="状态管理V1"><a href="#状态管理V1" class="headerlink" title="状态管理V1"></a>状态管理V1</h2><p>组件的状态管理一共就这几个：<br>@State装饰器：组件内状态<br>@Prop装饰器：父子单向同步<br>@Link装饰器：父子双向同步<br>@Observed装饰器和@ObjectLink装饰器：嵌套类对象属性变化<br>@Provide装饰器和@Consume装饰器：与后代组件双向同步<br>其中<br>@Provide和@Consume群里也几乎没有人问过，姑且认为是大家都比较清楚应该怎么使用或者用的较少</p><h3 id="State装饰器"><a href="#State装饰器" class="headerlink" title="@State装饰器"></a>@State装饰器</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><strong>必须</strong>本地初始化。如果从父组件初始化，并且从父组件传入的值非<code>undefined</code>，将会覆盖本地初始化；如果从父组件传入的值为<code>undefined</code>，则初值为<code>@State</code>装饰变量自身的初值。<br>也就是说无论父组件是否传值，被<code>@State</code>修饰的变量都必须要指定初始值，即使被<code>@Require</code>修饰也必须指定初始值。</p><h4 id="观察能力"><a href="#观察能力" class="headerlink" title="观察能力"></a>观察能力</h4><p>能观察到简单对象的变化；能观察到class 或者 Object 的赋值变化；能观察到其属性赋值的变化，但无法观察嵌套类属性赋值的变化;<br>看个例子，假设我们的数据类是这样的:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OutClass</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">outClassName: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">outClassName</span> = outClassName<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerClass</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClass</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;outClassName&#125;</span>_innerClass`</span>)<br>  &#125;<br>  <span class="hljs-attr">outClassName</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">innerClass</span>: <span class="hljs-title class_">InnerClass</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">innerClassName: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerClassName</span> = innerClassName<br>  &#125;<br>  <span class="hljs-attr">innerClassName</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们的业务逻辑姑且简化为这样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">AboutStateAnno</span> &#123;<br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">grade</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;a&#x27;</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">success</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span><br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">outClass</span>: <span class="hljs-title class_">OutClass</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutClass</span>(<span class="hljs-string">&quot;out_class&quot;</span>)<br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`count: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.count&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`grade: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.grade&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`success: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.success&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`out_class_name: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.outClass.outClassName&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`inner_class_name: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.outClass.innerClass.innerClassName&#125;</span>`</span>)<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;改变简单数据,UI刷新&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> ++<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">success</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">success</span><br>      &#125;)<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;改变outClassName,UI刷新&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">outClass</span>.<span class="hljs-property">outClassName</span> = <span class="hljs-string">&#x27;out_afterChange&#x27;</span><br>      &#125;)<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;改变innerClassName,UI不刷新&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">outClass</span>.<span class="hljs-property">innerClass</span>.<span class="hljs-property">innerClassName</span> = <span class="hljs-string">&#x27;inner_afterChange&#x27;</span><br>      &#125;)<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;改变innerClass,UI刷新&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">outClass</span>.<span class="hljs-property">innerClass</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClass</span>(<span class="hljs-string">&#x27;new inner_class&#x27;</span>)<br>      &#125;)<br><br>    &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">borderRadius</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-title class_">Color</span>.<span class="hljs-property">Gray</span>).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到，改变简单数据后，UI 直接刷新了。修改对象中的属性，UI 也刷新了，但是在改变嵌套类属性时(改变innerClassName,UI不刷新)，UI 没有刷新，也就是说改变<code>Object.keys(observedObject)</code>返回的所有属性时，UI都可以刷新。<br>同样的，对于数组类型来讲：数组的整体赋值，数组项的赋值，调用 pop 和 push 也能观察到。<br>对于<code>Map</code>来讲：可以观察到<code>Map</code>整体的赋值，同时可通过调用<code>Map</code>的接口<code>set</code>, <code>clear</code>, <code>delete</code> 更新Map的值。<br>对于<code>Set</code>来讲：可以观察到<code>Set</code>整体的赋值，同时可通过调用<code>Set</code>的接口<code>add</code>, <code>clear</code>, <code>delete</code> 更新Set的值。<br>这里就不再过多赘述。</p><h4 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h4><p>但这里有个比较麻烦的地方：当在build方法内，当@State装饰的变量是Object类型、且通过a.b(this.object)形式调用时，<strong>修改对象中的属性后，UI 无法刷新</strong><br>比如有一个 Person 类，有个 age 属性，我们定义一个方法用来修改 age 属性。我能想到的大概有这么 5 种方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-comment">//方法 1：定义一个工具类，写个静态方法，传入 person 对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddAge</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">addAge</span>(<span class="hljs-params">person: Person</span>) &#123;<br>    person.<span class="hljs-property">age</span> += <span class="hljs-number">2</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//方法 2：定义一个工具类，写个普通方法，传入 person 对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddAge1</span> &#123;<br>  <span class="hljs-title function_">addAge</span>(<span class="hljs-params">person: Person</span>) &#123;<br>    person.<span class="hljs-property">age</span> += <span class="hljs-number">2</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//方法 3：在组件中定义一个方法，传入 person 对象</span><br><span class="hljs-title function_">addAge1</span>(<span class="hljs-params">person: Person</span>) &#123;<br>  person.<span class="hljs-property">age</span> += <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-comment">//方法 4：在组件中定义一个方法，直接修改 person 对象</span><br><span class="hljs-title function_">addAge</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">age</span> += <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-comment">//方法 5：在需要的地方直接修改 person 对象的 age 属性，比如在onClick事件中</span><br><span class="hljs-title class_">Text</span>(<span class="hljs-string">`person.add:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person.age&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">person</span>.<span class="hljs-property">age</span> += <span class="hljs-number">2</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们来试一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@State</span> <span class="hljs-attr">person1</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-meta">@State</span> <span class="hljs-attr">person2</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-meta">@State</span> <span class="hljs-attr">person3</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-meta">@State</span> <span class="hljs-attr">person4</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-meta">@State</span> <span class="hljs-attr">person5</span>: <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Column</span>() &#123;<br>  <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person1.add: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person1.age&#125;</span>`</span>)<br>    .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>      <span class="hljs-title class_">AddAge</span>.<span class="hljs-title function_">addAge</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">person1</span>)<br>    &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>  <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person2.add:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person2.age&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddAge1</span>().<span class="hljs-title function_">addAge</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">person2</span>)<br>  &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>  <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person3.add:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person3.age&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addAge1</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">person3</span>)<br>  &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>  <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person4.add:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person4.age&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addAge</span>()<br>  &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>  <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person5.add:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person5.age&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">person5</span>.<span class="hljs-property">age</span> += <span class="hljs-number">2</span>;<br>  &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>&#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>会发现只有方法 4 和方法 5 才能使得UI 刷新，这是因为方法内传过去的是原生对象，修改其属性后不能触发刷新。如果我们有一些理由非得这么做，可以先赋值给一个临时变量，再将这个临时变量传入方法中，就可以刷新 UI 了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Column</span>() &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person1.add: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person1.age&#125;</span>`</span>)<br>        .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">let</span> tmp = <span class="hljs-variable language_">this</span>.<span class="hljs-property">person1</span><br>          <span class="hljs-title class_">AddAge</span>.<span class="hljs-title function_">addAge</span>(tmp)<br>        &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person2.add:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person2.age&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> tmp = <span class="hljs-variable language_">this</span>.<span class="hljs-property">person2</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddAge1</span>().<span class="hljs-title function_">addAge</span>(tmp)<br>      &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person3.add:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person3.age&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> tmp = <span class="hljs-variable language_">this</span>.<span class="hljs-property">person3</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addAge1</span>(tmp)<br>      &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person4.add:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person4.age&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addAge</span>()<br>      &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`person5.add:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.person5.age&#125;</span>`</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">person5</span>.<span class="hljs-property">age</span> += <span class="hljs-number">2</span>;<br>      &#125;).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>    &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>  &#125;.<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>  .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>没想到吧，哈哈哈哈哈</p><h3 id="Prop装饰器-和-Link装饰器"><a href="#Prop装饰器-和-Link装饰器" class="headerlink" title="@Prop装饰器 和 @Link装饰器"></a>@Prop装饰器 和 @Link装饰器</h3><p>这两个装饰器的观察能力和坑点和@State 相同，只不过是用来自定义的子组件中。<br>其中@Prop装饰器是父组件向子组件同步数据：子组件改变数据不会同步到父组件，但父组件修改数据会同步到子组件。也就是说父组件的修改会覆盖掉子组件对变量的修改，并且被它装饰的变量会进行深拷贝，在拷贝的过程中除了基本类型、Map、Set、Date、Array外，都会丢失类型。因此建议深度嵌套的数据不要太多，文档上建议不要超过 5 层。<br>@Link装饰器是父子组件双向同步的，但禁止本地进行初始化。</p><h3 id="Observed装饰器和-ObjectLink装饰器"><a href="#Observed装饰器和-ObjectLink装饰器" class="headerlink" title="@Observed装饰器和@ObjectLink装饰器"></a>@Observed装饰器和@ObjectLink装饰器</h3><p>在实际开发中，我们使用的数据模型一般都会有多层嵌套的情况，但之前介绍过的装饰器只能观察到第一层变化，无法观察到第二层变化，这种情况我们就需要使用<code>@Observed</code>和<code>@ObjectLink</code>装饰器.</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p><code>@Observed</code>装饰class。需要放在class的定义前，使用<code>new</code>创建类对象。<br><code>@ObjectLink</code>变量装饰器只能装饰被<code>@Observed</code>装饰的class实例，<strong>必须</strong>指定类型，并且不支持简单类型。</p><p>另外这两个装饰器是配套使用的，单一的使用某个装饰器无法实现观察，并且<code>@ObjectLink</code>只能装饰被<code>@Observed</code>装饰的类对象变量，否则会报错</p><blockquote><p>The ‘@ObjectLink’ decorated attribute ‘education’ must be an ‘@Observed’ decorated class or a union of ‘@Observed’ decorated class and undefined or null, or both. <ArkTSCheck></p></blockquote><p><img src="/image/HarmonyOS/ObjectLink%E4%BF%AE%E9%A5%B0%E6%B2%A1%E6%9C%89%E8%A2%ABObserved%E8%A3%85%E9%A5%B0%E7%9A%84%E7%B1%BB%E5%AF%B9%E8%B1%A1.png" alt="ObjectLink修饰没有被Observed装饰的类对象">  </p><p>我们先定义一个数据类，来模拟一下业务逻辑：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><span class="hljs-meta">@Observed</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">address</span>: <span class="hljs-title class_">Address</span><br>  <span class="hljs-attr">education</span>: <span class="hljs-title class_">Education</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span>, name: <span class="hljs-built_in">string</span>, address: Address, education: Education</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = address;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">education</span> = education;<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Observed</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>  <span class="hljs-attr">zipCode</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">location</span>: <span class="hljs-built_in">string</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">zipCode: <span class="hljs-built_in">number</span>, location: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">zipCode</span> = zipCode;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">location</span> = location;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Education</span> &#123;<br>  <span class="hljs-attr">school</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">degree</span>: <span class="hljs-built_in">string</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">school: <span class="hljs-built_in">string</span>, degree: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">school</span> = school;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">degree</span> = degree;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里还有一点需要注意的，到目前为止<code>@ObjectLink</code>必须在自定义组件中使用。我们这里定义两个组件，用来展示<code>Address</code>和<code>Education</code>.  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">UserAddress</span> &#123;<br>  <span class="hljs-meta">@ObjectLink</span> <span class="hljs-attr">address</span>: <span class="hljs-title class_">Address</span><br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`location:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.address.location&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`zipCode:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.address.zipCode&#125;</span>`</span>)<br>    &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">padding</span>(<span class="hljs-number">5</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">UserEducation</span> &#123;<br>  <span class="hljs-meta">@Prop</span> <span class="hljs-attr">education</span>: <span class="hljs-title class_">Education</span><br><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`school:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.education.school&#125;</span>`</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`degree:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.education.degree&#125;</span>`</span>)<br>    &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">padding</span>(<span class="hljs-number">5</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单的写个页面，看下效果。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@State</span> <span class="hljs-attr">user</span>: <span class="hljs-title class_">User</span> | <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-title function_">aboutToAppear</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//这里必须使用 new 关键字创建对象，使用字面量创建出来的对象无法被观察</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">address</span>: <span class="hljs-title class_">Address</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>(<span class="hljs-number">10000</span>, <span class="hljs-string">&quot;北京&quot;</span>)<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">education</span>: <span class="hljs-title class_">Education</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Education</span>(<span class="hljs-string">&#x27;university&#x27;</span>, <span class="hljs-string">&#x27;Master&#x27;</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;new User&#x27;</span>, address, education) <br>&#125;<br><span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>) &#123;<br>        <span class="hljs-title class_">Text</span>(<span class="hljs-string">`id:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.user.id&#125;</span> , name:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.user.name&#125;</span>`</span>)<br>        <span class="hljs-title class_">UserAddress</span>(&#123; <span class="hljs-attr">address</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">address</span> &#125;)<br>        <span class="hljs-title class_">UserEducation</span>(&#123; <span class="hljs-attr">education</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">education</span> &#125;)<br>        <span class="hljs-title class_">Flex</span>(&#123; <span class="hljs-attr">wrap</span>: <span class="hljs-title class_">FlexWrap</span>.<span class="hljs-property">Wrap</span>, <span class="hljs-attr">space</span>: &#123; <span class="hljs-attr">cross</span>: <span class="hljs-title class_">LengthMetrics</span>.<span class="hljs-title function_">vp</span>(<span class="hljs-number">5</span>), <span class="hljs-attr">main</span>: <span class="hljs-title class_">LengthMetrics</span>.<span class="hljs-title function_">vp</span>(<span class="hljs-number">5</span>) &#125; &#125;) &#123;<br>          <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改 name&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>) &#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">name</span> += <span class="hljs-string">&#x27;a&#x27;</span><br>            &#125;<br>          &#125;)<br>          <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改address.location&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>) &#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">address</span>.<span class="hljs-property">location</span> += <span class="hljs-string">&#x27;b&#x27;</span><br>            &#125;<br>          &#125;)<br>          <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改education.degree&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>) &#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">education</span>.<span class="hljs-property">degree</span> += <span class="hljs-string">&#x27;c&#x27;</span><br>            &#125;<br>          &#125;)<br>        &#125;<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，点击<code>修改 name</code>和<code>修改address.location</code>都可以引起 UI 刷新，但点击<code>修改education.degree</code>UI不会刷新。</p><p>另外还有一点需要注意的：被@Observed 修饰的嵌套类，不能跨嵌套层观察。举个例子：我们有一个嵌套的三层的数据类，我们是无法在第二层的自定义控件中观察到第三层数据的变化。示例如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//嵌套了三层的数据类：也就是A类中有类型为B的属性，B类中又有类型为C的属性 </span><br><span class="hljs-meta">@Observed</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstLevel</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">secondLevel</span>: <span class="hljs-title class_">SecondLevel</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, secondLevel: SecondLevel</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">secondLevel</span> = secondLevel;<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Observed</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondLevel</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">thirdLevel</span>: <span class="hljs-title class_">ThirdLevel</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, thirdLevel: ThirdLevel</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">thirdLevel</span> = thirdLevel;<br>  &#125;<br>&#125;<br><span class="hljs-meta">@Observed</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThirdLevel</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们定义两个用来展示<code>SecondLevel</code>和<code>ThirdLevel</code>的控件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">SecondLevelView</span>&#123;<br>  <span class="hljs-meta">@ObjectLink</span> <span class="hljs-attr">secondLevel</span>:<span class="hljs-title class_">SecondLevel</span><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>()&#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`second level:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.secondLevel.name&#125;</span>`</span>)<br>      <span class="hljs-comment">//这里直接跨层级观察是无效的，修改thirdLevel.name时 UI 不会刷新</span><br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">`third level name:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.secondLevel.thirdLevel.name&#125;</span>`</span>)<br>      <span class="hljs-title class_">ThirdLevelView</span>(&#123;<span class="hljs-attr">thirdLevel</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">secondLevel</span>.<span class="hljs-property">thirdLevel</span>&#125;).<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#846f9b&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>    &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>  &#125;<br>&#125;<br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">ThirdLevelView</span>&#123;<br>  <span class="hljs-meta">@ObjectLink</span> <span class="hljs-attr">thirdLevel</span>:<span class="hljs-title class_">ThirdLevel</span><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Text</span>(<span class="hljs-string">`third level: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.thirdLevel.name&#125;</span>`</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着写个页面试一下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@State</span> <span class="hljs-attr">firstLevel</span>:<span class="hljs-title class_">FirstLevel</span> | <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-title function_">aboutToAppear</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">thirdLevel</span>:<span class="hljs-title class_">ThirdLevel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThirdLevel</span>(<span class="hljs-string">&#x27;third level&#x27;</span>)<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">secondLevel</span>:<span class="hljs-title class_">SecondLevel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondLevel</span>(<span class="hljs-string">&#x27;second level&#x27;</span>,thirdLevel)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstLevel</span>(<span class="hljs-string">&#x27;first level&#x27;</span>,secondLevel)<br>&#125;<br><span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Column</span>() &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>)&#123;<br>      <span class="hljs-title class_">Column</span>()&#123;<br>        <span class="hljs-title class_">Text</span>(<span class="hljs-string">`first level:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.firstLevel.name&#125;</span>`</span>)<br>        <span class="hljs-title class_">SecondLevelView</span>(&#123;<span class="hljs-attr">secondLevel</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">secondLevel</span>&#125;).<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&#x27;#aa42f5&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br><br>        <span class="hljs-title class_">Flex</span>(&#123; <span class="hljs-attr">wrap</span>: <span class="hljs-title class_">FlexWrap</span>.<span class="hljs-property">Wrap</span>, <span class="hljs-attr">space</span>: &#123; <span class="hljs-attr">cross</span>: <span class="hljs-title class_">LengthMetrics</span>.<span class="hljs-title function_">vp</span>(<span class="hljs-number">5</span>), <span class="hljs-attr">main</span>: <span class="hljs-title class_">LengthMetrics</span>.<span class="hljs-title function_">vp</span>(<span class="hljs-number">5</span>) &#125; &#125;) &#123;<br>          <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改 firstLevel.name&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>)&#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">name</span>  += <span class="hljs-string">&#x27;a&#x27;</span><br>            &#125;<br>          &#125;)<br>          <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改 secondLevel.name&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>)&#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">secondLevel</span>.<span class="hljs-property">name</span>  += <span class="hljs-string">&#x27;a&#x27;</span><br>            &#125;<br>          &#125;)<br>          <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改 thirdLevel.name&#x27;</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>)&#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">secondLevel</span>.<span class="hljs-property">thirdLevel</span>.<span class="hljs-property">name</span>  += <span class="hljs-string">&#x27;a&#x27;</span><br>            &#125;<br>          &#125;)<br>        &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>      &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">padding</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&quot;#657e57&quot;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/HarmonyOS/%E8%B7%A8%E5%B5%8C%E5%A5%97%E5%B1%82%E7%BA%A7%E8%A7%82%E5%AF%9F%E5%A4%B1%E8%B4%A5.gif" alt="跨嵌套层级观察失效"><br>可以看到，在对应的层级观察对应的嵌套类是生效的，但当我们点击<code>修改 thirdLevel.name</code>时，只有在<code>ThirdLevelView</code>中的控件刷新了，在<code>SecondLevelView</code>中观察<code>thirdLevel.name</code>的 Text内容并没有刷新。这是因为在<code>SecondLevelView</code>中，<code>@ObjectLink</code>仅能观察到其代理的<code>secondLevel:SecondLevel</code>对象的属性变化，而<code>secondLevel.thirdLevel.name</code>是<code>ThirdLevel</code>的属性，无法观察到嵌套类的变化。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>不建议在被@Observed 修饰的类的构造函数中修改值，不会引起UI刷新，因为修改的是原始对象的值，并非是代理对象。</li><li>被<code>@Observed</code>修饰的嵌套类，不要跨嵌套层观察，建议一个数据类对应一个自定义控件。</li><li>必须使用new 创建的类对象，使用字面量对象无法被观察。比如网络请求返回的数据转成 JSON 后使用 as 强转为对应类型</li><li>通过a.b(this.object)形式调用时，修改对象中的属性后，UI 无法刷新，原因同@State</li><li>@ObjectLink的数据源更新依赖其父组件，当父组件中数据源改变引起父组件刷新时，会重新设置子组件@ObjectLink的数据源。这个过程不是在父组件数据源变化后立刻发生的，而是在父组件实际刷新时才会进行。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着鸿蒙Next的推广，做鸿蒙开发的人是越来越多，提问和寻求帮助的人也是越来越多，就我自己回答的问题而言，大部分和状态管理相关，比如List</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-hvigor定制构建</title>
    <link href="https://blog.huangyuanlove.com/2025/01/17/%E9%B8%BF%E8%92%99-hvigor%E5%AE%9A%E5%88%B6%E6%9E%84%E5%BB%BA/"/>
    <id>https://blog.huangyuanlove.com/2025/01/17/%E9%B8%BF%E8%92%99-hvigor%E5%AE%9A%E5%88%B6%E6%9E%84%E5%BB%BA/</id>
    <published>2025-01-17T15:30:13.000Z</published>
    <updated>2025-01-17T15:08:16.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前需要发版时都是在开发机上修改一下相关配置，比如签名文件、三方SDK参数等，然后打包上传到应用商店。略显繁琐，也担心某次打包会有漏改错改的配置。现在使用jenkins搭建了构建流水线，希望可以根据传入的参数不同，替换配置文件中的字段。翻看文档后发现可以在<code>hvigorfile.ts</code>中接收部分编译配置。</p><h2 id="BuildProfile"><a href="#BuildProfile" class="headerlink" title="BuildProfile"></a>BuildProfile</h2><p>该类和 Android 项目中的 BuildConfig类很像，也是在编译构建时生成的。我们可以通过该类在运行时获取编译构建参数，也可以在<code>build-profile.json5</code>中通过buildProfileFields增加自定义字段，从而在运行时获取自定义的参数。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>项目代码已经迭代了将近10年，有些功能的添加没有办法做到完美向下兼容，只能在请求参数中添加当前应用版本号，服务端根据版本号来判断需要下发哪些数据。但鸿蒙版本是刚开发开发，在一个版本内无法完成全部功能，需要分版本按紧急程度开发，因此版本号也不能直接和 Android、iOS 对齐，也是从 1.0.0 版本开始发版。所以无法在请求参数中直接传递应用版本号。因此我们将当前适配的版本号写入到<code>BuildProfile.ets</code>文件中，方便各个业务调用。</p><p>我们在项目根目录下的<code>build-profile.json5</code>文件中添加如下内容就可以将自定义的字段写入到该文件中.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&#123;<br><span class="hljs-attr">app</span>: &#123;<br><span class="hljs-attr">products</span>: [&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;default&quot;</span>,<br><span class="hljs-attr">signingConfig</span>: <span class="hljs-string">&quot;default&quot;</span>,<br><span class="hljs-attr">compatibleSdkVersion</span>: <span class="hljs-string">&quot;5.0.0(12)&quot;</span>,<br><span class="hljs-attr">runtimeOS</span>: <span class="hljs-string">&quot;HarmonyOS&quot;</span>,<br><span class="hljs-attr">buildOption</span>: &#123;<br><span class="hljs-attr">arkOptions</span>: &#123;<br><span class="hljs-attr">buildProfileFields</span>: &#123;<br><span class="hljs-attr">online</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">version_to_servier</span>: <span class="hljs-string">&quot;5.11.10&quot;</span>,<br>&#125;,<br>&#125;<br>&#125;,<br>&#125;,<br>]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义参数可以在<code>buildOption</code>、<code>buildOptionSet</code>、<code>targets</code>节点下的<code>arkOptions</code>子节点中通过增加<code>buildProfileFields</code>字段实现，自定义参数通过<code>key-value</code>键值对的方式配置，其中<code>value</code>取值仅支持<code>number</code>、<code>string</code>、<code>boolean</code>类型。<br>当然，该配置也可以在模块下的<code>build-profile.json5</code>中配置。优先级如下：</p><blockquote><p>模块级target &gt; 模块级buildOptionSet &gt; 模块级buildOption &gt; 工程级product &gt; 工程级buildModeSet</p></blockquote><p>这里我们添加了<code>version_to_servier</code>字段来表示当前应用适配到了哪个版本。<br>正常情况下，我们运行代码就可以在<code>$&#123;moduleName&#125; / build / $&#123;productName&#125; / generated / profile / $&#123;targetName&#125; </code>目录下生成<code>BuildProfile.ets</code>文件。<br>也可以在命令行执行<code>hvigorw GenerateBuildProfile</code>。<br>也可以选中需要编译的模块，在菜单栏选择<code>Build &gt; Generate Build Profile $&#123;moduleName&#125;</code>。<br>也可以在菜单栏选择<code>Build &gt; Build Hap(s)/APP(s) &gt; Build Hap(s)”或“Build &gt; Build Hap(s)/APP(s) &gt; Build APP(s)</code>。</p><p>使用时可以这么用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">BuildProfile</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./BuildProfile&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">VERSION_TO_SERVER</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title class_">BuildProfile</span>.<span class="hljs-property">version_to_servier</span>;<br></code></pre></td></tr></table></figure><h2 id="替换模块module-json5字段的值"><a href="#替换模块module-json5字段的值" class="headerlink" title="替换模块module.json5字段的值"></a>替换模块module.json5字段的值</h2><p>我们使用了某三方SDK，需要在<strong>模块</strong>下<code>module.json5</code>文件中添加对应的id </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&#123;<br>  <span class="hljs-string">&quot;module&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;metadata&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;xxx_APPID&quot;</span>,<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;1234567&quot;</span><br>      &#125;<br>    ],<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了区分测试环境和生产环境，<code>xxx_APPID</code>配置了不一样的值，我们期望是打包时通过命令行参数来修改这个值，避免认为配置出现错误。</p><h3 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h3><p>使用命令行<code>hvigorw</code>打包时除了<code>buildMode</code>、<code>debuggable</code>等参数外，还支持<code>--config properties.key=value</code>进行自定义参数。并且在模块下、工程下的<code>hvigorfile.ts</code>中都可以接收到该参数。</p><p>这里我们定义了布尔类型的<code>online</code>参数来表示是否为发版包，当模块下的<code>hvigorfile.ts</code>文件中根据该字段的值来区分配置的参数。<br>具体代码如下，在模块下的<code>hvigorfile.ts</code>文件中：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; hapTasks, <span class="hljs-title class_">OhosHapContext</span>, <span class="hljs-title class_">OhosPluginId</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/hvigor-ohos-plugin&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getNode &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/hvigor&#x27;</span><br><br><span class="hljs-keyword">const</span> entryNode = <span class="hljs-title function_">getNode</span>(__filename);<br><span class="hljs-comment">// 为此节点添加一个afterNodeEvaluate hook 在hook中修改module.json5的内容并使能</span><br>entryNode.<span class="hljs-title function_">afterNodeEvaluate</span>(<span class="hljs-function"><span class="hljs-params">node</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">//获取命令行参数</span><br>  <span class="hljs-keyword">let</span> online = <span class="hljs-literal">false</span><br>  <span class="hljs-keyword">let</span> propertyOnline = hvigor.<span class="hljs-title function_">getParameter</span>().<span class="hljs-title function_">getProperty</span>(<span class="hljs-string">&#x27;online&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (propertyOnline != <span class="hljs-literal">undefined</span>) &#123;<br>    online = propertyOnline<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;entry online-&gt; &quot;</span> + propertyOnline);<br><br>  <span class="hljs-comment">// 获取此节点使用插件的上下文对象 此时为hap插件 获取hap插件上下文对象</span><br>  <span class="hljs-keyword">const</span> hapContext = node.<span class="hljs-title function_">getContext</span>(<span class="hljs-title class_">OhosPluginId</span>.<span class="hljs-property">OHOS_HAP_PLUGIN</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">OhosHapContext</span>;<br>  <span class="hljs-comment">// 通过上下文对象获取从module.json5文件中读出来的obj对象</span><br>  <span class="hljs-keyword">const</span> moduleJsonOpt = hapContext.<span class="hljs-title function_">getModuleJsonOpt</span>();<br>  <span class="hljs-comment">// 修改obj对象为想要的，此处举例修改module中的deviceTypes</span><br>  <span class="hljs-keyword">let</span> metaDateList = moduleJsonOpt[<span class="hljs-string">&#x27;module&#x27;</span>][<span class="hljs-string">&#x27;metadata&#x27;</span>]<br>  metaDateList.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (element[<span class="hljs-string">&#x27;name&#x27;</span>] === <span class="hljs-string">&#x27;xxx_APPID&#x27;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (online) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;线上环境，修改xxx_APPID配置为   abcdefg&#x27;</span>)<br>        element[<span class="hljs-string">&#x27;value&#x27;</span>] = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;测试环境，修改xxx_APPID配置为   1234567&#x27;</span>)<br>        element[<span class="hljs-string">&#x27;value&#x27;</span>] = <span class="hljs-string">&#x27;1234567&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;);<br><br>    <span class="hljs-comment">// 将obj对象设置回上下文对象以使能到构建的过程与结果中</span><br>    hapContext.<span class="hljs-title function_">setModuleJsonOpt</span>(moduleJsonOpt);<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">system</span>: hapTasks,  <span class="hljs-comment">/* Built-in plugin of Hvigor. It cannot be modified. */</span><br>    <span class="hljs-attr">plugins</span>:[]         <span class="hljs-comment">/* Custom plugin to extend the functionality of Hvigor. */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在打包构建时只需要执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hvigorw clean  assembleApp -p buildMode=release --config properties.online=true<br></code></pre></td></tr></table></figure><p>就可以直接替换为生产环境的配置了。因为平时开发都是直接点 IDE 中的 run 进行调试，不会传入该参数，也就不会影响文件中原本配置的值。</p><h2 id="打包签名"><a href="#打包签名" class="headerlink" title="打包签名"></a>打包签名</h2><p>上面也提到自定义的参数也可以在工程下的<code>hvigorfile.ts</code>接收到该参数，上面<code>BuildProfile</code>中也提到在工程下的<code>build-profile.json5</code>添加了自定义字段<code>online</code>。我们同样可以根据命令行参数替换掉。同时也将配置的测试签名文件删除，只构建产物，随后再使用命令行进行签名。</p><p>代码如下，在工程根目录下的<code>hvigorfile.ts</code>文件中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; appTasks, <span class="hljs-title class_">OhosAppContext</span>, <span class="hljs-title class_">OhosPluginId</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/hvigor-ohos-plugin&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; hvigor,getNode &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos/hvigor&#x27;</span><br><span class="hljs-comment">// 获取根节点</span><br><span class="hljs-keyword">const</span> rootNode = <span class="hljs-title function_">getNode</span>(__filename);<br><span class="hljs-comment">// 为根节点添加一个afterNodeEvaluate hook 在hook中修改根目录下的build-profile.json5的内容并使能</span><br>rootNode.<span class="hljs-title function_">afterNodeEvaluate</span>(<span class="hljs-function"><span class="hljs-params">node</span> =&gt;</span> &#123;<br><br>    <span class="hljs-comment">//获取命令行参数</span><br>    <span class="hljs-keyword">let</span> online = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">let</span> propertyOnline = hvigor.<span class="hljs-title function_">getParameter</span>().<span class="hljs-title function_">getProperty</span>(<span class="hljs-string">&#x27;online&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (propertyOnline != <span class="hljs-literal">undefined</span>) &#123;<br>        online = propertyOnline<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;online-&gt; &quot;</span> + propertyOnline);<br><br>    <span class="hljs-comment">// 获取app插件的上下文对象</span><br>    <span class="hljs-keyword">const</span> appContext = node.<span class="hljs-title function_">getContext</span>(<span class="hljs-title class_">OhosPluginId</span>.<span class="hljs-property">OHOS_APP_PLUGIN</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">OhosAppContext</span>;<br>    <span class="hljs-comment">// 通过上下文对象获取从根目录build-profile.json5文件中读出来的obj对象</span><br>    <span class="hljs-keyword">const</span> buildProfileOpt = appContext.<span class="hljs-title function_">getBuildProfileOpt</span>();<br>    <span class="hljs-comment">//将 BuildProfile 文件中的online值改为传入的值</span><br>    buildProfileOpt[<span class="hljs-string">&#x27;app&#x27;</span>][<span class="hljs-string">&#x27;products&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;buildOption&#x27;</span>][<span class="hljs-string">&#x27;arkOptions&#x27;</span>][<span class="hljs-string">&#x27;buildProfileFields&#x27;</span>][<span class="hljs-string">&#x27;online&#x27;</span>] = online<br>    <span class="hljs-keyword">if</span> (online) &#123;<br>      <span class="hljs-comment">//清除签名文件信息</span><br>        buildProfileOpt[<span class="hljs-string">&#x27;app&#x27;</span>][<span class="hljs-string">&#x27;signingConfigs&#x27;</span>] = []<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将obj对象设置回上下文对象以使能到构建的过程与结果中</span><br>    appContext.<span class="hljs-title function_">setBuildProfileOpt</span>(buildProfileOpt);<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">system</span>: appTasks,  <span class="hljs-comment">/* Built-in plugin of Hvigor. It cannot be modified. */</span><br>    <span class="hljs-attr">plugins</span>:[]         <span class="hljs-comment">/* Custom plugin to extend the functionality of Hvigor. */</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>打包的时候，由于上架需要 app 文件，所以我们需要打 release 模式的 app 文件。测试时需要打release 模式的hap 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">//先安装一下依赖<br>ohpm install --all<br>//发版包<br>hvigorw clean  assembleApp -p buildMode=release --config properties.online=true <br>//测试包<br>hvigorw clean  assembleHap -p buildMode=release --config properties.online=false<br></code></pre></td></tr></table></figure><p>这样我们就将<code>BuildProfile</code>文件中的<code>online</code>值改为传入的值，同时也清除了签名文件配置。</p><p>这里需要注意的是，如果执行的是<code>assembleApp</code>,则产物是在项目根目录<code>build/outputs/$&#123;productName&#125;/xxx-default-unsigned.app</code>。如果执行的是<code>assembleHap</code>，则会在<code>$&#123;moduleName&#125;/build/$&#123;productName&#125;/outputs/$&#123;productName&#125;/entry-default-unsigned.hap</code>.</p><p>下面我们对产物进行签名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">/Applications/DevEco-Studio.app/Contents/jbr/Contents/Home/bin/java -jar /Applications/DevEco-Studio.app/Contents/sdk/default/openharmony/toolchains/lib/hap-sign-tool.jar sign-app -keyAlias &quot;keyAlias&quot; -signAlg &quot;SHA256withECDSA&quot; -mode &quot;localSign&quot; -appCertFile &quot;release.cer&quot; -profileFile &quot;release.p7b&quot; -inFile &quot;build/outputs/default/xxx-default-unsigned.app&quot; -keystoreFile &quot;default.p12&quot; -outFile &quot;xxx-default-signed.app&quot; -keyPwd &quot;keyPwd&quot; -keystorePwd &quot;keystorePwd&quot; -signCode &quot;1&quot;<br><br>/Applications/DevEco-Studio.app/Contents/jbr/Contents/Home/bin/java -jar /Applications/DevEco-Studio.app/Contents/sdk/default/openharmony/toolchains/lib/hap-sign-tool.jar sign-app -keyAlias &quot;keyAlias&quot; -signAlg &quot;SHA256withECDSA&quot; -mode &quot;localSign&quot; -appCertFile &quot;debug.cer&quot; -profileFile &quot;debug.p7b&quot; -inFile &quot;entry/build/default/outputs/default/entry-default-unsigned.hap&quot; -keystoreFile &quot;default.p12&quot; -outFile &quot;entry-default-signed.hap&quot; -keyPwd &quot;keyPwd&quot; -keystorePwd &quot;keystorePwd&quot; -signCode &quot;1&quot;<br><br></code></pre></td></tr></table></figure><p>我们可以把打包签名的流程写在文件(build.sh)中，每次去执行这个文件就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化build_type为release</span><br>online=true<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解析命令行参数</span><br>while [[ $# -gt 0 ]]; do<br>    case $1 in<br>        --debug)<br>            online=false<br>            echo &quot;需要构建测试包&quot;<br>            shift<br>            ;;<br>        --release)<br>            # 实际上这个选项是多余的，因为默认就是release<br>            # 但如果你希望明确指定release以覆盖其他可能设置默认值的逻辑，可以保留<br>            online=true<br>            echo &quot;需要构建线上包&quot;<br>            shift<br>            ;;<br>        *)<br>            # 未知选项，打印帮助信息或错误消息<br>            echo &quot;Usage: $0 [--debug|--release]&quot;<br>            exit 1<br>            ;;<br>    esac<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>ohpm install --all<br><br><br>if [ &quot;$online&quot; == true ]; then<br>    # 打线上 app 包<br>    echo &quot;Executing online release build commands...&quot;<br>    hvigorw clean  assembleApp -p buildMode=release --config properties.online=true <br>elif [ &quot;$online&quot; == false ]; then<br>    # 打测试 hap 包<br>    echo &quot;Executing not online release build commands...&quot;<br>    hvigorw clean  assembleHap -p buildMode=release --config properties.online=false<br>else<br>    # 理论上不应该走到这里，除非build_type被设置为非预期的值<br>    echo &quot;Unknown build type: $build_type&quot;<br>    exit 1<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">签名</span><br><br>if [ &quot;$online&quot; == true ]; then<br>    # 打线上 app 包<br>    echo &quot;签名 app 文件&quot;<br>    /Applications/DevEco-Studio.app/Contents/jbr/Contents/Home/bin/java -jar /Applications/DevEco-Studio.app/Contents/sdk/default/openharmony/toolchains/lib/hap-sign-tool.jar sign-app -keyAlias &quot;keyAlias&quot; -signAlg &quot;SHA256withECDSA&quot; -mode &quot;localSign&quot; -appCertFile &quot;release.cer&quot; -profileFile &quot;release.p7b&quot; -inFile &quot;build/outputs/default/xxx-default-unsigned.app&quot; -keystoreFile &quot;default.p12&quot; -outFile &quot;xxx-default-signed.app&quot; -keyPwd &quot;keyPwd&quot; -keystorePwd &quot;keystorePwd&quot; -signCode &quot;1&quot;<br><br>elif [ &quot;$online&quot; == false ]; then<br>    # 打测试 hap 包<br>    echo &quot;签名 hap 文件&quot;<br>    /Applications/DevEco-Studio.app/Contents/jbr/Contents/Home/bin/java -jar /Applications/DevEco-Studio.app/Contents/sdk/default/openharmony/toolchains/lib/hap-sign-tool.jar sign-app -keyAlias &quot;keyAlias&quot; -signAlg &quot;SHA256withECDSA&quot; -mode &quot;localSign&quot; -appCertFile &quot;debug.cer&quot; -profileFile &quot;debug.p7b&quot; -inFile &quot;entry/build/default/outputs/default/entry-default-unsigned.hap&quot; -keystoreFile &quot;default.p12&quot; -outFile &quot;entry-default-signed.hap&quot; -keyPwd &quot;keyPwd&quot; -keystorePwd &quot;keystorePwd&quot; -signCode &quot;1&quot;<br><br>else<br>    # 理论上不应该走到这里，除非build_type被设置为非预期的值<br>    echo &quot;Unknown build type: $build_type&quot;<br>    exit 1<br>fi<br></code></pre></td></tr></table></figure><p>打包时，如果需要打测试包，则执行 <code>build.sh --debug</code>，如果要打发版包，则执行<code>build.sh --release</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前需要发版时都是在开发机上修改一下相关配置，比如签名文件、三方SDK参数等，然后打包上传到应用商店。略显繁琐，也担心某次打包会有漏改错改的</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-自定义相机拍照</title>
    <link href="https://blog.huangyuanlove.com/2024/12/19/%E9%B8%BF%E8%92%99-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E6%9C%BA%E6%8B%8D%E7%85%A7/"/>
    <id>https://blog.huangyuanlove.com/2024/12/19/%E9%B8%BF%E8%92%99-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E6%9C%BA%E6%8B%8D%E7%85%A7/</id>
    <published>2024-12-19T06:29:17.000Z</published>
    <updated>2025-01-08T07:51:05.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个就没啥好说的，有需求就要搞定需求，搞不定需求就搞定提出需求的人嘛</p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><p>相机开发需要使用真机，模拟器目前还是不支持的。这就劝退了一部分开发者。<br>所需要的调用的接口大部分集中在<code>@kit.CameraKit</code>、<code>@kit.AbilityKit</code>中。保存图片时需要用到<code>@kit.ImageKit</code>、<code>@kit.CoreFileKit</code>、<code>@kit.MediaLibraryKit</code>等<br>接下来看下需要做哪些工作：</p><ol><li>获取相机权限</li><li>获取可用相机列表<ol><li>可以在这里监听相机状态(USB相机连接、断开连接、关闭、被占用等)</li><li>选择当前使用的相机</li></ol></li><li>创建相机输入流并打开相机<ol><li>可以创建相机输入流</li><li>可以监听预览输出流状态，包括预览流启动、预览流结束、预览流输出错误</li><li>可以获取相机支持的模式列表(NORMAL_PHOTO,NORMAL_VIDEO,SECURE_PHOTO)</li><li>可以获取当前相机设备支持的所有输出流，如预览流、拍照流、录像流等</li></ol></li><li>会话(Session)管理<ol><li>配置相机的输入流和输出流(分辨路等配置)</li><li>添加闪光灯、调整焦距等配置</li><li>会话切换控制:切换拍照或者录像</li><li>交和开启会话，可以开始调用相机相关功能</li></ol></li><li>预览<ol><li>创建Surface用于预览</li><li>将预览输出流通过SurfaceID与Surface关联</li><li>调用Session.start方法开始预览</li></ol></li><li>拍照<ol><li>创建拍照输出流</li><li>设置拍照photoAvailable的回调，并将拍照的buffer保存为图片。</li><li>参数配置(闪光灯、变焦、焦距等)</li><li>触发拍照</li></ol></li></ol><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="权限处理"><a href="#权限处理" class="headerlink" title="权限处理"></a>权限处理</h3><p>在进入拍照页面之前先申请权限，具体的流程看这里<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/request-app-permissions-V5">申请应用权限</a>，本文不再赘述。</p><h3 id="获取可用相机列表"><a href="#获取可用相机列表" class="headerlink" title="获取可用相机列表"></a>获取可用相机列表</h3><p>首先要获取相机管理实例，这里为了代码看起来清晰，将各个步骤写到了单独的方法中。<br>另外多出使用<code>camera.CameraManager</code>实例，因此定义为了全局变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">TakePhotoPage</span> &#123;<br><br><br>  <span class="hljs-comment">//相机管理</span><br>  <span class="hljs-title function_">getCameraManager</span>(<span class="hljs-attr">context</span>: common.<span class="hljs-property">BaseContext</span>): camera.<span class="hljs-property">CameraManager</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">cameraManager</span>: camera.<span class="hljs-property">CameraManager</span> = camera.<span class="hljs-title function_">getCameraManager</span>(context);<br>    <span class="hljs-keyword">return</span> cameraManager;<br>  &#125;<br><br>  <span class="hljs-comment">//获取可用相机列表</span><br>  <span class="hljs-title function_">getCameraDevices</span>(<span class="hljs-attr">cameraManager</span>: camera.<span class="hljs-property">CameraManager</span>): <span class="hljs-title class_">Array</span>&lt;camera.<span class="hljs-property">CameraDevice</span>&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">cameraArray</span>: <span class="hljs-title class_">Array</span>&lt;camera.<span class="hljs-property">CameraDevice</span>&gt; = cameraManager.<span class="hljs-title function_">getSupportedCameras</span>();<br>    <br>    <span class="hljs-keyword">if</span> (cameraArray != <span class="hljs-literal">undefined</span> &amp;&amp; cameraArray.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">//在这里可以输出一些相机参数，比如相机位置(前置、后置)、相机类型(广角相机、长焦相机)等信息</span><br>      <span class="hljs-keyword">return</span> cameraArray;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>,<span class="hljs-variable constant_">TAG</span>,<span class="hljs-string">&quot;cameraManager.getSupportedCameras error&quot;</span>);<br>      <span class="hljs-keyword">return</span> [];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 监听相机状态</span><br>  <span class="hljs-title function_">onCameraStatusChange</span>(<span class="hljs-attr">cameraManager</span>: camera.<span class="hljs-property">CameraManager</span>): <span class="hljs-built_in">void</span> &#123;<br>    cameraManager.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;cameraStatus&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err !== <span class="hljs-literal">undefined</span> &amp;&amp; err.<span class="hljs-property">code</span> !== <span class="hljs-number">0</span>) &#123;<br>        hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>,<span class="hljs-variable constant_">TAG</span>,<span class="hljs-string">`Callback Error, errorCode: <span class="hljs-subst">$&#123;err.code&#125;</span>`</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-comment">// 如果当通过USB连接相机设备时，回调函数会返回新的相机出现状态</span><br>      <span class="hljs-keyword">if</span> (cameraStatusInfo.<span class="hljs-property">status</span> == camera.<span class="hljs-property">CameraStatus</span>.<span class="hljs-property">CAMERA_STATUS_APPEAR</span>) &#123;<br>        hilog.<span class="hljs-title function_">info</span>(<span class="hljs-number">0x01</span>,<span class="hljs-variable constant_">TAG</span>,<span class="hljs-string">`New Camera device appear.`</span>);<br>      &#125;<br>      <span class="hljs-comment">// 如果当断开相机设备USB连接时，回调函数会返回相机被移除状态</span><br>      <span class="hljs-keyword">if</span> (cameraStatusInfo.<span class="hljs-property">status</span> == camera.<span class="hljs-property">CameraStatus</span>.<span class="hljs-property">CAMERA_STATUS_DISAPPEAR</span>) &#123;<br>        hilog.<span class="hljs-title function_">info</span>(<span class="hljs-number">0x01</span>,<span class="hljs-variable constant_">TAG</span>,<span class="hljs-string">`Camera device has been removed.`</span>);<br>      &#125;<br>      <span class="hljs-comment">// 相机被关闭时，回调函数会返回相机可用状态</span><br>      <span class="hljs-keyword">if</span> (cameraStatusInfo.<span class="hljs-property">status</span> == camera.<span class="hljs-property">CameraStatus</span>.<span class="hljs-property">CAMERA_STATUS_AVAILABLE</span>) &#123;<br>        hilog.<span class="hljs-title function_">info</span>(<span class="hljs-number">0x01</span>,<span class="hljs-variable constant_">TAG</span>,<span class="hljs-string">`Current Camera is available.`</span>);<br>      &#125;<br>      <span class="hljs-comment">// 相机被打开/占用时，回调函数会返回相机不可用状态</span><br>      <span class="hljs-keyword">if</span> (cameraStatusInfo.<span class="hljs-property">status</span> == camera.<span class="hljs-property">CameraStatus</span>.<span class="hljs-property">CAMERA_STATUS_UNAVAILABLE</span>) &#123;<br>        hilog.<span class="hljs-title function_">info</span>(<span class="hljs-number">0x01</span>,<span class="hljs-variable constant_">TAG</span>,<span class="hljs-string">`Current Camera has been occupied.`</span>);<br>      &#125;<br>      hilog.<span class="hljs-title function_">info</span>(<span class="hljs-number">0x01</span>,<span class="hljs-variable constant_">TAG</span>,<span class="hljs-string">`camera: <span class="hljs-subst">$&#123;cameraStatusInfo.camera.cameraId&#125;</span>`</span>);<br>      hilog.<span class="hljs-title function_">info</span>(<span class="hljs-number">0x01</span>,<span class="hljs-variable constant_">TAG</span>,<span class="hljs-string">`status: <span class="hljs-subst">$&#123;cameraStatusInfo.status&#125;</span>`</span>);<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们可以获取到所有可用的相机列表，并且可以根据相机类型、连接类型等过滤掉不适用的相机。<br>在获取到相机列表后，我们默认使用返回列表的第一个相机。  </p><h3 id="创建相机输入流并打开相机"><a href="#创建相机输入流并打开相机" class="headerlink" title="创建相机输入流并打开相机"></a>创建相机输入流并打开相机</h3><p>在这一步我们主要是创建相机的输入流，为后面在<code>XComponent</code>中预览做准备。  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">createInput</span>(): camera.<span class="hljs-property">CameraInput</span> | <span class="hljs-literal">undefined</span> &#123;<br><span class="hljs-comment">// 创建相机输入流</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">cameraInput</span>: camera.<span class="hljs-property">CameraInput</span> | <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    cameraInput = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cameraManager</span>.<span class="hljs-title function_">createCameraInput</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentCamera</span>);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to createCameraInput errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (cameraInput === <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br><span class="hljs-comment">// 监听cameraInput错误信息</span><br>cameraInput.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentCamera</span>, <span class="hljs-function">(<span class="hljs-params">error: BusinessError</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Camera input error code: <span class="hljs-subst">$&#123;error.code&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-keyword">return</span> cameraInput;<br>&#125;<br></code></pre></td></tr></table></figure><p>最重要的就一行代码：调用<code>cameraManager.createCameraInput(camera: CameraDevice)</code>创建一个输入流并返回，之后调用返回的输入流的<code>open()</code>方法打开相机，注意该方法是异步的。<br>同样的，我们可以调用<code>cameraManager.getSupportedSceneModes(camera: CameraDevice)</code>来获取相机支持的模式，一般情况下都会支持拍照和录像。<br>之后我们获取设备支持的输出流能力</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">getSupportedOutputCapability</span>(): camera.<span class="hljs-property">CameraOutputCapability</span> | <span class="hljs-literal">undefined</span> &#123;<br><span class="hljs-comment">// 获取相机设备支持的输出流能力</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">cameraOutputCapability</span>: camera.<span class="hljs-property">CameraOutputCapability</span> =<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cameraManager</span>.<span class="hljs-title function_">getSupportedOutputCapability</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentCamera</span>, camera.<span class="hljs-property">SceneMode</span>.<span class="hljs-property">NORMAL_PHOTO</span>)<br><br><span class="hljs-keyword">if</span> (!cameraOutputCapability) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;cameraManager.getSupportedOutputCapability error&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br><span class="hljs-keyword">return</span> cameraOutputCapability;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们拿到<code>cameraOutputCapability</code>之后，可以从该对象的<code>previewProfiles</code>、<code>photoProfiles</code>属性中获取到设备支持的分辨率大小。这里我们直接使用<code>1920*1080</code>的分辨率。<br>需要注意的是 <code>previewProfiles</code>和<code>photoProfiles</code>所支持的分辨率不一定是一致的。预览的话只要宽高比一致，分辨率别差的太离谱就可以。  </p><p>之后我们使用选择好的<code>Profile</code>对象来创建拍照输出流和预览输出流</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoOutput</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cameraManager</span>.<span class="hljs-title function_">createPhotoOutput</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPhotoProfile</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">previewOutput</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cameraManager</span>.<span class="hljs-title function_">createPreviewOutput</span>(previewProfile, <span class="hljs-variable language_">this</span>.<span class="hljs-property">surfaceId</span>);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to createPhotoOutput errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">photoOutput</span> === <span class="hljs-literal">undefined</span>) &#123;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是，创建预览输出流的时候需要传入 surfaceID，该值来源于组件<code>XComponent</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">private</span> <span class="hljs-attr">mXComponentController</span>: <span class="hljs-title class_">XComponentController</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XComponentController</span>;<br><span class="hljs-title class_">XComponent</span>(&#123;<br><span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;componentId&#x27;</span>,<br><span class="hljs-attr">type</span>: <span class="hljs-title class_">XComponentType</span>.<span class="hljs-property">SURFACE</span>,<br><span class="hljs-attr">controller</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">mXComponentController</span>,<br>&#125;)<br>.<span class="hljs-title function_">onLoad</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">surfaceId</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">mXComponentController</span>.<span class="hljs-title function_">getXComponentSurfaceId</span>();<br>&#125;)<br></code></pre></td></tr></table></figure><p>所以这里我们需要注意一下创建预览输出流的时机</p><h3 id="创建并配置会话"><a href="#创建并配置会话" class="headerlink" title="创建并配置会话"></a>创建并配置会话</h3><p>创建会话也只是一行的就可以搞定，但可能会有异常出现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">createSession</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//创建会话</span><br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cameraManager</span>.<span class="hljs-title function_">createSession</span>(camera.<span class="hljs-property">SceneMode</span>.<span class="hljs-property">NORMAL_PHOTO</span>) <span class="hljs-keyword">as</span> camera.<span class="hljs-property">PhotoSession</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to create the session instance. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span> === <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// 监听session错误信息</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error: BusinessError</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Capture session error code: <span class="hljs-subst">$&#123;error.code&#125;</span>`</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>配置会话主要是添加相机输入流、预览输出流和拍照输出流，最后提交配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">configSession</span>(<span class="hljs-params">cameraInput: camera.CameraInput, previewOutput: camera.PreviewOutput</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-comment">// 开始配置会话</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">beginConfig</span>();<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to beginConfig. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 向会话中添加相机输入流</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">addInput</span>(cameraInput);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to addInput. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 向会话中添加预览输出流</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">addOutput</span>(previewOutput);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to addOutput(previewOutput). errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 向会话中添加拍照输出流</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">addOutput</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">photoOutput</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to addOutput(photoOutput). errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 提交会话配置</span><br>  <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">commitConfig</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拍照回调和启动会话"><a href="#拍照回调和启动会话" class="headerlink" title="拍照回调和启动会话"></a>拍照回调和启动会话</h3><p>我们先启动会话</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">start</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Promise returned to indicate the session start success.&#x27;</span>);<br>      &#125;);<br></code></pre></td></tr></table></figure><p>会话启动之后我们就可以进行拍照了。拍照的话需要调用拍照输出流的<code>capture</code>方法  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">takePhoto</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">photoOutput</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">photoCaptureSetting</span>: camera.<span class="hljs-property">PhotoCaptureSetting</span> = &#123;<br>    <span class="hljs-attr">quality</span>: camera.<span class="hljs-property">QualityLevel</span>.<span class="hljs-property">QUALITY_LEVEL_HIGH</span>, <span class="hljs-comment">// 设置图片质量高</span><br>    <span class="hljs-attr">rotation</span>: camera.<span class="hljs-property">ImageRotation</span>.<span class="hljs-property">ROTATION_0</span> <span class="hljs-comment">// 设置图片旋转角度0</span><br>&#125;<br><span class="hljs-comment">// 使用当前拍照设置进行拍照</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">photoOutput</span>.<span class="hljs-title function_">capture</span>(photoCaptureSetting, <span class="hljs-function">(<span class="hljs-params">err: BusinessError</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Failed to capture the photo <span class="hljs-subst">$&#123;err.message&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Callback invoked to indicate the photo capture request success.&#x27;</span>);<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>但照片内容确不是在该方法中返回，而是需要我们在拍照输出流中添加<code>photoAvailable</code>事件监听，该监听可以在创建拍照输出流之后就添加</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">setPhotoOutputCb</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">photoOutput</span>) &#123;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//设置回调之后，调用photoOutput的capture方法，就会将拍照的buffer回传到回调中</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoOutput</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;photoAvailable&#x27;</span>, (<span class="hljs-attr">errCode</span>: <span class="hljs-title class_">BusinessError</span>, <span class="hljs-attr">photo</span>: camera.<span class="hljs-property">Photo</span>): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;getPhoto start&#x27;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">`err: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(errCode)&#125;</span>`</span>);<br>      <span class="hljs-keyword">if</span> (errCode || photo === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;getPhoto failed&#x27;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">let</span> imageObj = photo.<span class="hljs-property">main</span>;<br>      imageObj.<span class="hljs-title function_">getComponent</span>(image.<span class="hljs-property">ComponentType</span>.<span class="hljs-property">JPEG</span>, (<span class="hljs-attr">errCode</span>: <span class="hljs-title class_">BusinessError</span>, <span class="hljs-attr">component</span>: image.<span class="hljs-property">Component</span>): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;getComponent start&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (errCode || component === <span class="hljs-literal">undefined</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;getComponent failed&#x27;</span>);<br>          <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">buffer</span>: <span class="hljs-title class_">ArrayBuffer</span>;<br>        <span class="hljs-keyword">if</span> (component.<span class="hljs-property">byteBuffer</span>) &#123;<br>          buffer = component.<span class="hljs-property">byteBuffer</span>;<br>          <span class="hljs-keyword">let</span> filePath = <span class="hljs-title function_">getContext</span>().<span class="hljs-property">cacheDir</span> + <span class="hljs-string">&#x27;/&#x27;</span> + systemDateTime.<span class="hljs-title function_">getTime</span>() + <span class="hljs-string">&#x27;.jpg&#x27;</span><br>          <span class="hljs-keyword">let</span> file = fileIo.<span class="hljs-title function_">openSync</span>(filePath, fileIo.<span class="hljs-property">OpenMode</span>.<span class="hljs-property">READ_WRITE</span> | fileIo.<span class="hljs-property">OpenMode</span>.<span class="hljs-property">CREATE</span>)<br>          fileIo.<span class="hljs-title function_">writeSync</span>(file.<span class="hljs-property">fd</span>, buffer)<br>          fileIo.<span class="hljs-title function_">closeSync</span>(file)<br><br>          <span class="hljs-keyword">let</span> fileUrl = fileUri.<span class="hljs-title function_">getUriFromPath</span>(filePath)<br>          promptAction.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">message</span>:fileUrl&#125;)<br><br><br>          <span class="hljs-keyword">let</span> <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>          promptAction.<span class="hljs-title function_">openCustomDialog</span>(&#123;<br>            <span class="hljs-attr">builder</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">saveImageToAlbumDialog</span>(fileUrl, <span class="hljs-function">() =&gt;</span> &#123;<br>                promptAction.<span class="hljs-title function_">closeCustomDialog</span>(id)<br>              &#125;)<br>            &#125;<br>          &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">dialogID</span>) =&gt;</span> &#123;<br>            id = dialogID<br>          &#125;)<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;byteBuffer is null&#x27;</span>);<br>          <span class="hljs-keyword">return</span>;<br>        &#125;<br>        imageObj.<span class="hljs-title function_">release</span>();<br>      &#125;);<br>    &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><p>这里就简单写了一下处理：拿到 ArrayBuffer 之后写入沙箱文件，然后在弹窗中展示</p><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>我们创建会话(camera.PhotoSession)之后，可以通过该对象配置闪光灯模式、对焦模式、缩放等</p><h4 id="闪光灯"><a href="#闪光灯" class="headerlink" title="闪光灯"></a>闪光灯</h4><p>首先判断设备是否支持闪光灯，然后再判断支持的闪光灯模式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">getSupportFlashMode</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">supportFlashMode</span> = []<br>   <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>) &#123;<br>     <span class="hljs-keyword">return</span><br>   &#125;<br>   <span class="hljs-comment">// 判断设备是否支持闪光灯</span><br>   <span class="hljs-keyword">let</span> <span class="hljs-attr">flashStatus</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br>   <span class="hljs-keyword">try</span> &#123;<br>     flashStatus = <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">hasFlash</span>();<br>   &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>     <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to hasFlash. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>   &#125;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Returned with the flash light support status:&#x27;</span> + flashStatus);<br><br>   <span class="hljs-keyword">if</span> (flashStatus) &#123;<br>     <span class="hljs-comment">// 判断支持的闪光灯模式</span><br>     <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-keyword">let</span> <span class="hljs-attr">status</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">isFlashModeSupported</span>(camera.<span class="hljs-property">FlashMode</span>.<span class="hljs-property">FLASH_MODE_CLOSE</span>);<br>       <span class="hljs-keyword">if</span> (status) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">supportFlashMode</span>.<span class="hljs-title function_">push</span>(camera.<span class="hljs-property">FlashMode</span>.<span class="hljs-property">FLASH_MODE_CLOSE</span>)<br>       &#125;<br>     &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>       <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to check whether the flash mode is supported. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>     &#125;<br><br>     <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-keyword">let</span> <span class="hljs-attr">status</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">isFlashModeSupported</span>(camera.<span class="hljs-property">FlashMode</span>.<span class="hljs-property">FLASH_MODE_OPEN</span>);<br>       <span class="hljs-keyword">if</span> (status) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">supportFlashMode</span>.<span class="hljs-title function_">push</span>(camera.<span class="hljs-property">FlashMode</span>.<span class="hljs-property">FLASH_MODE_OPEN</span>)<br>       &#125;<br>     &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>       <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to check whether the flash mode is supported. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>     &#125;<br><br>     <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-keyword">let</span> <span class="hljs-attr">status</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">isFlashModeSupported</span>(camera.<span class="hljs-property">FlashMode</span>.<span class="hljs-property">FLASH_MODE_AUTO</span>);<br>       <span class="hljs-keyword">if</span> (status) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">supportFlashMode</span>.<span class="hljs-title function_">push</span>(camera.<span class="hljs-property">FlashMode</span>.<span class="hljs-property">FLASH_MODE_AUTO</span>)<br>       &#125;<br>     &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>       <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to check whether the flash mode is supported. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>     &#125;<br><br>     <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-keyword">let</span> <span class="hljs-attr">status</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">isFlashModeSupported</span>(camera.<span class="hljs-property">FlashMode</span>.<span class="hljs-property">FLASH_MODE_ALWAYS_OPEN</span>);<br>       <span class="hljs-keyword">if</span> (status) &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">supportFlashMode</span>.<span class="hljs-title function_">push</span>(camera.<span class="hljs-property">FlashMode</span>.<span class="hljs-property">FLASH_MODE_ALWAYS_OPEN</span>)<br>       &#125;<br>     &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>       <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to check whether the flash mode is supported. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>     &#125;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="连续自动对焦"><a href="#连续自动对焦" class="headerlink" title="连续自动对焦"></a>连续自动对焦</h4><p>也是需要先判断是否支持自动连续对焦，不支持的话只能手动对焦</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">setAutoContinuousFocus</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-comment">// 判断是否支持连续自动变焦模式</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">focusModeStatus</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">status</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">isFocusModeSupported</span>(camera.<span class="hljs-property">FocusMode</span>.<span class="hljs-property">FOCUS_MODE_CONTINUOUS_AUTO</span>);<br>    focusModeStatus = status;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to check whether the focus mode is supported. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (focusModeStatus) &#123;<br>    <span class="hljs-comment">// 设置连续自动变焦模式</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">setFocusMode</span>(camera.<span class="hljs-property">FocusMode</span>.<span class="hljs-property">FOCUS_MODE_CONTINUOUS_AUTO</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to set the focus mode. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>手动对焦则是获取到用户点击的位置，然后调用<code>this.photoSession.setFocusPoint(point: camera.Point)</code>方法进行对焦</p><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><p>同样的，需要先获取到支持的缩放范围</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">getZoomRatioRange</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-comment">// 获取相机支持的可变焦距比范围</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">zoomRatioRange</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [];<br>  <span class="hljs-keyword">try</span> &#123;<br>    zoomRatioRange = <span class="hljs-variable language_">this</span>.<span class="hljs-property">photoSession</span>.<span class="hljs-title function_">getZoomRatioRange</span>();<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">let</span> err = error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to get the zoom ratio range. errorCode = &#x27;</span> + err.<span class="hljs-property">code</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (zoomRatioRange.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">zoomRatioRangeStart</span> = zoomRatioRange[<span class="hljs-number">0</span>]<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">zoomRatioRangeEnd</span> = zoomRatioRange[<span class="hljs-number">1</span>]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后调用<code>this.photoSession.setZoomRatio(zoom);</code>设置缩放比</p><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><p>在拍照结束后需要释放相应的资源</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">await</span> photoSession.<span class="hljs-title function_">stop</span>();<br><br><span class="hljs-comment">// 释放相机输入流</span><br><span class="hljs-keyword">await</span> cameraInput.<span class="hljs-title function_">close</span>();<br><br><span class="hljs-comment">// 释放预览输出流</span><br><span class="hljs-keyword">await</span> previewOutput.<span class="hljs-title function_">release</span>();<br><br><span class="hljs-comment">// 释放拍照输出流</span><br><span class="hljs-keyword">await</span> photoOutput.<span class="hljs-title function_">release</span>();<br><br><span class="hljs-comment">// 释放会话</span><br><span class="hljs-keyword">await</span> photoSession.<span class="hljs-title function_">release</span>();<br><br><span class="hljs-comment">// 会话置空</span><br>photoSession = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="设备旋转"><a href="#设备旋转" class="headerlink" title="设备旋转"></a>设备旋转</h4><p>上面的代码中我们并没有考虑设备旋转问题</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; display &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@kit.ArkUI&#x27;</span>;   <br><br><span class="hljs-keyword">let</span> initDisplayRotation = display.<span class="hljs-title function_">getDefaultDisplaySync</span>().<span class="hljs-property">rotation</span>;<br><span class="hljs-keyword">let</span> initPreviewRotation = previewOutput.<span class="hljs-title function_">getPreviewRotation</span>(initDisplayRotation * camera.<span class="hljs-property">ImageRotation</span>.<span class="hljs-property">ROTATION_90</span>);<br>previewOutput.<span class="hljs-title function_">setPreviewRotation</span>(initPreviewRotation, <span class="hljs-literal">false</span>);<br>display.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;change&#x27;</span>);<br>display.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  initDisplayRotation = display.<span class="hljs-title function_">getDefaultDisplaySync</span>().<span class="hljs-property">rotation</span>;<br>  <span class="hljs-keyword">let</span> imageRotation = initDisplayRotation * camera.<span class="hljs-property">ImageRotation</span>.<span class="hljs-property">ROTATION_90</span>;<br>  <span class="hljs-keyword">let</span> previewRotation = previewOutput.<span class="hljs-title function_">getPreviewRotation</span>(imageRotation);<br>  previewOutput.<span class="hljs-title function_">setPreviewRotation</span>(previewRotation, <span class="hljs-literal">false</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="在-Worker-线程中使用相机"><a href="#在-Worker-线程中使用相机" class="headerlink" title="在 Worker 线程中使用相机"></a>在 Worker 线程中使用相机</h4><p>一般情况下，设备的性能足以支持我们直接使用相机，但如果要追求极致性能，可以将拍照的一系列流程都放在 Worker 线程中完成，通过宿主线程的即时消息通信完成线程间交互</p><hr><p>具体的代码在<a href="https://github.com/huangyuanlove/HelloArkUI/blob/main/entry/src/main/ets/pages/playground/take_photo/TakePhotoPage.ets">https://github.com/huangyuanlove/HelloArkUI/blob/main/entry/src/main/ets/pages/playground/take_photo&#x2F;TakePhotoPage.ets</a><br>就不再贴一遍了。<br>上面代码中并没有实现切换摄像头、切换闪光灯、切换分辨率功能，只是做了展示。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这个就没啥好说的，有需求就要搞定需求，搞不定需求就搞定提出需求的人嘛&lt;/p&gt;
&lt;h2 id=&quot;大致流程&quot;&gt;&lt;a href=&quot;#大致流程&quot; c</summary>
      
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙--Canvas 图片滑动验证</title>
    <link href="https://blog.huangyuanlove.com/2024/11/28/%E9%B8%BF%E8%92%99-Canvas-%E5%9B%BE%E7%89%87%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81/"/>
    <id>https://blog.huangyuanlove.com/2024/11/28/%E9%B8%BF%E8%92%99-Canvas-%E5%9B%BE%E7%89%87%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81/</id>
    <published>2024-11-28T14:55:23.000Z</published>
    <updated>2024-12-09T09:39:50.286Z</updated>
    
    <content type="html"><![CDATA[<p>群里有朋友问图片滑块验证码怎么做，就是一张图上扣出来一块，然后拖动这一小块完成拼图。<br>第一个想法就是偷懒一下：直接让设计在图片上抠出来一小块，把这两个图片和抠图的坐标一块下发，用Image或者canvas自己绘制一下，监听一下手指移动，当手指抬起的时候，如果移动的坐标和抠图的坐标误差在指定范围内，就算成功。<br>后来说Android那边是自己处理的，下发整张图片，然后客户端自己抠图，自己处理。<br>Android能做的，鸿蒙应该也能做，这时候就应该掏出来Canvas怼一波了</p><span id="more"></span><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>两个Canvas，一个使用<code>drawImage</code>画整张图片，画出来后，随机两个坐标值使用<code>getImageData</code>获取指定位置的图片内容。然后在这个区域绘制上边框或者填充颜色，告诉用户获取的是这个区域的内容。想上难度的话，不提示这个截取位置也行。<br>在另外一个Canvas上使用<code>putImageData</code>将图片绘制出来，绑定一下移动手势监听，然后不断更新绘制图片的坐标。当抬起手指的时候，对比一下移动的坐标和抠图的坐标，在允许的范围内，判定为成功。<br>结束。打完收工。完结撒花。</p><p><img src="/image/HarmonyOS/slide_code.gif" alt="image.png">  </p><h2 id="绘制形状方式详细解释"><a href="#绘制形状方式详细解释" class="headerlink" title="绘制形状方式详细解释"></a>绘制形状方式详细解释</h2><p>先看下面不需要处理抠图的，这个简单点，我们循序渐进。</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>两个Canvas，需要两个<code>CanvasRenderingContext2D</code>分别绘制两个Canvas上的内容。<br>一个能接受的误差值。<br>随机出来的抠图的横纵坐标。<br>抠图的大小。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">private</span> <span class="hljs-attr">settings</span>: <span class="hljs-title class_">RenderingContextSettings</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RenderingContextSettings</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-attr">canvasRendering</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CanvasRenderingContext2D</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">settings</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-attr">canvasRendering2</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CanvasRenderingContext2D</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">settings</span>)<br><span class="hljs-comment">//允许的误差</span><br><span class="hljs-keyword">private</span> <span class="hljs-attr">diffInterval</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span> <br><span class="hljs-comment">//随机抠图的横坐标</span><br><span class="hljs-keyword">private</span> <span class="hljs-attr">clip_start_x</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">100</span><br><span class="hljs-comment">//随机抠图的纵坐标</span><br><span class="hljs-keyword">private</span> <span class="hljs-attr">clip_start_y</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">100</span><br><span class="hljs-comment">//抠图的宽度</span><br><span class="hljs-keyword">private</span> clip_image_width = <span class="hljs-number">120</span><br><span class="hljs-comment">//抠图的高度</span><br><span class="hljs-keyword">private</span> clip_image_height = <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>这个没啥好说的，Stack里面摞两个Canvas，底部的Canvas画整个图，上面的Canvas画形状。</p><h3 id="整图Canvas"><a href="#整图Canvas" class="headerlink" title="整图Canvas"></a>整图Canvas</h3><p>这里使用的本地图片，理论上讲，使用网络图片应该也能处理。<br>随机坐标时，注意减去抠图的宽度，否则万一随机出来的坐标在绘制完形状之后超出的图片范围就好玩了。<br>这里随机之后绘制了一个三角形。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">onReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>   <span class="hljs-comment">//这里用的本地图片</span><br>   <span class="hljs-keyword">let</span> <span class="hljs-attr">imageBitMap</span>: <span class="hljs-title class_">ImageBitmap</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageBitmap</span>(<span class="hljs-string">&quot;pages/playground/cat.webp&quot;</span>)<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">drawImage</span>(imageBitMap, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>   hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView2&#x27;</span>, <span class="hljs-string">&#x27;imageBitMap width --&gt; &#x27;</span> + imageBitMap.<span class="hljs-property">width</span>)<br>   hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView2&#x27;</span>, <span class="hljs-string">&#x27;imageBitMap height --&gt; &#x27;</span> + imageBitMap.<span class="hljs-property">height</span>)<br><br>   <span class="hljs-comment">//随机两个坐标，注意不要超出图片范围</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (imageBitMap.<span class="hljs-property">width</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span>))<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (imageBitMap.<span class="hljs-property">height</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_height</span>))<br><br>   hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView2&#x27;</span>, <span class="hljs-string">&#x27;clip_start_x --&gt; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span>)<br>   hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView2&#x27;</span>, <span class="hljs-string">&#x27;clip_start_y --&gt; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>)<br><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;#FFFFFF&#x27;</span><br>   <span class="hljs-comment">//在对应的区域绘制标识，这里画了个三角形，想画其他的自己调整就好</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">moveTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span> / <span class="hljs-number">2</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>)<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_height</span>)<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_height</span>)<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span> / <span class="hljs-number">2</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>)<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">stroke</span>()<br> &#125;)<br></code></pre></td></tr></table></figure><h3 id="需要滑动的形状"><a href="#需要滑动的形状" class="headerlink" title="需要滑动的形状"></a>需要滑动的形状</h3><p>我们拿到了随机的坐标后，在新的Canvas上绘制相同的形状。<br>这里需要监听手指的滑动，我们使用了<code>priorityGesture</code>来绑定<code>PanGesture</code>。注意这里<strong>滑动最小距离为5vp时识别成功</strong>。<br>这里我们限制了只能横向滑动。想加点难度的话，可以在横纵方向上都能滑动。<br>最后在<code>onActionEnd</code>的时候判断一下移动的坐标是否满足条件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">onReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>&#125;)<br>  <span class="hljs-comment">//绑定优先识别手势</span><br>  .<span class="hljs-title function_">priorityGesture</span>(<br>    <span class="hljs-comment">//平移手势，滑动最小距离为5vp时识别成功。</span><br>    <span class="hljs-title class_">PanGesture</span>()<br>      .<span class="hljs-title function_">onActionStart</span>(<span class="hljs-function">(<span class="hljs-params">event: GestureEvent</span>) =&gt;</span> &#123;<br>      &#125;)<br>      .<span class="hljs-title function_">onActionUpdate</span>(<span class="hljs-function">(<span class="hljs-params">event: GestureEvent</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//重置一下画布</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">reset</span>()<br><br>        <span class="hljs-comment">//绘制形状，和整图canvas中的形状、大小一致</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">moveTo</span>(event.<span class="hljs-property">offsetX</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span>/<span class="hljs-number">2</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">lineTo</span>(event.<span class="hljs-property">offsetX</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_height</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">lineTo</span>(event.<span class="hljs-property">offsetX</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_height</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">lineTo</span>(event.<span class="hljs-property">offsetX</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span>/<span class="hljs-number">2</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>)<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-property">strokeStyle</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Pink</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">stroke</span>()<br><br>      &#125;)<br>      .<span class="hljs-title function_">onActionEnd</span>(<span class="hljs-function">(<span class="hljs-params">event: GestureEvent</span>) =&gt;</span> &#123;<br>        hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView&#x27;</span>, <span class="hljs-string">`onActionEnd <span class="hljs-subst">$&#123;event.offsetX.toString()&#125;</span>`</span>)<br>        <span class="hljs-comment">//判定是否成功</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(event.<span class="hljs-property">offsetX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span>) &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">diffInterval</span>) &#123;<br>          promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;验证成功&#x27;</span> &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;验证失败&#x27;</span> &#125;)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">reset</span>()<br>        &#125;<br>      &#125;)<br>  )<br></code></pre></td></tr></table></figure><p>这种是最简单的，不需要处理图片，只需要绘制形状就好了</p><h2 id="需要处理图片的方式"><a href="#需要处理图片的方式" class="headerlink" title="需要处理图片的方式"></a>需要处理图片的方式</h2><p>比起上面这种，我们只需要多定义一个ImageData就好了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">private</span> <span class="hljs-attr">settings</span>: <span class="hljs-title class_">RenderingContextSettings</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RenderingContextSettings</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-attr">canvasRendering</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CanvasRenderingContext2D</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">settings</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-attr">canvasRendering2</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CanvasRenderingContext2D</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">settings</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-attr">diffInterval</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span><br><span class="hljs-keyword">private</span> <span class="hljs-attr">clip_start_x</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">100</span><br><span class="hljs-keyword">private</span> <span class="hljs-attr">clip_start_y</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">100</span><br><span class="hljs-keyword">private</span> clip_image_width = <span class="hljs-number">120</span><br><span class="hljs-keyword">private</span> clip_image_height = <span class="hljs-number">120</span><br><span class="hljs-keyword">private</span> imageData?: <span class="hljs-title class_">ImageData</span><br></code></pre></td></tr></table></figure><h3 id="处理抠图"><a href="#处理抠图" class="headerlink" title="处理抠图"></a>处理抠图</h3><p>在绘制整图的Canvas上调用<code>getImageData</code>获取一下抠出来的图片内容就好了。<br>由于ImageData是个正方形，我们这里需要处理成三角形，我没有找到很好的方法，只能对ImageData.data属性进行处理，它是一维数组，保存了相应的颜色数据，数据值范围为0到255。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">onReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">imageBitMap</span>: <span class="hljs-title class_">ImageBitmap</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageBitmap</span>(<span class="hljs-string">&quot;pages/playground/cat.webp&quot;</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">drawImage</span>(imageBitMap, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><br>  hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView2&#x27;</span>, <span class="hljs-string">&#x27;imageBitMap width --&gt; &#x27;</span> + imageBitMap.<span class="hljs-property">width</span>)<br>  hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView2&#x27;</span>, <span class="hljs-string">&#x27;imageBitMap height --&gt; &#x27;</span> + imageBitMap.<span class="hljs-property">height</span>)<br><br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (imageBitMap.<span class="hljs-property">width</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span>))<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (imageBitMap.<span class="hljs-property">height</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_height</span>))<br><br>  hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView2&#x27;</span>, <span class="hljs-string">&#x27;clip_start_x --&gt; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span>)<br>  hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView2&#x27;</span>, <span class="hljs-string">&#x27;clip_start_y --&gt; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>)<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">imageData</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">getImageData</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_height</span>)<br><br>  <span class="hljs-comment">//在对应的区域绘制标识</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#66FFFFFF&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">moveTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span> / <span class="hljs-number">2</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_height</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_height</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">lineTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_image_width</span> / <span class="hljs-number">2</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering</span>.<span class="hljs-title function_">fill</span>()<br><br>  <span class="hljs-comment">//将ImageData处理成三角形</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imageData</span>)&#123;<br>    <span class="hljs-keyword">let</span> width = <span class="hljs-variable language_">this</span>.<span class="hljs-property">imageData</span>.<span class="hljs-property">width</span> * <span class="hljs-number">4</span><br>    <span class="hljs-keyword">let</span> height = <span class="hljs-variable language_">this</span>.<span class="hljs-property">imageData</span>.<span class="hljs-property">height</span><br>    <span class="hljs-keyword">let</span> rate = width / height<br>    <span class="hljs-keyword">let</span> widthCenter = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(width / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; height; i++) &#123;<br>      <span class="hljs-comment">//第几行</span><br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; width; j++) &#123;<br>        <span class="hljs-comment">//第几列</span><br>        <span class="hljs-keyword">if</span> (j &lt; widthCenter - rate * i / <span class="hljs-number">2</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imageData</span>.<span class="hljs-property">data</span>[i * width +j] = <span class="hljs-number">0</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j &gt; widthCenter + rate * i / <span class="hljs-number">2</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imageData</span>.<span class="hljs-property">data</span>[i * width +j] = <span class="hljs-number">0</span><br>        &#125;<br><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="绘制抠出来的图"><a href="#绘制抠出来的图" class="headerlink" title="绘制抠出来的图"></a>绘制抠出来的图</h3><p>这个就更简单了，相同的绑定手势方法，相同的判定方法。<br>唯一的变化就是在<code>onActionUpdate</code>回调中使用<code>putImageData</code>绘制图片</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title class_">Canvas</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>).<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">height</span>(<span class="hljs-string">&quot;100%&quot;</span>).<span class="hljs-title function_">onReady</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  &#125;)<br>    .<span class="hljs-title function_">priorityGesture</span>(<br>      <span class="hljs-title class_">PanGesture</span>()<br>        .<span class="hljs-title function_">onActionStart</span>(<span class="hljs-function">(<span class="hljs-params">event: GestureEvent</span>) =&gt;</span> &#123;<br>        &#125;)<br>        .<span class="hljs-title function_">onActionUpdate</span>(<span class="hljs-function">(<span class="hljs-params">event: GestureEvent</span>) =&gt;</span> &#123;<br>          hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView&#x27;</span>, event.<span class="hljs-property">offsetX</span>.<span class="hljs-title function_">toString</span>())<br>          <br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">imageData</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">reset</span>()<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">putImageData</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imageData</span>, event.<span class="hljs-property">offsetX</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_y</span>)<br>          &#125;<br>        &#125;)<br>        .<span class="hljs-title function_">onActionEnd</span>(<span class="hljs-function">(<span class="hljs-params">event: GestureEvent</span>) =&gt;</span> &#123;<br>          hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;SlideVerificationView&#x27;</span>, <span class="hljs-string">`onActionEnd <span class="hljs-subst">$&#123;event.offsetX.toString()&#125;</span>`</span>)<br><br>          <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(event.<span class="hljs-property">offsetX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">clip_start_x</span>) &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">diffInterval</span>) &#123;<br>            promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;验证成功&#x27;</span> &#125;)<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            promptAction.<span class="hljs-title function_">showToast</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;验证失败&#x27;</span> &#125;)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvasRendering2</span>.<span class="hljs-title function_">reset</span>()<br>          &#125;<br>        &#125;)<br>    )<br></code></pre></td></tr></table></figure><p>到此，我们就完成了简单的滑动图片验证的功能</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体的流程上面也说过了，这里就不再赘述。<br>我们还可以加大点难度，比如在抠图后不在原图上提示范围，让使用者自己找。<br>比如我们还可以将抠出来的图镜像一下，让使用者自己找。<br>比如我们还可以将抠出来的图隔像素点抽样一下。<br>比如我们还可以将抠出来的图中的像素调整一下颜色。<br>。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;群里有朋友问图片滑块验证码怎么做，就是一张图上扣出来一块，然后拖动这一小块完成拼图。&lt;br&gt;第一个想法就是偷懒一下：直接让设计在图片上抠出来一小块，把这两个图片和抠图的坐标一块下发，用Image或者canvas自己绘制一下，监听一下手指移动，当手指抬起的时候，如果移动的坐标和抠图的坐标误差在指定范围内，就算成功。&lt;br&gt;后来说Android那边是自己处理的，下发整张图片，然后客户端自己抠图，自己处理。&lt;br&gt;Android能做的，鸿蒙应该也能做，这时候就应该掏出来Canvas怼一波了&lt;/p&gt;</summary>
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙-那些年我们踩过的坑-下</title>
    <link href="https://blog.huangyuanlove.com/2024/11/11/%E9%B8%BF%E8%92%99-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91-%E4%B8%8B/"/>
    <id>https://blog.huangyuanlove.com/2024/11/11/%E9%B8%BF%E8%92%99-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91-%E4%B8%8B/</id>
    <published>2024-11-11T07:33:33.000Z</published>
    <updated>2024-11-14T02:51:56.267Z</updated>
    
    <content type="html"><![CDATA[<p>书接上回，在上一篇文章中介绍了 ForEach循环渲染和自绘制输入框遇到的坑，这里聊一下 字面量对象和类对象 以及 自定义 Dialog 的坑。</p><span id="more"></span><p>先从简单的Dialog 开始，这里没有很深入的讲解，只是一些注意点以及官方推荐用法</p><h2 id="CustomDialogController"><a href="#CustomDialogController" class="headerlink" title="CustomDialogController"></a>CustomDialogController</h2><p>先说结论：在使用<code>CustomDialog</code>和<code>CustomDialogController</code>做自定义弹窗时，只能作为被<code>@Component</code>修饰的自定义组件的成员变量，甚至可以写在组件的点击事件中，但不能写到单纯的方法中。因为它需要 UIContext 上下文</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>正常情况：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Entry</span><br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">DialogControllerPage</span> &#123;<br>  <span class="hljs-meta">@State</span> <span class="hljs-attr">message</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;Hello World&#x27;</span>;<br>  <span class="hljs-attr">dialogID</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-attr">dialogController</span>: <span class="hljs-title class_">CustomDialogController</span> | <span class="hljs-literal">null</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomDialogController</span>(&#123;<br>    <span class="hljs-attr">builder</span>: <span class="hljs-title class_">CustomDialogExample</span>(&#123;<br>      <span class="hljs-attr">cancel</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      &#125;,<br>      <span class="hljs-attr">confirm</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      &#125;,<br>    &#125;),<br>  &#125;)<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>() &#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;在 Click 事件中定义&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)<br>        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-title class_">FontWeight</span>.<span class="hljs-property">Bold</span>)<br>        .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">let</span> <span class="hljs-attr">dialogController</span>: <span class="hljs-title class_">CustomDialogController</span> | <span class="hljs-literal">null</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomDialogController</span>(&#123;<br>            <span class="hljs-attr">builder</span>: <span class="hljs-title class_">CustomDialogExample</span>(&#123;<br>              <span class="hljs-attr">cancel</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>              &#125;,<br>              <span class="hljs-attr">confirm</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>              &#125;,<br>            &#125;),<br>          &#125;)<br>          dialogController.<span class="hljs-title function_">open</span>()<br>        &#125;)<br>      <br>      <span class="hljs-comment">//在自定义组件中定义</span><br>      <span class="hljs-title class_">CustomDialogView</span>()<br><br>      <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;在页面中定义&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>        .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)<br>        .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-title class_">FontWeight</span>.<span class="hljs-property">Bold</span>)<br>        .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogController</span>?.<span class="hljs-title function_">open</span>()<br>        &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-meta">@Component</span><br>struct <span class="hljs-title class_">CustomDialogView</span>&#123;<br>  <span class="hljs-attr">dialogController</span>: <span class="hljs-title class_">CustomDialogController</span> | <span class="hljs-literal">null</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomDialogController</span>(&#123;<br>    <span class="hljs-attr">builder</span>: <span class="hljs-title class_">CustomDialogExample</span>(&#123;<br>      <span class="hljs-attr">cancel</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      &#125;,<br>      <span class="hljs-attr">confirm</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      &#125;,<br>    &#125;),<br>  &#125;)<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Text</span>(<span class="hljs-string">&#x27;在自定义组件中定义&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>)<br>      .<span class="hljs-title function_">fontSize</span>(<span class="hljs-number">30</span>)<br>      .<span class="hljs-title function_">fontWeight</span>(<span class="hljs-title class_">FontWeight</span>.<span class="hljs-property">Bold</span>)<br>      .<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogController</span>?.<span class="hljs-title function_">open</span>()<br>      &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的这三种情况都是可以正常弹出弹窗的，但当我们把<code>CustomDialogController</code>写在普通方法中时</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showDialog</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">dialogController</span>: <span class="hljs-title class_">CustomDialogController</span> | <span class="hljs-literal">null</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomDialogController</span>(&#123;<br>    <span class="hljs-attr">builder</span>: <span class="hljs-title class_">CustomDialogExample</span>(&#123;<br>      <span class="hljs-attr">cancel</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      &#125;,<br>      <span class="hljs-attr">confirm</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      &#125;,<br>    &#125;),<br>  &#125;)<br>  dialogController.<span class="hljs-title function_">open</span>()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里会报一个错误，应用会崩溃，报错信息挺长的，这里截取了一部分</p><blockquote><p>Pid:25224<br>Uid:20020185<br>Process name:com.huangyuanlove.arkui_demo<br>Process life time:47s<br>Reason:Signal:SIGSEGV(SEGV_MAPERR)@0x00000000000008b0  probably caused by NULL pointer dereference<br>Fault thread info:<br>Tid:25224, Name:love.arkui_demo<br>#00 pc 00000000029cfd70 &#x2F;system&#x2F;lib64&#x2F;platformsdk&#x2F;libace_compatible.z.so(OHOS::Ace::Framework::JSCustomDialogController::JsOpenDialog(OHOS::Ace::Framework::JsiCallbackInfo const&amp;)+8)(1a64ce74d582cc151101042697df670d)<br>#01 pc 00000000009a8cb0 &#x2F;system&#x2F;lib64&#x2F;platformsdk&#x2F;libace_compatible.z.so(panda::Local<a href="panda::JSValueRef">panda::JSValueRef</a> OHOS::Ace::Framework::JsiClass<a href="OHOS::Ace::Framework::JSCustomDialogController">OHOS::Ace::Framework::JSCustomDialogController</a>::InternalJSMemberFunctionCallback<a href="OHOS::Ace::Framework::JSCustomDialogController">OHOS::Ace::Framework::JSCustomDialogController</a>(panda::JsiRuntimeCallInfo*)+2148)(1a64ce74d582cc151101042697df670d)<br>#02 pc 00000000004dc50c &#x2F;system&#x2F;lib64&#x2F;platformsdk&#x2F;libark_jsruntime.so(panda::Callback::RegisterCallback(panda::ecmascript::EcmaRuntimeCallInfo*)+456)(3499a0e0c3b8b8dc50b1a4589295965e)</p></blockquote><p>我想这可能就是为啥需要在<code>@CustomDialog</code>修饰的 struct 中声明一个<code>CustomDialogController</code>变量的原因。</p><h3 id="官方推荐方案"><a href="#官方推荐方案" class="headerlink" title="官方推荐方案"></a>官方推荐方案</h3><p>在官方文档中有一个 <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-uicontext-custom-dialog-V5">不依赖UI组件的全局自定义弹窗 (推荐)</a>。虽然说是<strong>不依赖UI组件</strong>，但实际上还是使用的<code>UIContext</code>这个上下文获取到<code>promptAction</code>，调用<code>promptAction.openCustomDialog</code>方法来实现的弹窗。<br>吐槽归吐槽，先看下用法，看完了再评价也不迟。<br>这里有两种方案，一种是传入<code>ComponentContent</code>对象，这个方案在 <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-uicontext-custom-dialog-V5">不依赖UI组件的全局自定义弹窗 (推荐)</a>这里有详细介绍<br>另外一种方案是传入<code> promptAction.CustomDialogOptions</code>,这种方案是在<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-promptaction-V5">@ohos.promptAction (弹窗)</a> API 参考中介绍的。</p><h4 id="传入ComponentContent对象"><a href="#传入ComponentContent对象" class="headerlink" title="传入ComponentContent对象"></a>传入<code>ComponentContent</code>对象</h4><p>创建<code>ComponentContent</code>对象需要一个<code>UIContext</code>对象，一个<code>wrapBuilder</code>以及<code>wrapBuilder</code>中需要的参数对象。</p><ul><li>UIContext对象可以在页面中通过<code>this.getUIContext()</code>获取。  </li><li><code>wrapBuilder</code>需要一个全局被@Build修饰的方法。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span>  <span class="hljs-title function_">glaobleConfirmOrCancelDialogBuilder1</span>(<span class="hljs-params">dialogData: DialogData</span>) &#123;<br>  <span class="hljs-title class_">Column</span>() &#123;<br>    <span class="hljs-comment">//这里写弹窗中的布局</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们可以在某个组件的点击事件中展示弹窗</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">.<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">dialogData</span>: <span class="hljs-title class_">DialogData</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DialogData</span>()<br>  dialogData.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;推荐方案 一&#x27;</span><br>  dialogData.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;使用  promptAction.openCustomDialog&#x27;</span><br><br><br>  <span class="hljs-keyword">let</span> uiContext = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getUIContext</span>();<br>  <span class="hljs-keyword">let</span> promptAction = uiContext.<span class="hljs-title function_">getPromptAction</span>();<br><br>  <span class="hljs-keyword">let</span> contentNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComponentContent</span>(uiContext, <span class="hljs-title function_">wrapBuilder</span>(glaobleConfirmOrCancelDialogBuilder1), dialogData);<br>  dialogData.<span class="hljs-property">onCancel</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    promptAction.<span class="hljs-title function_">closeCustomDialog</span>(contentNode)<br><br>  &#125;<br>  dialogData.<span class="hljs-property">onConfirm</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    promptAction.<span class="hljs-title function_">closeCustomDialog</span>(contentNode)<br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>    promptAction.<span class="hljs-title function_">openCustomDialog</span>(contentNode);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">let</span> message = (error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>).<span class="hljs-property">message</span>;<br>    <span class="hljs-keyword">let</span> code = (error <span class="hljs-keyword">as</span> <span class="hljs-title class_">BusinessError</span>).<span class="hljs-property">code</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`OpenCustomDialog args error code is <span class="hljs-subst">$&#123;code&#125;</span>, message is <span class="hljs-subst">$&#123;message&#125;</span>`</span>);<br>  &#125;;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当然，在调用<code>openCustomDialog</code>还有第二个可选参数<code>promptAction.BaseDialogOptions</code>,相应的介绍在<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-promptaction-V5#basedialogoptions11">这里</a></p><h4 id="传入CustomDialogOptions"><a href="#传入CustomDialogOptions" class="headerlink" title="传入CustomDialogOptions"></a>传入<code>CustomDialogOptions</code></h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">.<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">dialogData</span>: <span class="hljs-title class_">DialogData1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DialogData1</span>()<br>  dialogData.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;推荐方案二&#x27;</span><br>  dialogData.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;使用  promptAction.openCustomDialog&#x27;</span><br>  dialogData.<span class="hljs-property">onCancel</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    promptAction.<span class="hljs-title function_">closeCustomDialog</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogID</span>)<br>  &#125;<br>  dialogData.<span class="hljs-property">onConfirm</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    promptAction.<span class="hljs-title function_">closeCustomDialog</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogID</span>)<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getUIContext</span>().<span class="hljs-title function_">getPromptAction</span>().<span class="hljs-title function_">openCustomDialog</span>(&#123;<br>    <span class="hljs-attr">builder</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">confirmOrCancelDialogBuilder1</span>(dialogData)<br>    &#125;,<br><br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">dialogID: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogID</span> = dialogID<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>这里展示弹窗的时候会返回一个dialogID，我们在关闭弹窗的时候需要传入这个id。</p><h2 id="字面量对象与类对象"><a href="#字面量对象与类对象" class="headerlink" title="字面量对象与类对象"></a>字面量对象与类对象</h2><p>对应的英文是plain (literal) objects,class (constructor) objects，但是在不知道该怎么优雅的翻译，就先这么叫吧。<br>在 ArkTS 中，创建的每个字面量对象都必须有对应的类型，比如</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> tmpUser = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;123&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>直接这么写会报错，提示：<strong>Object literal must correspond to some explicitly declared class or interface (arkts-no-untyped-obj-literals) <ArkTSCheck></strong><br>也就是说我们必须要先定义一个<code>class</code> 或者 <code>interface</code>,但是这里需要注意一下，我们直接使用字面量语法创建对应的<code>class</code>对象时，要求该<code>class</code>对象中不能声明方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserInterface</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserWithOutMethod</span>&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span> =<span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserWithMethod</span>&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span> =<span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>)&#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>,<span class="hljs-string">&#x27;UserWithMethod&#x27;</span>,<span class="hljs-string">&#x27;getInfo&#x27;</span>)<br>  &#125;<br>&#125;<br><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">userInterface</span>: <span class="hljs-title class_">UserInterface</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;123&quot;</span><br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">userWithOutMethod</span>: <span class="hljs-title class_">UserWithOutMethod</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;123&quot;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">userWithMethod</span>: <span class="hljs-title class_">UserWithMethod</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;123&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>userInterface</code> 和 <code>userWithOutMethod</code>都是正常的，但<code>userWithMethod</code>会报错，提示<code>Property &#39;getInfo&#39; is missing in type &#39;&#123; name: string; &#125;&#39; but required in type &#39;UserWithMethod&#39;</code><br><img src="/image/HarmonyOS/%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95%E5%88%9B%E5%BB%BA%E5%90%AB%E6%9C%89%E6%96%B9%E6%B3%95%E7%9A%84%E5%AF%B9%E8%B1%A11.png" alt="字面量语法创建含有方法的对象错误信息"><br>即使我们把这个方法补上，也是会提示错误：<code>Object literal must correspond to some explicitly declared class or interface</code><br><img src="/image/HarmonyOS/%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95%E5%88%9B%E5%BB%BA%E5%90%AB%E6%9C%89%E6%96%B9%E6%B3%95%E7%9A%84%E5%AF%B9%E8%B1%A12.png" alt="字面量语法创建含有方法的对象错误信息">  </p><p>不过话又说回来，为啥要用字面量的语法创建类对象嘞？用<code>new</code>关键字它不香么？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> userWithMethod = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserWithMethod</span>()<br></code></pre></td></tr></table></figure><h4 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h4><p>不过对于上面包含方法的类，也有其他方案，比如通过<code>as</code>关键字强转</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> userStr =  <span class="hljs-string">`&#123;&quot;name&quot;:&quot;123&quot;&#125;`</span><br><span class="hljs-keyword">let</span> userWithMethodJSON = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(userStr) <span class="hljs-keyword">as</span>  <span class="hljs-title class_">UserWithMethod</span><br>hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>,<span class="hljs-string">&#x27;UseASPage&#x27;</span>,userWithMethodJSON.<span class="hljs-property">name</span>)<br></code></pre></td></tr></table></figure><p>这样的话，我们是可以获取到对象的<code>name</code>属性，也能正常使用，<br>但是，不能调用这个对象的<code>getInfo()</code>方法，会崩溃，报错提示<code>Error message:is not callable</code>.<br>这个也挺好理解：</p><blockquote><p>使用<code>JSON.parse(userStr) as  UserWithMethod</code>这种方式得到的对象实际上是字面量对象，这个对象中并没有<code>getInfo()</code>方法，它的原型链上也没有这个方法，所以就会报错。 </p></blockquote><p>为啥 IDE 不给提示嘞？那就不知道了<br>当然，我们也有方法将字面量对象转为类对象，使得我们可以调用其方法：使用<code>&quot;class-transformer&quot;: &quot;^0.5.1&quot;</code> 这个三方库，github 地址(<a href="https://github.com/typestack/class-transformer)[https://github.com/typestack/class-transformer],%E4%BD%86%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%98%AF%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%BA%93%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%87%E5%87%86%E7%9A%84ohpm%E5%BA%93%EF%BC%8C%E8%99%BD%E7%84%B6%E5%AE%83%E5%8F%AF%E4%BB%A5%E5%9C%A8">https://github.com/typestack/class-transformer)[https://github.com/typestack/class-transformer],但要注意的是，这个库不是一个标准的ohpm库，虽然它可以在</a> ArkTS 里面使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; plainToClass &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-transformer&#x27;</span>;<br><span class="hljs-keyword">let</span> userStr = <span class="hljs-string">`&#123;&quot;name&quot;:&quot;123&quot;&#125;`</span><br><span class="hljs-keyword">let</span> userWithMethodJSON = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(userStr) <span class="hljs-keyword">as</span> <span class="hljs-title class_">UserWithMethod</span><br><span class="hljs-keyword">let</span> tmp = <span class="hljs-title function_">plainToClass</span>(<span class="hljs-title class_">UserWithMethod</span>, userWithMethodJSON)<br>tmp.<span class="hljs-title function_">getInfo</span>()<br></code></pre></td></tr></table></figure><p>这样就正常了。</p><h3 id="另外一个坑"><a href="#另外一个坑" class="headerlink" title="另外一个坑"></a>另外一个坑</h3><p>还记得上一篇中提到的状态管理装饰器 <code>@Observed装饰器和@ObjectLink装饰器：嵌套类对象属性变化</code>么？<br>这里还有一个小坑，使用<code>as强转</code>或者使用<code>plainToClass</code>方法创建的对象的属性发生变化时，是无法被<code>@ObjectLink装饰器</code>观察到的。<br>举个例子，我们有一个嵌套类，使用<code>@Observed</code>装饰</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Observed</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstLevel</span> &#123;<br>  <span class="hljs-attr">time</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>  <span class="hljs-attr">secondLevel</span>: <span class="hljs-title class_">SecondLevel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondLevel</span>()<br>&#125;<br><br><span class="hljs-meta">@Observed</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondLevel</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再定义几个赋值的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@State</span> firstLevel?:<span class="hljs-title class_">FirstLevel</span> = <span class="hljs-literal">undefined</span><br> <span class="hljs-title function_">initWithNew</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstLevel</span>()<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">time</span> = systemDateTime.<span class="hljs-title function_">getTime</span>()<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">secondLevel</span>:<span class="hljs-title class_">SecondLevel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecondLevel</span>()<br>  secondLevel.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;new SecondLevel&#x27;</span><br>  secondLevel.<span class="hljs-property">age</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">secondLevel</span> = secondLevel<br>&#125;<br><br><span class="hljs-title function_">initWithAs</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">secondLevel</span>:<span class="hljs-title class_">SecondLevel</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;as SecondLevel&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>)<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span> = &#123;<br>    <span class="hljs-attr">time</span>:systemDateTime.<span class="hljs-title function_">getTime</span>(),<br>    <span class="hljs-attr">secondLevel</span>:secondLevel<br>  &#125;<br>&#125;<br><span class="hljs-title function_">initWithPlainToText</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">`&#123;&quot;time&quot;:<span class="hljs-subst">$&#123;systemDateTime.getTime()&#125;</span>,&quot;secondLevel&quot;:&#123;&quot;name&quot;:&quot;PlainToText<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span>)&#125;</span>&quot;,&quot;age&quot;:<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span>)&#125;</span>&#125;&#125;`</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">tmp</span>:<span class="hljs-title class_">FirstLevel</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(str) <span class="hljs-keyword">as</span> <span class="hljs-title class_">FirstLevel</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span> = <span class="hljs-title function_">plainToClass</span>(<span class="hljs-title class_">FirstLevel</span>,tmp)<br>&#125;<br></code></pre></td></tr></table></figure><p>两个用于展示数据的自定义组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><span class="hljs-meta">@Component</span><br>struct  <span class="hljs-title class_">ShowFistLevel</span>&#123;<br>  <span class="hljs-meta">@Watch</span>(<span class="hljs-string">&#x27;onFirstLevelChange&#x27;</span>) <span class="hljs-meta">@ObjectLink</span> <span class="hljs-attr">firstLevel</span>:<span class="hljs-title class_">FirstLevel</span><br>  <span class="hljs-title function_">onFirstLevelChange</span>(<span class="hljs-params"></span>)&#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;UseASPage&#x27;</span>, <span class="hljs-string">&#x27;onFirstLevelChange&#x27;</span>)<br>  &#125;<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>()&#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">time</span>.<span class="hljs-title function_">toString</span>())<br>      <span class="hljs-title class_">ShowSecondLevel</span>(&#123;<span class="hljs-attr">secondLevel</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">secondLevel</span>&#125;)<br>    &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">15</span>)<br>    .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&quot;#e7e7e7e7&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br>struct  <span class="hljs-title class_">ShowSecondLevel</span>&#123;<br>  <span class="hljs-meta">@Watch</span>(<span class="hljs-string">&#x27;onSecondLevelChange&#x27;</span>) <span class="hljs-meta">@ObjectLink</span> <span class="hljs-attr">secondLevel</span>:<span class="hljs-title class_">SecondLevel</span><br>  <span class="hljs-title function_">onSecondLevelChange</span>(<span class="hljs-params"></span>)&#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;UseASPage&#x27;</span>, <span class="hljs-string">&#x27;onSecondLevelChange&#x27;</span>)<br>  &#125;<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>()&#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">secondLevel</span>.<span class="hljs-property">name</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">secondLevel</span>.<span class="hljs-property">age</span>.<span class="hljs-title function_">toString</span>())<br>    &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">15</span>)<br>    .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&quot;#e7e7e7e7&quot;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是，渲染嵌套类的组件需要和类对象的层级相同，不然也不会刷新。<br>比如这里<code>FirstLevel</code>类中有<code>SecondLevel</code>类型属性，就需要写成上面这样：拆成两个组件，在<code>ShowFistLevel</code>组件中引用<code>ShowSecondLevel</code>,而不能这样写</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Component</span><br>struct  <span class="hljs-title class_">ShowFistLevel</span>&#123;<br>  <span class="hljs-meta">@Watch</span>(<span class="hljs-string">&#x27;onFirstLevelChange&#x27;</span>) <span class="hljs-meta">@ObjectLink</span> <span class="hljs-attr">firstLevel</span>:<span class="hljs-title class_">FirstLevel</span><br>  <span class="hljs-title function_">onFirstLevelChange</span>(<span class="hljs-params"></span>)&#123;<br>    hilog.<span class="hljs-title function_">error</span>(<span class="hljs-number">0x01</span>, <span class="hljs-string">&#x27;UseASPage&#x27;</span>, <span class="hljs-string">&#x27;onFirstLevelChange&#x27;</span>)<br>  &#125;<br>  <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Column</span>()&#123;<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">time</span>.<span class="hljs-title function_">toString</span>())<br>      <span class="hljs-comment">//这里</span><br>      <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">secondLevel</span>.<span class="hljs-property">name</span>)<br>      <span class="hljs-title class_">Text</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">secondLevel</span>.<span class="hljs-property">age</span>.<span class="hljs-title function_">toString</span>())<br>    &#125;.<span class="hljs-title function_">margin</span>(<span class="hljs-number">15</span>)<br>    .<span class="hljs-title function_">backgroundColor</span>(<span class="hljs-string">&quot;#e7e7e7e7&quot;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样合并成一个组件后，其中的<code>name</code>和<code>age</code>属性发生变化时，<strong>并不能刷新页面</strong></p><p>然后我们写个页面测试一下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><br><br><span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Column</span>() &#123;<br>    <span class="hljs-title class_">Row</span>() &#123;<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;使用New&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initWithNew</span>()<br>      &#125;)<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;使用PlainToClass&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initWithPlainToText</span>()<br>      &#125;)<br><br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;使用As&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initWithAs</span>()<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-title class_">Row</span>() &#123;<br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改time属性&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>)&#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">time</span> = systemDateTime.<span class="hljs-title function_">getTime</span>()<br>        &#125;<br>      &#125;)<br><br>      <span class="hljs-title class_">Button</span>(<span class="hljs-string">&#x27;修改 name、age 属性&#x27;</span>).<span class="hljs-title function_">margin</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">onClick</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">secondLevel</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;新名字 &#x27;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10</span>)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>.<span class="hljs-property">secondLevel</span>.<span class="hljs-property">age</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>)<br>        &#125;<br>      &#125;)<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>)&#123;<br>      <span class="hljs-title class_">ShowFistLevel</span>(&#123;<span class="hljs-attr">firstLevel</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstLevel</span>&#125;)<br>    &#125;<br><br>  &#125;<br>  .<span class="hljs-title function_">height</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>  .<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;100%&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>点击<code>使用New</code>后，再点击修改属性，可以看到页面刷新了<br>这时候点击<code>使用PlainToClass</code>后，页面也刷新了，但这时候点击<code>修改time属性</code>,页面会刷新，但点击<code>修改 name、age 属性</code>，页面是没有刷新的。但我们多次点击<code>使用PlainToClass</code>时，页面是可以刷新的。<br>点击使用<code>使用As</code>后，页面也刷新了，，但这时候点击<code>修改time属性</code>,页面会刷新，但点击<code>修改 name、age 属性</code>，页面是没有刷新的。但我们多次点击<code>使用As</code>时，页面是可以刷新的。</p><p>也就是说我们使用<code>PlainToClass</code>和<code>as</code> 这两种方式创建出来的对象，会使得<code>@Observed装饰器和@ObjectLink装饰器</code>失效。这是开发过程中需要注意的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>使用<code>CustomDialogController</code>做弹窗展示时，需要在组件中创建<code>CustomDialogController</code>对象，至少在 api12 上是这样的。</li><li>不想使用<code>CustomDialogController</code>的话，可以使用<code>promptAction.openCustomDialog</code>做弹窗展示，当时，它是依赖<code>UIContext</code>这个上下文。注意不要和<code>Context</code>弄混了</li><li>注意字面量对象和类对象。使用<code>as</code>将字面量对象转为类对象时，无法使用类本身的方法，可以使用<strong>class-transformer中的plainToClass</strong>创建类对象，这样可以调用对象的方法</li><li>使用<code>PlainToClass</code>和<code>as</code> 这两种方式创建出来的对象，会使得<code>@Observed装饰器和@ObjectLink装饰器</code>失效。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;书接上回，在上一篇文章中介绍了 ForEach循环渲染和自绘制输入框遇到的坑，这里聊一下 字面量对象和类对象 以及 自定义 Dialog 的坑。&lt;/p&gt;</summary>
    
    
    
    
    <category term="HarmonyOS" scheme="https://blog.huangyuanlove.com/tags/HarmonyOS/"/>
    
  </entry>
  
</feed>
