<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>放码过来</title>
  <icon>https://www.gravatar.com/avatar/771a5b96a1b55228dbb1eeb23619ef45</icon>
  <subtitle>技术宅 huangyuan@huangyuanlove.com</subtitle>
  <link href="https://blog.huangyuanlove.com/atom.xml" rel="self"/>
  
  <link href="https://blog.huangyuanlove.com/"/>
  <updated>2023-05-19T12:51:02.220Z</updated>
  <id>https://blog.huangyuanlove.com/</id>
  
  <author>
    <name>HuangYuan_xuan</name>
    <email>huangyuan@huangyuanlove.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java使用Protocol Buffer与服务端交互</title>
    <link href="https://blog.huangyuanlove.com/2023/05/09/Java%E4%BD%BF%E7%94%A8Protocol-Buffer%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    <id>https://blog.huangyuanlove.com/2023/05/09/Java%E4%BD%BF%E7%94%A8Protocol-Buffer%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%A4%E4%BA%92/</id>
    <published>2023-05-09T06:14:26.000Z</published>
    <updated>2023-05-19T12:51:02.220Z</updated>
    
    <content type="html"><![CDATA[<p>最近和三方对接时，对方给出的接口文档是使用protol buffer进行交互的，并非是我们常见的json、xml这种格式，了解了一下这种格式或者说交协议的特点。<br>首先，Protocol Buffer序列化之后是二进制流，不进行反序列化基本不可读。<br>其次，序列化之后的体积很小，适合网络传输或者设备之间传输<br>最后，可以跨平台、跨语言使用<br>不过这些特点既是优点也是缺点：序列化之后的数据不可读，还原序列化之后的数据需要事先定义好的数据格式</p><span id="more"></span><h4 id="安装Protocol-Buffer的编译器"><a href="#安装Protocol-Buffer的编译器" class="headerlink" title="安装Protocol Buffer的编译器"></a>安装Protocol Buffer的编译器</h4><p>我们需要使用相应的编译器将<code>.proto</code>文件转化为对应的编程语言的代码。<br>编译器可以在这里下载<a href="https://github.com/protocolbuffers/protobuf">https://github.com/protocolbuffers/protobuf</a><br>这里我下载的版本是22.3。下载完成后解压、添加环境变量，命令行执行 <code>protoc --version</code>能够输出版本号就可以了</p><h4 id="编写-proto文件"><a href="#编写-proto文件" class="headerlink" title="编写 .proto文件"></a>编写 .proto文件</h4><p>文件内容及格式可以参考这里<a href="https://protobuf.dev/">https://protobuf.dev/</a><br>下面是一个示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs protocol">syntax = &quot;proto2&quot;;<br><br>package tutorial;<br><br>option java_multiple_files = true;<br>option java_package = &quot;com.example.tutorial.protos&quot;;<br>option java_outer_classname = &quot;AddressBookProtos&quot;;<br><br>message Person &#123;<br>  optional string name = 1;<br>  optional int32 id = 2;<br>  optional string email = 3;<br><br>  enum PhoneType &#123;<br>    MOBILE = 0;<br>    HOME = 1;<br>    WORK = 2;<br>  &#125;<br><br>  message PhoneNumber &#123;<br>    optional string number = 1;<br>    optional PhoneType type = 2 [default = HOME];<br>  &#125;<br><br>  repeated PhoneNumber phones = 4;<br>&#125;<br><br>message AddressBook &#123;<br>  repeated Person people = 1;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后我们需要使用上面安装好的编译工具将文件编译转化为对应编程语言的文件，这里使用的是java</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>protocol --java_out=src/main/java src/main/protobuf/AddressBookProtos.proto<br><br></code></pre></td></tr></table></figure><p><code>src/main/java</code>是输出文件的位置，<code>src/main/protobuf/tgssp.proto</code>是数据格式文件的位置</p><p>没有报错的话，我们就可以在输出文件的位置看到生成的java文件了</p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>想要使用该文件，我们需要在工程中引入相应的依赖库，这里还是用java举例</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;com.google.protobuf&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;protobuf-java&#x27;</span>, <span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.22.3&#x27;</span><br></code></pre></td></tr></table></figure><p>因为上面的<code>.proto</code>文件中定义的<code>java_multiple_files</code>为true，所以这里是分开生成的文件。<br>然后我们就可以使用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> Person.newBuilder()<br>        .setEmail(<span class="hljs-string">&quot;123@123.com&quot;</span>)<br>        .setId(<span class="hljs-number">1</span>)<br>        .setName(<span class="hljs-string">&quot;null&quot;</span>)<br>        .build();<br><span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> AddressBook.newBuilder()<br>        .addPeople(person)<br>        .build();<br>System.out.println(addressBook);<br></code></pre></td></tr></table></figure><p>当然我们也可以将<code>addressBook</code>对象调用<code>toByteArray()</code>方法序列化为二进制数据流;也可以调用<code>AddressBook.parseFrom(byte[] bytes)</code>从二进制数据中反序列化</p><h4 id="与服务器交互"><a href="#与服务器交互" class="headerlink" title="与服务器交互"></a>与服务器交互</h4><p>这里为了方便，直接使用的apache的网络请求库，使用其他库原理是一样的<br>依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;org.apache.httpcomponents&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;httpcore&#x27;</span>, <span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;4.4.14&#x27;</span><br>implementation <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;org.apache.httpcomponents&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;httpclient&#x27;</span>, <span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;4.5.13&#x27;</span><br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpPost</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(<span class="hljs-string">&quot;https://a.b.com&quot;</span>);<br>request.setEntity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayEntity</span>(tgrequest.toByteArray()));<br><span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br><span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.execute(request);<br><span class="hljs-comment">// 处理 HTTP 响应</span><br><span class="hljs-type">HttpEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> response.getEntity();<br><span class="hljs-keyword">if</span> (entity != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 将响应实体转换为字节数组</span><br>    <span class="hljs-type">byte</span>[] data = toByteArray(entity.getContent());<br>    <span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> AddressBook.parseFrom(data);<br>    System.out.println(addressBook);<br>&#125;<br><br><span class="hljs-comment">//读取响应</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] toByteArray(InputStream in) <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>        out.write(buffer, <span class="hljs-number">0</span>, len);<br>    &#125;<br>    <span class="hljs-keyword">return</span> out.toByteArray();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>到这里就算是完成了一次使用protocol buffer的交互</p><h4 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h4><p>我们可以使用<code>protostuff</code>这个库，从而不借助<code>.proto</code>文件就可以直接对POJO进行序列化和反序列化。<br>详情可以查看这个仓库 <a href="https://github.com/protostuff/protostuff">https://github.com/protostuff/protostuff</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近和三方对接时，对方给出的接口文档是使用protol buffer进行交互的，并非是我们常见的json、xml这种格式，了解了一下这种格式或者说交协议的特点。&lt;br&gt;首先，Protocol Buffer序列化之后是二进制流，不进行反序列化基本不可读。&lt;br&gt;其次，序列化之后的体积很小，适合网络传输或者设备之间传输&lt;br&gt;最后，可以跨平台、跨语言使用&lt;br&gt;不过这些特点既是优点也是缺点：序列化之后的数据不可读，还原序列化之后的数据需要事先定义好的数据格式&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.huangyuanlove.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>flutter_Key</title>
    <link href="https://blog.huangyuanlove.com/2023/01/23/flutter-Key/"/>
    <id>https://blog.huangyuanlove.com/2023/01/23/flutter-Key/</id>
    <published>2023-01-23T06:31:47.000Z</published>
    <updated>2023-05-19T12:51:02.230Z</updated>
    
    <content type="html"><![CDATA[<p>官方视频在这里，有条件的可以看下<br><a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc">https://www.youtube.com/watch?v=kn0EOS-ZiIc</a><br>也可以看下这个对diff算法的详解<br><a href="https://juejin.cn/post/6935422635194974244">https://juejin.cn/post/6935422635194974244</a><br>主要代码如下</p><span id="more"></span><p>一个用于获取颜色的RandomColor</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomColor</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Random _random = Random();<br><br>  <span class="hljs-keyword">static</span> Color getColor() &#123;<br>    <span class="hljs-keyword">return</span> Color.fromRGBO(<br>      _random.nextInt(<span class="hljs-number">256</span>),<br>      _random.nextInt(<span class="hljs-number">256</span>),<br>      _random.nextInt(<span class="hljs-number">256</span>),<br>      <span class="hljs-number">1</span>,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个继承自StatefulWidget的widget，使用State保存了颜色信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomColorBoxStateful</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  RandomColorBoxStateful(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;RandomColorBoxStateful&gt; createState() =&gt; RandomColorBoxState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomColorBoxState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">RandomColorBoxStateful</span>&gt; </span>&#123;<br><br>  <span class="hljs-keyword">late</span> Color myColor;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    myColor = RandomColor.getColor();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&quot;<span class="hljs-subst">$myColor</span>&quot;</span>,style: TextStyle(color: myColor),);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个继承自StatelessWidget的widget，内容差不多</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomColorBoxStateless</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>   RandomColorBoxStateless(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br>  Color myColor = RandomColor.getColor();<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>      <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&quot;<span class="hljs-subst">$myColor</span>&quot;</span>,style: TextStyle(color: myColor),););<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个用来显示界面的SwapColorBox</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwapColorBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; SwapColorBoxState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwapColorBoxState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">SwapColorBox</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">List</span>&lt;Widget&gt; tiles = [ RandomColorBoxStateful(), RandomColorBoxStateful() ];<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      body: SafeArea(child: Column(children: tiles)),<br>      floatingActionButton: FloatingActionButton(<br>        child: Icon(Icons.sentiment_very_satisfied),<br>        onPressed: swapTiles,<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> swapTiles() &#123;<br>    setState(() &#123;<br>      <span class="hljs-built_in">List</span>&lt;Widget&gt; tmp = [tiles[<span class="hljs-number">1</span>],tiles[<span class="hljs-number">0</span>]];<br>      tiles = tmp;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时点击floatingActionButton会发现页面没有变化。</p><h3 id="如何修改"><a href="#如何修改" class="headerlink" title="如何修改"></a>如何修改</h3><p>好几种办法</p><ul><li>将SwapColorBoxState中的tiles改为 List<Widget> tiles &#x3D; [ RandomColorBoxStateless(), RandomColorBoxStateless() ]</li><li>将SwapColorBoxState中的tiles中RandomColorBoxStateful加上UniqueKey: List<Widget> tiles &#x3D; [ RandomColorBoxStateful(key: UniqueKey(),), RandomColorBoxStateful(key: UniqueKey(),) ];</li><li>将RandomColorBoxStateful中的myColor放在RandomColorBoxStateful中而不是RandomColorBoxState中</li></ul><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>元素树没有交换，虽然我们交换了Widget，但是其Element并没有交换，而颜色状态又是由State维护，所以在执行build的时候颜色并没有变化。<br>先看下更新的代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Element</span>&gt; updateChildren(<span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Element</span>&gt; oldChildren, <span class="hljs-built_in">List</span>&lt;Widget&gt; newWidgets, &#123; <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">Element</span>&gt;? forgottenChildren, <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Object?</span>&gt;? slots &#125;) &#123;<br><br><br>  <span class="hljs-built_in">Element?</span> replaceWithNullIfForgotten(<span class="hljs-built_in">Element</span> child) &#123;<br>    <span class="hljs-keyword">return</span> forgottenChildren != <span class="hljs-keyword">null</span> &amp;&amp; forgottenChildren.contains(child) ? <span class="hljs-keyword">null</span> : child;<br>  &#125;<br><br>  <span class="hljs-built_in">Object?</span> slotFor(<span class="hljs-built_in">int</span> newChildIndex, <span class="hljs-built_in">Element?</span> previousChild) &#123;<br>    <span class="hljs-keyword">return</span> slots != <span class="hljs-keyword">null</span><br>      ? slots[newChildIndex]<br>      : IndexedSlot&lt;<span class="hljs-built_in">Element?</span>&gt;(newChildIndex, previousChild);<br>  &#125;<br><br><br>  <span class="hljs-built_in">int</span> newChildrenTop = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">int</span> oldChildrenTop = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">int</span> newChildrenBottom = newWidgets.length - <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">int</span> oldChildrenBottom = oldChildren.length - <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Element</span>&gt; newChildren = oldChildren.length == newWidgets.length ?<br>      oldChildren : <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Element</span>&gt;.filled(newWidgets.length, _NullElement.instance);<br><br>  <span class="hljs-built_in">Element?</span> previousChild;<br><br>  <span class="hljs-comment">// Update the top of the list.</span><br>  <span class="hljs-keyword">while</span> ((oldChildrenTop &lt;= oldChildrenBottom) &amp;&amp; (newChildrenTop &lt;= newChildrenBottom)) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> oldChild = replaceWithNullIfForgotten(oldChildren[oldChildrenTop]);<br>    <span class="hljs-keyword">final</span> Widget newWidget = newWidgets[newChildrenTop];<br>   <br>    <span class="hljs-keyword">if</span> (oldChild == <span class="hljs-keyword">null</span> || !Widget.canUpdate(oldChild.widget, newWidget))<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild = updateChild(oldChild, newWidget, slotFor(newChildrenTop, previousChild))!;<br>    <br>    newChildren[newChildrenTop] = newChild;<br>    previousChild = newChild;<br>    newChildrenTop += <span class="hljs-number">1</span>;<br>    oldChildrenTop += <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// Scan the bottom of the list.</span><br>  <span class="hljs-keyword">while</span> ((oldChildrenTop &lt;= oldChildrenBottom) &amp;&amp; (newChildrenTop &lt;= newChildrenBottom)) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> oldChild = replaceWithNullIfForgotten(oldChildren[oldChildrenBottom]);<br>    <span class="hljs-keyword">final</span> Widget newWidget = newWidgets[newChildrenBottom];<br>    <br>    <span class="hljs-keyword">if</span> (oldChild == <span class="hljs-keyword">null</span> || !Widget.canUpdate(oldChild.widget, newWidget))<br>      <span class="hljs-keyword">break</span>;<br>    oldChildrenBottom -= <span class="hljs-number">1</span>;<br>    newChildrenBottom -= <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// Scan the old children in the middle of the list.</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">bool</span> haveOldChildren = oldChildrenTop &lt;= oldChildrenBottom;<br>  <span class="hljs-built_in">Map</span>&lt;Key, <span class="hljs-built_in">Element</span>&gt;? oldKeyedChildren;<br>  <span class="hljs-keyword">if</span> (haveOldChildren) &#123;<br>    oldKeyedChildren = &lt;Key, <span class="hljs-built_in">Element</span>&gt;&#123;&#125;;<br>    <span class="hljs-keyword">while</span> (oldChildrenTop &lt;= oldChildrenBottom) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> oldChild = replaceWithNullIfForgotten(oldChildren[oldChildrenTop]);<br>     <br>      <span class="hljs-keyword">if</span> (oldChild != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (oldChild.widget.key != <span class="hljs-keyword">null</span>)<br>          oldKeyedChildren[oldChild.widget.key!] = oldChild;<br>        <span class="hljs-keyword">else</span><br>          deactivateChild(oldChild);<br>      &#125;<br>      oldChildrenTop += <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Update the middle of the list.</span><br>  <span class="hljs-keyword">while</span> (newChildrenTop &lt;= newChildrenBottom) &#123;<br>    <span class="hljs-built_in">Element?</span> oldChild;<br>    <span class="hljs-keyword">final</span> Widget newWidget = newWidgets[newChildrenTop];<br>    <span class="hljs-keyword">if</span> (haveOldChildren) &#123;<br>      <span class="hljs-keyword">final</span> Key? key = newWidget.key;<br>      <span class="hljs-keyword">if</span> (key != <span class="hljs-keyword">null</span>) &#123;<br>        oldChild = oldKeyedChildren![key];<br>        <span class="hljs-keyword">if</span> (oldChild != <span class="hljs-keyword">null</span>) &#123;<br>          <span class="hljs-keyword">if</span> (Widget.canUpdate(oldChild.widget, newWidget)) &#123;<br>            <span class="hljs-comment">// we found a match!</span><br>            <span class="hljs-comment">// remove it from oldKeyedChildren so we don&#x27;t unsync it later</span><br>            oldKeyedChildren.remove(key);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Not a match, let&#x27;s pretend we didn&#x27;t see it for now.</span><br>            oldChild = <span class="hljs-keyword">null</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>   <br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild = updateChild(oldChild, newWidget, slotFor(newChildrenTop, previousChild))!;<br>   <br>    newChildren[newChildrenTop] = newChild;<br>    previousChild = newChild;<br>    newChildrenTop += <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// We&#x27;ve scanned the whole list.</span><br>  <br>  newChildrenBottom = newWidgets.length - <span class="hljs-number">1</span>;<br>  oldChildrenBottom = oldChildren.length - <span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">// Update the bottom of the list.</span><br>  <span class="hljs-keyword">while</span> ((oldChildrenTop &lt;= oldChildrenBottom) &amp;&amp; (newChildrenTop &lt;= newChildrenBottom)) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> oldChild = oldChildren[oldChildrenTop];<br>   <br>    <span class="hljs-keyword">final</span> Widget newWidget = newWidgets[newChildrenTop];<br>   <br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild = updateChild(oldChild, newWidget, slotFor(newChildrenTop, previousChild))!;<br>   <br>    newChildren[newChildrenTop] = newChild;<br>    previousChild = newChild;<br>    newChildrenTop += <span class="hljs-number">1</span>;<br>    oldChildrenTop += <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// Clean up any of the remaining middle nodes from the old list.</span><br>  <span class="hljs-keyword">if</span> (haveOldChildren &amp;&amp; oldKeyedChildren!.isNotEmpty) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> oldChild <span class="hljs-keyword">in</span> oldKeyedChildren.values) &#123;<br>      <span class="hljs-keyword">if</span> (forgottenChildren == <span class="hljs-keyword">null</span> || !forgottenChildren.contains(oldChild))<br>        deactivateChild(oldChild);<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-keyword">return</span> newChildren;<br>&#125;<br></code></pre></td></tr></table></figure><p>前置条件：</p><h4 id="Widget-canUpdate"><a href="#Widget-canUpdate" class="headerlink" title="Widget.canUpdate()"></a>Widget.canUpdate()</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;<br>  <span class="hljs-keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType<br>      &amp;&amp; oldWidget.key == newWidget.key;<br>&#125;<br></code></pre></td></tr></table></figure><p>比较两个Widget的runtimeType和key是否相同</p><h4 id="Element-update"><a href="#Element-update" class="headerlink" title="Element.update()"></a>Element.update()</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> update(<span class="hljs-keyword">covariant</span> Widget newWidget) &#123;<br>   _widget = newWidget;<br>&#125;<br></code></pre></td></tr></table></figure><p>只是简单的替换所持有Widget，并没有更新自己的其他属性</p><h3 id="更新算法"><a href="#更新算法" class="headerlink" title="更新算法"></a>更新算法</h3><p>framwork中将节点列表分成了三部分：顶部、中间部分、底部，当发生更新时，尽最大可能的复用Element，无法复用的才会去创建新的Element</p><ol><li>首先自顶向下的进行diff并更新子节点，也就是第一个while循环，是否能复用就是调用的canUpdate</li><li>然后自底向上的进行diff(这里没有更新子节点)，也就是第二个while循环，依然是用canUpdate看判断是否可以复用</li><li>然后在这两个中间的部分寻找可以复用的Element，并进行存储</li><li>这时候就已经扫描完整棵树了，接下来更新中间部分</li><li>最后更新底部</li></ol><p>为什么在自底向上的进行diff时候没有更新：因为这时候拿不到Slot信息<br>回到我们上面提到的例子中点击按钮时会触发<code>Column</code>的更新，也就是<code>MultiChildRenderObjectElement</code>的更新，就会触发上面的<code>updateChildren()</code>方法<br>所以在自顶向下的更新中，<code>canUpdate()</code>返回的是<code>true</code>(当我们设置了Key之后，这里会返回false，不进行复用)，也就是可以复用<code>element</code>，接着执行了<code>updateChild(Element? child, Widget? newWidget, Object? newSlot)</code><br>这里的<code>child</code>是<em>旧element</em>，<code>newWidget</code>也就是要显示的<em>widget</em>，两者并不相等，所以就执行了<code>child.update(newWidget);</code>只是简单的对所持有的<code>widget</code>进行了赋值。我们知道<code>StatefullWidget</code>中<code>State</code>和<code>StatefulElement</code>互相持有，并且两者都持有<code>StatefulWidget</code>。所以<code>State</code>并没有被更新，所持有的颜色值还是交换之前的颜色值，所以点击交换按钮后，<code>Widget</code>虽然交换了位置，但是<code>Element</code>并没有更新。<br>有点像是A机器生产A物品，B机器生产B物品；原来操作机器A的去操作机器B，原来操作机器B的去操作机器A，虽然换了操作员，但生产A的机器还是生产A，生产B的机器还是生产B。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>这里的key就两个分支<code>LocalKey</code> 和<code>GlobalKey</code> 。我们知道<em>key</em>的作用就是为<code>Widget</code>确认唯一的身份，可以在多子组件更新中被识别，这就是<code>LocalKey</code>的作用。所以<code>LocalKey</code>保证的是 <strong>相同父级</strong>组件的身份唯一性。而 <code>GlobalKey</code> 是整个应用中，组件的身份唯一。</p><p><code>LocalKey</code>下面有<code>UniqueKey</code>、<code>ValueKey&lt;T&gt;</code>、<code>ObjectKey</code>,区别也很简单，戳进去看下源码就好了</p><h4 id="Globalkey"><a href="#Globalkey" class="headerlink" title="Globalkey"></a>Globalkey</h4><p>对于<code>GlobalKey</code>来讲，只要获取到了<code>Element</code>，就能获取到<code>Widget</code>对象。只要<code>Element</code>是<code>StatefulElement</code>，就能获取到<code>State</code>.<br>那么如何获取到Element呢？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">Element?</span> <span class="hljs-keyword">get</span> _currentElement =&gt; WidgetsBinding.instance.buildOwner!._globalKeyRegistry[<span class="hljs-keyword">this</span>];<br><br><span class="hljs-comment">///<span class="language-markdown">BuildOwner</span></span><br><span class="hljs-keyword">final</span> <span class="hljs-built_in">Map</span>&lt;GlobalKey, <span class="hljs-built_in">Element</span>&gt; _globalKeyRegistry = &lt;GlobalKey, <span class="hljs-built_in">Element</span>&gt;&#123;&#125;;<br><span class="hljs-keyword">void</span> _registerGlobalKey(GlobalKey key, <span class="hljs-built_in">Element</span> element) &#123;<br>  _globalKeyRegistry[key] = element;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么是在什么时候调用_registerGlobalKey注册的呢？前面提到的mount方法中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">if</span> (key <span class="hljs-keyword">is</span> GlobalKey) &#123;<br>  owner!._registerGlobalKey(key, <span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 就是在这里注册的。<br>并且会在unmount中进行反注册</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> Key? key = _widget?.key;<br><span class="hljs-keyword">if</span> (key <span class="hljs-keyword">is</span> GlobalKey) &#123;<br>  owner!._unregisterGlobalKey(key, <span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>源码中也对<code>GlobalKey</code>的使用场景做出了介绍，当你真的需要获取某个<code>BuildContext</code>或<code>State</code>时，用<code>GlobalKey</code>是完全没有问题的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;官方视频在这里，有条件的可以看下&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=kn0EOS-ZiIc&quot;&gt;https://www.youtube.com/watch?v=kn0EOS-ZiIc&lt;/a&gt;&lt;br&gt;也可以看下这个对diff算法的详解&lt;br&gt;&lt;a href=&quot;https://juejin.cn/post/6935422635194974244&quot;&gt;https://juejin.cn/post/6935422635194974244&lt;/a&gt;&lt;br&gt;主要代码如下&lt;/p&gt;</summary>
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter_StatefulWidget</title>
    <link href="https://blog.huangyuanlove.com/2023/01/18/flutter-StatefulWidget/"/>
    <id>https://blog.huangyuanlove.com/2023/01/18/flutter-StatefulWidget/</id>
    <published>2023-01-18T08:00:47.000Z</published>
    <updated>2023-05-19T12:51:02.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="createState-是何时被调用的？"><a href="#createState-是何时被调用的？" class="headerlink" title="createState()是何时被调用的？"></a>createState()是何时被调用的？</h3><p>断点查看调用栈，发现是在<code>StatefulElement</code>的构造方法中创建的,而<code>element</code>的创建则是在父元素调用<code>inflateWidget</code>时触发子元素的<code>createElement</code>方法创建的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">StatefulElement(StatefulWidget widget)<br>    : _state = widget.createState(),<br>      <span class="hljs-keyword">super</span>(widget) &#123;<br>  state._element = <span class="hljs-keyword">this</span>;<br>  state._widget = widget;<br>&#125;<br></code></pre></td></tr></table></figure><p>去掉断言代码可以看到，在构造方法中调用了<code>createState()</code>来创建<code>State</code>对象，接着对<code>_state</code>对象的<code>_element</code>和<code>_widget</code>成员进行赋值。<br>到这里我们可以清楚的知道:<code>State</code>和<code>StatefulElement</code>互相持有，并且两者都持有<code>StatefulWidget</code>。</p><h3 id="State类中的方法"><a href="#State类中的方法" class="headerlink" title="State类中的方法"></a>State类中的方法</h3><p>这里面定义了生命周期方法</p><ul><li>initState()</li><li>didUpdateWidget(covariant T oldWidget)</li><li>void reassemble()</li><li>void deactivate()</li><li>void activate()</li><li>void dispose()</li><li>Widget build(BuildContext context)</li><li>void didChangeDependencies()</li></ul><p>其实看一下这些方法上面的注释基本上就能理解的差不多，断点走一遍流程，也就都了解了</p><h3 id="回调时机"><a href="#回调时机" class="headerlink" title="回调时机"></a>回调时机</h3><p><code>StatefulElement</code>继承自<code>ComponentElement</code>类，该类在<code>mount()</code>时调用的了<code>_firstBuild()</code>方法，这个方法被<code>StatefulElement</code>覆写，可以看到在这里里面调用了<code>state.initState()</code>方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> _firstBuild() &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    _debugSetAllowIgnoredCallsToMarkNeedsBuild(<span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object?</span> debugCheckForReturnedFuture = state.initState() <span class="hljs-keyword">as</span> <span class="hljs-built_in">dynamic</span>;<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    _debugSetAllowIgnoredCallsToMarkNeedsBuild(<span class="hljs-keyword">false</span>);<br>  &#125;<br>  state.didChangeDependencies();<br>  <span class="hljs-keyword">super</span>._firstBuild();<br>&#125;<br></code></pre></td></tr></table></figure><p>紧着这就调用了<code>state.didChangeDependencies()</code>方法,最后调用了<code>super._firstBuild()</code>;<br>还是在<code>ComponentElement</code>类中的<code>_firstBuild()</code>方法中调用了<code>rebuild()--&gt;performRebuild</code>,这里<code>performRebuild()</code>在<code>StatefulElement</code>有被重写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> performRebuild() &#123;<br>  <span class="hljs-keyword">if</span> (_didChangeDependencies) &#123;<br>    state.didChangeDependencies();<br>    _didChangeDependencies = <span class="hljs-keyword">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">super</span>.performRebuild();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>_didChangeDependencies</code>默认为<code>false</code>，所以第一次进来并不会触发<code>state.didChangeDependencies()</code>方法;接下来执行了<code>super.performRebuild()</code>;<br>同样的在<code>ComponentElement</code>类中的<code>performRebuild()</code>方法中调用了<code>build()</code>方法,当然这里的<code>build</code>方法已经被子类<code>StatefulElement</code>重写，调用了<code>state.build(this)</code>方法，然后调用了<code>updateChild()</code>方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> performRebuild() &#123;<br>  <span class="hljs-keyword">assert</span>(_debugSetAllowIgnoredCallsToMarkNeedsBuild(<span class="hljs-keyword">true</span>));<br>  Widget? built;<br>  <span class="hljs-keyword">try</span> &#123;<br>    built = build();<br>    debugWidgetBuilderValue(widget, built);<br>  &#125; <span class="hljs-keyword">catch</span> (e, stack) &#123;<br>    _debugDoingBuild = <span class="hljs-keyword">false</span>;<br>    built = ErrorWidget.builder(...);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>     _dirty = <span class="hljs-keyword">false</span>;<br>    <br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>    _child = updateChild(_child, built, slot);<br>    <br>  &#125; <span class="hljs-keyword">catch</span> (e, stack) &#123;<br>    built = ErrorWidget.builder();<br>    _child = updateChild(<span class="hljs-keyword">null</span>, built, slot);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就接上了控件是如何进行挂载的</p><h3 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h3><p>我们知道在<code>StatefulWidget</code>中可以使用<code>setState()</code>来更新页面内容，那么表示状态的属性是在什么时机赋值，这里有两种方式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">_color = Colors.red;<br>setState(()&#123;<br>&#125;);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">setStaate(()&#123;<br>  _color = Colors.red;<br>&#125;);<br></code></pre></td></tr></table></figure><p>戳进去看源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> setState(VoidCallback fn) &#123;<br>  <span class="hljs-keyword">assert</span>(fn != <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object?</span> result = fn() <span class="hljs-keyword">as</span> <span class="hljs-built_in">dynamic</span>;<br>  <span class="hljs-keyword">assert</span>(() &#123;<br>    <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">is</span> Future) &#123;<br>      <span class="hljs-keyword">throw</span> FlutterError.fromParts(&lt;DiagnosticsNode&gt;[<br>        ErrorSummary(<span class="hljs-string">&#x27;setState() callback argument returned a Future.&#x27;</span>),<br>        ErrorDescription(<br>          <span class="hljs-string">&#x27;The setState() method on <span class="hljs-subst">$this</span> was called with a closure or method that &#x27;</span><br>          <span class="hljs-string">&#x27;returned a Future. Maybe it is marked as &quot;async&quot;.&#x27;</span>,<br>        ),<br>        ErrorHint(<br>          <span class="hljs-string">&#x27;Instead of performing asynchronous work inside a call to setState(), first &#x27;</span><br>          <span class="hljs-string">&#x27;execute the work (without updating the widget state), and then synchronously &#x27;</span><br>          <span class="hljs-string">&#x27;update the state inside a call to setState().&#x27;</span>,<br>        ),<br>      ]);<br>    &#125;<br>    <span class="hljs-comment">// We ignore other types of return values so that you can do things like:</span><br>    <span class="hljs-comment">//   setState(() =&gt; x = 3);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;());<br>  _element!.markNeedsBuild();<br>&#125;<br></code></pre></td></tr></table></figure><p>一坨断言，判断<code>callback</code>是不是空，<code>callback</code>的返回值是不是<code>Future</code>类型;然后调用<code>_element!.markNeedsBuild()</code>。所以就这段代码来看，上面两种写法都可以，但还是建议向源码看齐：状态属性的改变写在<code>callback</code>中，确保在<code>markNeedsBuild()</code>之前，状态值是自己期望的结果；</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> markNeedsBuild() &#123;<br>  <span class="hljs-keyword">if</span> (_lifecycleState != _ElementLifecycle.active)<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span> (dirty)<br>    <span class="hljs-keyword">return</span>;<br>  _dirty = <span class="hljs-keyword">true</span>;<br>  owner!.scheduleBuildFor(<span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果当前状态不是active则不标记，如果已经标记过也不在标记；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/// <span class="language-markdown">Adds an element to the dirty elements list so that it will be rebuilt</span></span><br><span class="hljs-comment">/// <span class="language-markdown">when [WidgetsBinding.drawFrame] calls [buildScope].</span></span><br><span class="hljs-keyword">void</span> scheduleBuildFor(<span class="hljs-built_in">Element</span> element) &#123;<br><br>  <span class="hljs-keyword">if</span> (element._inDirtyList) &#123;<br>    _dirtyElementsNeedsResorting = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!_scheduledFlushDirtyElements &amp;&amp; onBuildScheduled != <span class="hljs-keyword">null</span>) &#123;<br>    _scheduledFlushDirtyElements = <span class="hljs-keyword">true</span>;<br>    onBuildScheduled!();<br>  &#125;<br>  _dirtyElements.add(element);<br>  element._inDirtyList = <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里也是进行了二次判断，保证不会被多次重绘。注意<code>onBuildScheduled()</code>的调用，它的定义是<code>VoidCallback? onBuildScheduled</code>;并且是在<code>BuildOwner</code>类中的构造方法中初始化的，那么这个<code>onBuildScheduled</code>到底是什么方法?断点看一下是<code>WidgetsBinding#_handleBuildScheduled</code>这个方法。它是在什么时候被赋值的？<code>owner</code>是<code>element</code>对象中的一个成员变量<code>_owner</code>,搜一下看一看到是在<code>mount()</code>方法中赋值的，值为<code>parent.owner</code>。还记的之前初始化根节点的的时候调用的<code>WidgetsBinding#attachRootWidget(Widget rootWidget)</code>这个方法中创建<code>RenderObjectToWidgetAdapter</code>对象后调用的<code>attachToRenderTree()</code>方法中有传入<code>BuildOwner</code>对象，接着向上查找，发现是在<code>initInstances()</code>方法中创建的.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> initInstances() &#123;<br>  <span class="hljs-keyword">super</span>.initInstances();<br>  _instance = <span class="hljs-keyword">this</span>;<br>  <span class="hljs-comment">// Initialization of [_buildOwner] has to be done after</span><br>  <span class="hljs-comment">// [super.initInstances] is called, as it requires [ServicesBinding] to</span><br>  <span class="hljs-comment">// properly setup the [defaultBinaryMessenger] instance.</span><br>  _buildOwner = BuildOwner();<br>  buildOwner!.onBuildScheduled = _handleBuildScheduled;<br>  platformDispatcher.onLocaleChanged = handleLocaleChanged;<br>  platformDispatcher.onAccessibilityFeaturesChanged = handleAccessibilityFeaturesChanged;<br>  SystemChannels.navigation.setMethodCallHandler(_handleNavigationInvocation);<br><br>  platformMenuDelegate = DefaultPlatformMenuDelegate();<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>_handleBuildScheduled</code> 中就只是调用了<code>ensureVisualUpdate()</code>方法，然后调用了<code>scheduleFrame()</code>;</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> scheduleFrame() &#123;<br>  <span class="hljs-keyword">if</span> (_hasScheduledFrame || !framesEnabled)<br>    <span class="hljs-keyword">return</span>;<br>  ensureFrameCallbacksRegistered();<br>  platformDispatcher.scheduleFrame();<br>  _hasScheduledFrame = <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里先确保两个回调确实被注册了，然后通过<code>platformDispatcher.scheduleFrame()</code>这个<em>native</em>方法向系统发送一个帧调度的请求。<br>然后会回调<code>_handleDrawFrame()</code>方法，也就是<code>ensureFrameCallbacksRegistered()</code>方法中确保两个回调方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> handleDrawFrame() &#123;<br>  <span class="hljs-keyword">assert</span>(_schedulerPhase == SchedulerPhase.midFrameMicrotasks);<br>  _frameTimelineTask?.finish(); <span class="hljs-comment">// end the &quot;Animate&quot; phase</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// PERSISTENT FRAME CALLBACKS</span><br>    _schedulerPhase = SchedulerPhase.persistentCallbacks;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> FrameCallback callback <span class="hljs-keyword">in</span> _persistentCallbacks)<br>      _invokeFrameCallback(callback, _currentFrameTimeStamp!);<br><br>    <span class="hljs-comment">// POST-FRAME CALLBACKS</span><br>    _schedulerPhase = SchedulerPhase.postFrameCallbacks;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span>&lt;FrameCallback&gt; localPostFrameCallbacks =<br>        <span class="hljs-built_in">List</span>&lt;FrameCallback&gt;.of(_postFrameCallbacks);<br>    _postFrameCallbacks.clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> FrameCallback callback <span class="hljs-keyword">in</span> localPostFrameCallbacks)<br>      _invokeFrameCallback(callback, _currentFrameTimeStamp!);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    _schedulerPhase = SchedulerPhase.idle;<br>    _frameTimelineTask?.finish(); <span class="hljs-comment">// end the Frame</span><br>    <span class="hljs-keyword">assert</span>(() &#123;<br>      <span class="hljs-keyword">if</span> (debugPrintEndFrameBanner)<br>        debugPrint(<span class="hljs-string">&#x27;▀&#x27;</span> * _debugBanner!.length);<br>      _debugBanner = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;());<br>    _currentFrameTimeStamp = <span class="hljs-keyword">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是调用 <code>_invokeFrameCallback</code>，这里的<code>_persistentCallbacks</code>是个<code>list</code>，通过</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> addPersistentFrameCallback(FrameCallback callback) &#123;<br>  _persistentCallbacks.add(callback);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法添加回调；这里的回调是在<code>RendererBinding</code>类中的<code>initInstances()</code>方法中注册的，实际上调用的方法是</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">_handlePersistentFrameCallback<br>  <span class="hljs-keyword">void</span> _handlePersistentFrameCallback(<span class="hljs-built_in">Duration</span> timeStamp) &#123;<br>    drawFrame();<br>    _scheduleMouseTrackerUpdate();<br>  &#125;<br></code></pre></td></tr></table></figure><p>然后调用了<code>drawFrame();</code>方法,需要注意的是:<code>RendererBinding</code>是一个<em>mixin</em>的类，被<code>WidgetsBinding</code>混入，并且<code>WidgetsBinding</code>类中重写了<code>drawFrame()</code>方法，所以最后走的是<code>WidgetsBinding</code>类中的<code>drawFrame()</code>方法；在这里面调用了<code>buildOwner!.buildScope(renderViewElement!);</code><br>在这个方法中先对脏列表进行排序</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> _sort(<span class="hljs-built_in">Element</span> a, <span class="hljs-built_in">Element</span> b) &#123;<br>  <span class="hljs-keyword">if</span> (a.depth &lt; b.depth)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span> (b.depth &lt; a.depth)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (b.dirty &amp;&amp; !a.dirty)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span> (a.dirty &amp;&amp; !b.dirty)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后循环调用<code>element.rebuild();</code>触发<code>performRebuild()</code>接着就是<code>widget</code>的<code>build()</code>方法被触发.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;createState-是何时被调用的？&quot;&gt;&lt;a href=&quot;#createState-是何时被调用的？&quot; class=&quot;headerlink&quot; title=&quot;createState()是何时被调用的？&quot;&gt;&lt;/a&gt;createState()是何时被调用的？&lt;/h3</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter_runApp到挂载根节点</title>
    <link href="https://blog.huangyuanlove.com/2023/01/18/flutter-runApp%E5%88%B0%E6%8C%82%E8%BD%BD%E6%A0%B9%E8%8A%82%E7%82%B9/"/>
    <id>https://blog.huangyuanlove.com/2023/01/18/flutter-runApp%E5%88%B0%E6%8C%82%E8%BD%BD%E6%A0%B9%E8%8A%82%E7%82%B9/</id>
    <published>2023-01-18T02:18:15.000Z</published>
    <updated>2023-05-19T12:51:02.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>flutter应用的入口点在main方法中调用的<code>runApp(Widget app)</code>方法中</p><figure class="highlight dart"><figcaption><span>widgets.binding.runApp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> runApp(Widget app) &#123;<br>  WidgetsFlutterBinding.ensureInitialized()<br>    ..scheduleAttachRootWidget(app)<br>    ..scheduleWarmUpFrame();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>WidgetsFlutterBinding</code>混入了七个 <code>xxxbinding</code></p><ul><li>[GestureBinding], which implements the basics of hit testing.</li><li>[SchedulerBinding], which introduces the concepts of frames.</li><li>[ServicesBinding], which provides access to the plugin subsystem.</li><li>[PaintingBinding], which enables decoding images.</li><li>[SemanticsBinding], which supports accessibility.</li><li>[RendererBinding], which handles the render tree.</li><li>[WidgetsBinding], which handles the widget tree.</li></ul><p>并且类中只有一个<code>ensureInitialized()</code>方法用来初始化<code>WidgetsBinding</code>对象,接着去执行了<code>scheduleAttachRootWidget</code>、<code>scheduleWarmUpFrame</code>方法<br>在<code>ensureInitialized</code>方法中调用<code>WidgetsFlutterBinding</code>进行了初始化</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">static</span> WidgetsBinding ensureInitialized() &#123;<br>  <span class="hljs-keyword">if</span> (WidgetsBinding._instance == <span class="hljs-keyword">null</span>)<br>    WidgetsFlutterBinding();<br>  <span class="hljs-keyword">return</span> WidgetsBinding.instance;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="scheduleAttachRootWidget"><a href="#scheduleAttachRootWidget" class="headerlink" title="scheduleAttachRootWidget"></a>scheduleAttachRootWidget</h3><p>接着看 scheduleAttachRootWidget这个方法中执行了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Timer.run(() &#123;<br>  attachRootWidget(rootWidget);<br>&#125;);<br></code></pre></td></tr></table></figure><p>在attachRootWidget方法中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> attachRootWidget(Widget rootWidget) &#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">bool</span> isBootstrapFrame = renderViewElement == <span class="hljs-keyword">null</span>;<br>  _readyToProduceFrames = <span class="hljs-keyword">true</span>;<br>  _renderViewElement = RenderObjectToWidgetAdapter&lt;RenderBox&gt;(<br>    container: renderView,<br>    debugShortDescription: <span class="hljs-string">&#x27;[root]&#x27;</span>,<br>    child: rootWidget,<br>  ).attachToRenderTree(buildOwner!, renderViewElement <span class="hljs-keyword">as</span> RenderObjectToWidgetElement&lt;RenderBox&gt;?);<br>  <span class="hljs-keyword">if</span> (isBootstrapFrame) &#123;<br>    SchedulerBinding.instance.ensureVisualUpdate();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意看这里的<code>_renderViewElement</code>对象是由<code>RenderObjectToWidgetAdapter.attachToRenderTree()</code>返回的;<br>在初始化<code>RenderObjectToWidgetAdapter</code>对象时传入了<code>renderView</code> 和<code>rootWidget</code>作为参数,这里的<code>rootWidget</code>就是我们<code>runApp</code>中传入的参数;<br>那么这里的<code>renderView</code>是什么时候初始化的?我们在上面提到的<code>WidgetsFlutterBinding</code>混入了七个<code>xxxbinding</code>,这里需要了解mixin的执行顺序:<br>虽然首先执行的是<code>WidgetsBinding</code>的<code>initInstances</code>方法,但由于第一就执行了<code>super.initInstances()</code>,所以会先执行前一个<code>RenderBinding</code>的<code>initInstances</code>,然后不断super,所以最终<code>initInstances</code>实际的逻辑执行顺序,可以看成是从前面的Binding往后面的Binding,所以在<code>WidgetsBinding</code>的<code>attachRootWidget</code>方法内<code>renderView</code>已经被初始化了.</p><h3 id="RenderObjectToWidgetAdapter"><a href="#RenderObjectToWidgetAdapter" class="headerlink" title="RenderObjectToWidgetAdapter"></a>RenderObjectToWidgetAdapter</h3><p>继承自<code>RenderObjectWidget</code>,它有两个关键的抽象方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">RenderObjectElement createElement();<br>RenderObject createRenderObject(BuildContext context);<br></code></pre></td></tr></table></figure><p>看下是怎么覆写的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br>RenderObjectToWidgetElement&lt;T&gt; createElement() =&gt; RenderObjectToWidgetElement&lt;T&gt;(<span class="hljs-keyword">this</span>);<br><br><span class="hljs-meta">@override</span><br>RenderObjectWithChildMixin&lt;T&gt; createRenderObject(BuildContext context) =&gt; container;<br></code></pre></td></tr></table></figure><p>我们接着看attachToRenderTree</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart">RenderObjectToWidgetElement&lt;T&gt; attachToRenderTree(BuildOwner owner, [ RenderObjectToWidgetElement&lt;T&gt;? element ]) &#123;<br>  <span class="hljs-keyword">if</span> (element == <span class="hljs-keyword">null</span>) &#123;<br>    owner.lockState(() &#123;<br>      element = createElement();<br>      <span class="hljs-keyword">assert</span>(element != <span class="hljs-keyword">null</span>);<br>      element!.assignOwner(owner);<br>    &#125;);<br>    owner.buildScope(element!, () &#123;<br>      element!.mount(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    element._newWidget = <span class="hljs-keyword">this</span>;<br>    element.markNeedsBuild();<br>  &#125;<br>  <span class="hljs-keyword">return</span> element!;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里传入了<code>BuildOwner</code>的实例<code>owner</code>和根元素对象.首先执行了<code>owner.lockState</code>,这个方法只是进行了一些断言来保证执行<code>callback</code>期间状态的锁定,这里<code>callback</code>就是4~6行代码;<br>在这个<code>callback</code>中执行了<code>createElement()</code>,用于创建元素,创建出来的元素也就是树的根节点;这里注意一下<code>createElement</code>是<code>RenderObjectToWidgetAdapter</code>实例的方法,看下上面的方法中传入的<code>this</code>也就是<code>RenderObjectToWidgetAdapter</code>对象本身;那么在创建Element时为啥要传入Widget对象？跟踪到最父级的Element发现是为了给_widget赋值.<em>也就是说Element持有了Widget对象,并且该元素由该组件创建</em></p><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>接下来是<code>owner.buildScope</code>,这里传入了根元素和回调函数,同样的是进行了一些断言后回调了<code>callback</code>,在<code>callback</code>中执行了元素的挂载,注意这里传入的两个参数都是<code>null</code>.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> mount(<span class="hljs-built_in">Element?</span> parent, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">assert</span>(parent == <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">super</span>.mount(parent, newSlot);<br>  _rebuild();<br>  <span class="hljs-keyword">assert</span>(_child != <span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>mount</code>方法是<code>RenderObjectToWidgetElement</code>类覆写的<code>Element</code>中定义的方法,这里执行了父类的<code>mount</code>方法和<code>_rebuild</code>方法;<br>先看mount的调用路径<br><code>RootRenderObjectElement--&gt;RenderObjectElement--&gt;Element</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> mount(<span class="hljs-built_in">Element?</span> parent, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">assert</span>(_lifecycleState == _ElementLifecycle.initial);<br>  <span class="hljs-keyword">assert</span>(widget != <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">assert</span>(_parent == <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">assert</span>(parent == <span class="hljs-keyword">null</span> || parent._lifecycleState == _ElementLifecycle.active);<br>  <span class="hljs-keyword">assert</span>(slot == <span class="hljs-keyword">null</span>);<br>  _parent = parent;<br>  _slot = newSlot;<br>  _lifecycleState = _ElementLifecycle.active;<br>  _depth = _parent != <span class="hljs-keyword">null</span> ? _parent!.depth + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-comment">// Only assign ownership if the parent is non-null. If parent is null</span><br>    <span class="hljs-comment">// (the root node), the owner should have already been assigned.</span><br>    <span class="hljs-comment">// See RootRenderObjectElement.assignOwner().</span><br>    _owner = parent.owner;<br>  &#125;<br>  <span class="hljs-keyword">assert</span>(owner != <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">final</span> Key? key = widget.key;<br>  <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">is</span> GlobalKey) &#123;<br>    owner!._registerGlobalKey(key, <span class="hljs-keyword">this</span>);<br>  &#125;<br>  _updateInheritance();<br>  attachNotificationTree();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里维护了一些成员信息,并将树的深度_depth加1,到这里也就以为着根元素节点挂载完成<br>当<code>Element#mount</code>执行完成后,回到<code>RenderObjectToWidgetElement#mount</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> mount(<span class="hljs-built_in">Element?</span> parent, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">super</span>.mount(parent, newSlot);<br>  <span class="hljs-keyword">assert</span>(() &#123;<br>    _debugDoingBuild = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;());<br>  _renderObject = (widget <span class="hljs-keyword">as</span> RenderObjectWidget).createRenderObject(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">assert</span>(!_renderObject!.debugDisposed!);<br>  <span class="hljs-keyword">assert</span>(() &#123;<br>    _debugDoingBuild = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;());<br>  <span class="hljs-keyword">assert</span>(() &#123;<br>    _debugUpdateRenderObjectOwner();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;());<br>  <span class="hljs-keyword">assert</span>(_slot == newSlot);<br>  attachRenderObject(newSlot);<br>  _dirty = <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里面执行了<code>widget</code>的<code>createRenderObject(this)</code>方法来创建<code>_renderObject</code>;注意一下,这里的<code>widget</code>其实就是根组件.也就是<code>RenderObjectToWidgetAdapter</code>的实例对象,调用其<code>createRenderObject</code>方法返回的是其实例中的<code>container</code>对象,也就是说<code>Element</code>中的<code>_renderObject</code>是在<code>mount</code>方法中通过<code>widget.createRenderObject</code>方法创建的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br>RenderObjectWithChildMixin&lt;T&gt; createRenderObject(BuildContext context) =&gt; container;<br></code></pre></td></tr></table></figure><p>这里的<code>container</code>对象也就是前面提到的<code>attachRootWidget</code>中传入的<code>renderView</code>对象.<br>对于根节点的三棵树来讲,已经完成了创建过程,单着并不代表所有的节点都是这中情况.一般情况下,组件不会持有渲染对象,只不过根组件比较特殊,需要有一个开始渲染的节点,<code>createRenderObject</code>方法返回的RenderView也有特殊性</p><p>总结一下</p><ul><li><code>RenderObjectToWidgetAdapter</code>通过构造方法持有<code>RenderView</code>对象</li><li><code>RenderObjectToWidgetAdapter</code>通过<code>createElement</code>方法创建<code>RenderObjectToWidgetElement</code>对象</li><li><code>RenderObjectToWidgetElement</code>通过<code>mount</code>方法持有<code>RenderView</code></li><li><code>RenderObjectToWidgetElement</code>通过构造方法(Element)持有<code>RenderObjectToWidgetAdapter</code></li></ul><h3 id="根渲染对象的关联"><a href="#根渲染对象的关联" class="headerlink" title="根渲染对象的关联"></a>根渲染对象的关联</h3><p>挂载完了我们接着看<code>RenderObjectElement#mount</code>方法中调用的<code>attachRenderObject(newSlot)</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br><span class="hljs-keyword">void</span> attachRenderObject(<span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">assert</span>(_ancestorRenderObjectElement == <span class="hljs-keyword">null</span>);<br>  _slot = newSlot;<br>  _ancestorRenderObjectElement = _findAncestorRenderObjectElement();<br>  _ancestorRenderObjectElement?.insertRenderObjectChild(renderObject, newSlot);<br>  <span class="hljs-keyword">final</span> ParentDataElement&lt;ParentData&gt;? parentDataElement = _findAncestorParentDataElement();<br>  <span class="hljs-keyword">if</span> (parentDataElement != <span class="hljs-keyword">null</span>)<br>    _updateParentData(parentDataElement.widget <span class="hljs-keyword">as</span> ParentDataWidget&lt;ParentData&gt;);<br>&#125;<br></code></pre></td></tr></table></figure><p>先调用<code>_findAncestorRenderObjectElement从</code>元素树中向上查找第一个<code>RenderObjectElement</code>类型的元素节点作为先祖节点,然后调用其<code>insertRenderObjectChild</code>方法将自身持有的<code>renderObject</code>插入的渲染树中;<br>然后调用<code>_findAncestorParentDataElement</code>方法从元素树中向上查找第一个<code>ParentDataElement&lt;ParentData&gt;</code>类型的节点,如果非空,则执行<code>_updateParentData</code>方法;由于当前是根节点,这两个查找的方法返回的都是空</p><h3 id="节点挂载"><a href="#节点挂载" class="headerlink" title="节点挂载"></a>节点挂载</h3><p>当父类的mount方法执行完毕后,回过头来看<code>RenderObjectToWidgetElement#mount</code>方法中调用的<code>_rebuild()</code>方法.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> _rebuild() &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    _child = updateChild(_child, (widget <span class="hljs-keyword">as</span> RenderObjectToWidgetAdapter&lt;T&gt;).child, _rootChildSlot);<br>  &#125; <span class="hljs-keyword">catch</span> (exception, stack) &#123;<br>    <span class="hljs-keyword">final</span> FlutterErrorDetails details = FlutterErrorDetails(<br>      exception: exception,<br>      stack: stack,<br>      <span class="hljs-keyword">library</span>: <span class="hljs-string">&#x27;widgets library&#x27;</span>,<br>      context: ErrorDescription(<span class="hljs-string">&#x27;attaching to the render tree&#x27;</span>),<br>    );<br>    FlutterError.reportError(details);<br>    <span class="hljs-keyword">final</span> Widget error = ErrorWidget.builder(details);<br>    _child = updateChild(<span class="hljs-keyword">null</span>, error, _rootChildSlot);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用了<code>updateChild</code>方法,这里面有三个参数.第一个参数<code>_child</code>现在为<code>null</code>,最后一个<code>_rootChildSlot</code>是一个<code>object</code>,注意一下第二个参数<code>widget.child</code>:这里的widget是root也就是<code>RenderObjectToWidgetAdapter</code>对象的实例,它的<code>child</code>也就是是我们在<code>runApp</code>中传入的<code>widget</code>对象,也就是我们在前面<code>attachRootWidget</code>方法中创建<code>RenderObjectToWidgetAdapter</code>时传入的<code>child</code>参数.</p><p>接着看updateChild方法,我们在注释中找到了行为说明</p><table><thead><tr><th></th><th>newWidget &#x3D;&#x3D; null</th><th>newWidget !&#x3D; null</th></tr></thead><tbody><tr><td>child &#x3D;&#x3D; null</td><td>Returns null</td><td>Returns new [Element]</td></tr><tr><td>child !&#x3D; null</td><td>Old child is removed, returns null</td><td>Old child updated if possible, returns child or new [Element]</td></tr></tbody></table><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">Element?</span> updateChild(<span class="hljs-built_in">Element?</span> child, Widget? newWidget, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">if</span> (newWidget == <span class="hljs-keyword">null</span>) &#123;...&#125;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild;<br>  <span class="hljs-keyword">if</span> (child != <span class="hljs-keyword">null</span>) &#123;...&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// The [debugProfileBuildsEnabled] code for this branch is inside</span><br>    <span class="hljs-comment">// [inflateWidget], since some [Element]s call [inflateWidget] directly</span><br>    <span class="hljs-comment">// instead of going through [updateChild].</span><br>    newChild = inflateWidget(newWidget, newSlot);<br>  &#125;<br>  <span class="hljs-keyword">assert</span>(...);<br>  <span class="hljs-keyword">return</span> newChild;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了节省篇幅,这里删除了没有执行的代码;因为这里的child为空,所以会走inflateWidget(newWidget, newSlot)方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">Element</span> inflateWidget(Widget newWidget, <span class="hljs-built_in">Object?</span> newSlot) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">final</span> Key? key = newWidget.key;<br>    <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">is</span> GlobalKey) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> newChild = _retakeInactiveElement(key, newWidget);<br>      <span class="hljs-keyword">if</span> (newChild != <span class="hljs-keyword">null</span>) &#123;<br>        newChild._activateWithParent(<span class="hljs-keyword">this</span>, newSlot);<br>        <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element?</span> updatedChild = updateChild(newChild, newWidget, newSlot);<br>        <span class="hljs-keyword">return</span> updatedChild!;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Element</span> newChild = newWidget.createElement();<br>    newChild.mount(<span class="hljs-keyword">this</span>, newSlot);<br>    <span class="hljs-keyword">return</span> newChild;<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (isTimelineTracked)<br>      Timeline.finishSync();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里检查了组件是否有key并且key是不是GlobalKey.这里先放一下<br>后面调用<code>newWidget.createElement()</code>创建了<code>element</code>,并且调用其<code>mount</code>进行挂载.<br>然后就开始了树的遍历进行挂载,根据我们在<code>runApp</code>中传入的组件不同,调用不同对象的方法,</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;入口&quot;&gt;&lt;a href=&quot;#入口&quot; class=&quot;headerlink&quot; title=&quot;入口&quot;&gt;&lt;/a&gt;入口&lt;/h2&gt;&lt;p&gt;flutter应用的入口点在main方法中调用的&lt;code&gt;runApp(Widget app)&lt;/code&gt;方法中&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>写在2023年初--2022总结</title>
    <link href="https://blog.huangyuanlove.com/2023/01/07/%E5%86%99%E5%9C%A82023%E5%B9%B4%E5%88%9D-2022%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huangyuanlove.com/2023/01/07/%E5%86%99%E5%9C%A82023%E5%B9%B4%E5%88%9D-2022%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-07T15:22:57.000Z</published>
    <updated>2023-05-19T12:51:02.240Z</updated>
    
    <content type="html"><![CDATA[<p>2022年，新冠三年，新冠诊疗方案第十版将其更名为新型冠状病毒感染；<br>这一年中断了每月学习计划，博客也停更了一年，也不是忙，只是懒散，毕竟再忙也不会忙到写点东西的时间都挤不出来的地步。工作中也只是加强了之前学过的东西，熟练度提高了而已。<br>翻遍了过去一年，也只是刷了几道题，学完了极客时间几个课程而已。新的一年有新的计划。不仅要提高自己的技术硬实力，也需要提高软技能。</p><h4 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h4><p>还是围绕大前端进行</p><ol><li>flutter<ol><li>掘金小册</li><li>B站视频 王叔不秃 <a href="https://space.bilibili.com/589533168">https://space.bilibili.com/589533168</a>?</li></ol></li><li>前端<ol><li>极客时间课程</li></ol></li><li>iOS</li><li>软技能<ol><li>极客时间课程</li></ol></li></ol><p>共计60个课程，乐观估计也就只能完成10个，悲观先也就四五个的样子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;朱赟的技术管理课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从技术到管理，让你的目标函数达到最优解&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;技术领导力实战笔记&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;通往优秀技术领导者之路&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;硅谷产品实战36讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;用实例揭示如何打造世界级产品&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0开始学架构&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前阿里P9技术专家的实战架构心法&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java核心技术面试精讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前Oracle首席工程师带你修炼Java内功&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;趣谈网络协议&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;像小说一样的网络协议入门课&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;软件测试52讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从小工到专家的实战心法&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;深入拆解Java虚拟机&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Oracle 高级研究员手把手带你入门JVM&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;程序员进阶攻略&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;每个程序员都应该知道的成长法则&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;技术管理实战36讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前百度最佳经理人的战地笔记&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;代码精进之路&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你写的每一行代码都是你的名片&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;算法面试通关40讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前Facebook工程师带你吃透大厂面试题&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br> <br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;玩转Git三剑客&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;带你深入掌握Git、GitHub和GitLab&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10x程序员工作法&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;掌握主动权，忙到点子上&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;重学前端&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;每天10分钟，重构你的前端知识体系&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;玩转Spring全家桶&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一站通关Spring、Spring Boot与Spring Cloud&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;软件工程之美&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;重新理解软件工程&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java并发编程实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全面系统提升你的并发编程能力&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br> <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iOS开发高手课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从原理到实战，带你解决80%的开发难题&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0开始做增长&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0到1的增长实战方法论&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;透视HTTP协议&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;深入理解HTTP协议本质与应用&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;玩转webpack&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全方位掌握webpack核心技能和优化策略&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TypeScript开发实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;系统掌握TypeScript核心技术&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;网络编程实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从底层到实战，深度解析网络编程&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;浏览器工作原理与实践&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;透过浏览器看懂前端本质&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br> <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全栈工程师修炼指南&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从全栈入门到技能实战&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Node.js开发实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;带你开发一个完整的Node.js项目&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;说透中台&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从概念到落地一站通关&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;苏杰的产品创新课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一次从想法到产品的低成本实验&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;移动端自动化测试实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一步一步带你成为测试高手&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;雷蓓蓓的项目管理实战课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;使众人行，如何带领一群人成事&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;性能工程高手课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;得性能者得天下&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;性能测试实战30讲&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;告别野路子，成为真正的性能测试高手&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;说透敏捷&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从原理到实战带你落地敏捷&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;接口测试入门课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从原理到实战，带你进阶接口测试&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java业务开发常见错误100例&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全面避坑 + 最佳实践=健壮代码&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;图解 Google V8&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一门课搞懂 JavaScript 执行逻辑&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SRE实战手册&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0到1带你搞定系统稳定性&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;互联网人的英语私教课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;让你快速提升英语阅读能力&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;微信小程序全栈开发实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手把手带你实现一款电商小程序&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;软件设计之美&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;多一点设计，少一点问题&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;技术管理案例课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;踩坑复盘+案例分析+精进攻略=高效管理&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;用户体验设计实战课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;人人可用的体验创新思维&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WebAssembly入门课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从0到1实现一个WebAssembly多媒体应用&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;动态规划面试宝典&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;学好动态规划，面试晋升都不怕&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;乔新亮的CTO成长复盘&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;千万年薪CTO是如何炼成的&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A/B测试从0到1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;从原理到实战，吃透A/B测试&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;代码之丑&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;识别坏味道，重构问题代码&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;体验设计案例课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;用量化方式，重新定义体验设计&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;技术面试官识人手册&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;辨识精英，打造高效能团队&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;性能优化高手课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一站通关从设计到交付的性能问题&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如何落地业务建模&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Thoughtworks CTO带你重构建模技能&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;程序员的测试课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;掌握测试，写好高质量代码&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;玩转Vue 3全家桶&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;基础+实战+源码，全方位学透Vue 3&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;深入剖析Java新特性&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手把手带你吃透Java新特性&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;攻克视频技术&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;高手带路，轻松学习视频原理&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搞定音频技术&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;深入浅出音频核心原理及应用&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;自动化测试高手课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;新模型+全栈视角\u003d高效进阶&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;遗留系统现代化实战&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;帮你走出遗留系统的泥潭&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;大厂设计进阶实战课&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;subtitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;让你突破瓶颈的高薪设计课&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2022年，新冠三年，新冠诊疗方案第十版将其更名为新型冠状病毒感染；&lt;br&gt;这一年中断了每月学习计划，博客也停更了一年，也不是忙，只是懒散，毕竟再忙也不会忙到写点东西的时间都挤不出来的地步。工作中也只是加强了之前学过的东西，熟练度提高了而已。&lt;br&gt;翻遍了过去一年，也只是刷</summary>
      
    
    
    
    
    <category term="乱七八糟" scheme="https://blog.huangyuanlove.com/tags/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
  </entry>
  
  <entry>
    <title>riverpod1.0+简介</title>
    <link href="https://blog.huangyuanlove.com/2022/01/04/riverpod1-0-%E7%AE%80%E4%BB%8B/"/>
    <id>https://blog.huangyuanlove.com/2022/01/04/riverpod1-0-%E7%AE%80%E4%BB%8B/</id>
    <published>2022-01-04T15:47:43.000Z</published>
    <updated>2023-05-19T12:51:02.236Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter更新到2.8了，最近打算重拾一下flutter，写点东西练练手。大家都清楚在flutter中状态管理确实挺麻烦的，从一开始的BLoC到provide、Provider，还有getX、Riverpod等等各式各样的状态管理库，我个人倾向于使用riverpod，它更像一个状态管理库；而getX更像一个开发的框架，实在是太大了:当你使用getX的时候，你是在用getX而不是flutter写应用。</p><span id="more"></span><h2 id="引入riverpod"><a href="#引入riverpod" class="headerlink" title="引入riverpod"></a>引入riverpod</h2><p>demo中没有包含flutter_hook,所以我们选择引入flutter_riverpod即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">environment:</span><br>  <span class="hljs-attr">sdk:</span> <span class="hljs-string">&quot;&gt;=2.15.1 &lt;3.0.0&quot;</span><br>  <span class="hljs-attr">flutter:</span> <span class="hljs-string">&quot;&gt;=2.0.0&quot;</span><br><br><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">flutter:</span><br>    <span class="hljs-attr">sdk:</span> <span class="hljs-string">flutter</span><br>  <span class="hljs-attr">flutter_riverpod:</span> <span class="hljs-string">^1.0.3</span><br></code></pre></td></tr></table></figure><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>首先，我们需要使用<code>ProviderScope</code>来包裹整个应用，也就是在main方法中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(ProviderScope(child: Home()));<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们可以声明一个Provider。一般情况下，我们会把各种各样的provider作为全局变量来引用，声明一个provider和声明一个函数没有多大的区别。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> helloWorldProvider = Provider((_) =&gt; <span class="hljs-string">&#x27;Hello world&#x27;</span>);<br></code></pre></td></tr></table></figure><p>最后我们就可以读取Provider中的数据了。<br>在1.0.0之后的版本中，ConsumerWidget的build方法中提供了<code>WidgetRef</code>对象，用来取代0.14版本中的<code>useProvider</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_riverpod/flutter_riverpod.dart&#x27;</span>;<br><br><span class="hljs-keyword">final</span> helloWorldProvider  = Provider((_)=&gt;<span class="hljs-string">&quot;hello world&quot;</span>);<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> ProviderScope(child: Home()));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span></span>&#123;<br>  <span class="hljs-keyword">const</span> Home(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> value = ref.watch(helloWorldProvider);<br><br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;riverpod demo&quot;</span>),),<br>        body: Center(<br>          child: Text(value),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><h3 id="各种各样的Provider"><a href="#各种各样的Provider" class="headerlink" title="各种各样的Provider"></a>各种各样的Provider</h3><p>具体可以看这里，<a href="https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/flutter_riverpod-library.html">https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/flutter_riverpod-library.html</a></p><p>下面列举了一些常用的Provider类型</p><ul><li><p>Provider</p><p><a href="https://pub.dev/documentation/riverpod/latest/riverpod/Provider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/Provider-class.html</a></p></li><li><p>StateProvider</p></li></ul><p><a href="https://pub.dev/documentation/riverpod/latest/riverpod/StateProvider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/StateProvider-class.html</a></p><ul><li><p>StateNotifierProvider<br><a href="https://pub.dev/documentation/riverpod/latest/riverpod/StateNotifierProvider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/StateNotifierProvider-class.html</a></p></li><li><p>FutureProvider<br><a href="https://pub.dev/documentation/riverpod/latest/riverpod/FutureProvider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/FutureProvider-class.html</a></p></li><li><p>StreamProvider<br><a href="https://pub.dev/documentation/riverpod/latest/riverpod/StreamProvider-class.html">https://pub.dev/documentation/riverpod/latest/riverpod/StreamProvider-class.html</a></p></li></ul><h3 id="Provider的修饰符"><a href="#Provider的修饰符" class="headerlink" title="Provider的修饰符"></a>Provider的修饰符</h3><h4 id="family"><a href="#family" class="headerlink" title=".family"></a>.family</h4><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>该修饰符适用于适用外部数据来构建provider的情况</p><p>一些常用情况</p><ul><li>和<a href="https://pub.dev/documentation/riverpod/latest/riverpod/FutureProvider-class.html">FutureProvider</a> 组合，来根据id获取消息</li><li>把当前Locale对象传给provider，用来进行国际化</li><li>在不访问对方属性的前提下连接两个provider</li></ul><p>在使用family时，会额外的向provider提供一个属性，在provider中我们可以自由的使用该属性来创建某些状态</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> messagesFamily = FutureProvider.family&lt;Message, <span class="hljs-built_in">String</span>&gt;((ref, id) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">return</span> dio.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;http://my_api.dev/messages/<span class="hljs-subst">$id</span>&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这种情况下在使用<code>messagesFamily</code>时会有点语法上的变化，我们需要额外提供一个参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-keyword">final</span> response = ref.watch(messagesFamily(<span class="hljs-string">&#x27;id&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>它还支持同时获取不同的属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br>Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-keyword">final</span> frenchTitle = ref.watch(titleFamily(<span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;fr&#x27;</span>)));<br>  <span class="hljs-keyword">final</span> englishTitle = ref.watch(titleFamily(<span class="hljs-keyword">const</span> Locale(<span class="hljs-string">&#x27;en&#x27;</span>)));<br><br>  <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&#x27;fr: <span class="hljs-subst">$frenchTitle</span> en: <span class="hljs-subst">$englishTitle</span>&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="参数限制"><a href="#参数限制" class="headerlink" title="参数限制"></a>参数限制</h5><p>参数不限制类型，但必须实现<code>==</code>和<code>hashCode</code>两个方法；</p><p>如果参数不是constant的，比如我们想将输入框内容传给Provider，但是输入框的内容会变化的特别频繁并且不能复用，这种情况可能会导致内存泄露，可以使用<code>.autoDispose</code>修饰符来修复这个问题</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> characters = FutureProvider.autoDispose.family&lt;<span class="hljs-built_in">List</span>&lt;Character&gt;, <span class="hljs-built_in">String</span>&gt;((ref, filter) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">return</span> fetchCharacters(filter: filter);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="传递多个参数"><a href="#传递多个参数" class="headerlink" title="传递多个参数"></a>传递多个参数</h5><p>.family修饰符并没有内置提供过个参数的方法，另外一方面，这个参数可以是任意符合上面提到的限制的类型。<br>比如</p><ul><li>元组</li><li>使用 Freezed 或 built_value 生成的对象</li><li>使用 equatable 的对象</li></ul><p>** freezed **</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@freezed</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyParameter</span> <span class="hljs-title">with</span> <span class="hljs-title">_</span>$<span class="hljs-title">MyParameter</span> </span>&#123;<br>  <span class="hljs-keyword">factory</span> MyParameter(&#123;<br>    <span class="hljs-keyword">required</span> <span class="hljs-built_in">int</span> userId,<br>    <span class="hljs-keyword">required</span> Locale locale,<br>  &#125;) = _MyParameter;<br>&#125;<br><br><span class="hljs-keyword">final</span> exampleProvider = Provider.autoDispose.family&lt;Something, MyParameter&gt;((ref, myParameter) &#123;<br>  <span class="hljs-built_in">print</span>(myParameter.userId);<br>  <span class="hljs-built_in">print</span>(myParameter.locale);<br>  <span class="hljs-comment">// Do something with userId/locale</span><br>&#125;);<br><br><span class="hljs-meta">@override</span><br>Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-built_in">int</span> userId; <span class="hljs-comment">// Read the user ID from somewhere</span><br>  <span class="hljs-keyword">final</span> locale = Localizations.localeOf(context);<br><br>  <span class="hljs-keyword">final</span> something = ref.watch(<br>    exampleProvider(MyParameter(userId: userId, locale: locale)),<br>  );<br><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Equatable</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyParameter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Equatable</span>  </span>&#123;<br>  MyParameter(&#123;<br>    <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.userId,<br>    <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.locale,<br>  &#125;);<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> userId;<br>  <span class="hljs-keyword">final</span> Locale locale;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Object</span>&gt; <span class="hljs-keyword">get</span> props =&gt; [userId, locale];<br>&#125;<br><br><span class="hljs-keyword">final</span> exampleProvider = Provider.family&lt;Something, MyParameter&gt;((ref, myParameter) &#123;<br>  <span class="hljs-built_in">print</span>(myParameter.userId);<br>  <span class="hljs-built_in">print</span>(myParameter.locale);<br>  <span class="hljs-comment">// Do something with userId/locale</span><br>&#125;);<br><br><span class="hljs-meta">@override</span><br>Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-built_in">int</span> userId; <span class="hljs-comment">// Read the user ID from somewhere</span><br>  <span class="hljs-keyword">final</span> locale = Localizations.localeOf(context);<br><br>  <span class="hljs-keyword">final</span> something = ref.watch(<br>    exampleProvider(MyParameter(userId: userId, locale: locale)),<br>  );<br><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="autoDispose"><a href="#autoDispose" class="headerlink" title=".autoDispose"></a>.autoDispose</h4><p>一个通用场景是能够自动释放长时间不适用Provider；</p><p>有很多个让我们这么做得理由，比如：</p><ul><li>在使用Firebase时，关闭连接避免不必要的开销</li><li>当用户离开页面再进入页面时重置状态</li></ul><p>我们可以使用内嵌的<code>.autoDispose</code>修饰符来支持上述场景</p><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><p>想要告诉Riverpod在不再使用provider时将其销毁，只需要在Provider之前加上<code>.autoDispose</code>即可</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> userProvider = StreamProvider.autoDispose&lt;User&gt;((ref) &#123;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>就这样，当<code>userProvider</code>不再使用时将会被自动销毁</p><p>注意通用参数是如何在autoDispose之后而不是之前传递的–autoDispose不是一个命名的构造函数。</p><p>当然，上面也提到可以和其他修饰符一起</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> userProvider = StreamProvider.autoDispose.family&lt;User, <span class="hljs-built_in">String</span>&gt;((ref, id) &#123;<br><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="ref-maintainState"><a href="#ref-maintainState" class="headerlink" title="ref.maintainState"></a>ref.maintainState</h5><p>用<code>autoDispose</code>标记一个提供者，也会在ref上增加一个额外的属性： <code>maintainState</code>。</p><p>该属性是一个布尔值（默认为false），允许提供者告诉Riverpod即使不再被监听，是否应该保留提供者的状态。</p><p>一个用例是在一个HTTP请求完成后，将这个标志设置为true:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> myProvider = FutureProvider.autoDispose((ref) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">final</span> response = <span class="hljs-keyword">await</span> dio.<span class="hljs-keyword">get</span>(...);<br>  ref.maintainState = <span class="hljs-keyword">true</span>;<br>  <span class="hljs-keyword">return</span> response;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这样，如果请求失败，用户离开屏幕后又重新进入，那么请求将被再次执行。但如果请求成功完成，状态将被保留，重新进入屏幕将不会触发新的请求。</p><h5 id="示例：取消http请求"><a href="#示例：取消http请求" class="headerlink" title="示例：取消http请求"></a>示例：取消http请求</h5><p>autoDispose修改器可以与FutureProvider和ref.onDispose相结合，以便在不再需要HTTP请求时轻松取消。</p><p>要求：</p><ul><li>当用户进入一个屏幕时，启动一个HTTP请求</li><li>如果用户在请求完成前离开屏幕，则取消HTTP请求</li><li>如果请求成功，离开并重新进入屏幕不会启动一个新的请求</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> myProvider = FutureProvider.autoDispose((ref) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-comment">// An object from package:dio that allows cancelling http requests</span><br>  <span class="hljs-keyword">final</span> cancelToken = CancelToken();<br>  <span class="hljs-comment">// When the provider is destroyed, cancel the http request</span><br>  ref.onDispose(() =&gt; cancelToken.cancel());<br><br>  <span class="hljs-comment">// Fetch our data and pass our `cancelToken` for cancellation to work</span><br>  <span class="hljs-keyword">final</span> response = <span class="hljs-keyword">await</span> dio.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;path&#x27;</span>, cancelToken: cancelToken);<br>  <span class="hljs-comment">// If the request completed successfully, keep the state</span><br>  ref.maintainState = <span class="hljs-keyword">true</span>;<br>  <span class="hljs-keyword">return</span> response;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="参数类型’AutoDisposeProvider’不能分配给参数类型’AlwaysAliveProviderBase’。"><a href="#参数类型’AutoDisposeProvider’不能分配给参数类型’AlwaysAliveProviderBase’。" class="headerlink" title="参数类型’AutoDisposeProvider’不能分配给参数类型’AlwaysAliveProviderBase’。"></a>参数类型’AutoDisposeProvider’不能分配给参数类型’AlwaysAliveProviderBase’。</h5><p>当使用.autoDispose时，你可能会发现自己的应用程序无法编译，出现类似的错误。</p><blockquote><p>The argument type ‘AutoDisposeProvider’ can’t be assigned to the parameter type ‘AlwaysAliveProviderBase’</p></blockquote><p>可能是因为你试图在一个没有标记为.autoDispose的提供者中监听一个标记为.autoDispose的提供者，例如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> firstProvider = Provider.autoDispose((ref) =&gt; <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">final</span> secondProvider = Provider((ref) &#123;<br>  <span class="hljs-comment">// The argument type &#x27;AutoDisposeProvider&lt;int&gt;&#x27; can&#x27;t be assigned to the</span><br>  <span class="hljs-comment">// parameter type &#x27;AlwaysAliveProviderBase&lt;Object, Null&gt;&#x27;</span><br>  ref.watch(firstProvider);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这是不可取的，因为它将导致firstProvider永远不会被dispose。我们可以考虑将 <code>secondProvider</code> 标记为 &#96;.autoDispose来修复这个问题：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> firstProvider = Provider.autoDispose((ref) =&gt; <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">final</span> secondProvider = Provider.autoDispose((ref) &#123;<br>  ref.watch(firstProvider);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="WidgetRef"><a href="#WidgetRef" class="headerlink" title="WidgetRef"></a>WidgetRef</h2><h3 id="获取WidgetRef对象"><a href="#获取WidgetRef对象" class="headerlink" title="获取WidgetRef对象"></a>获取WidgetRef对象</h3><h4 id="从其他Provider对象中获取"><a href="#从其他Provider对象中获取" class="headerlink" title="从其他Provider对象中获取"></a>从其他Provider对象中获取</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> provider = Provider((ref) &#123;<br>  <span class="hljs-comment">// use ref to obtain other providers</span><br>  <span class="hljs-keyword">final</span> repository = ref.watch(repositoryProvider);<br>  <span class="hljs-keyword">return</span> SomeValue(repository);<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>ref</code>对象可以很安全的在provider之间传递，一个常见的用法就是讲<code>ref</code>传递给 <a href="https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html">StateNotifier</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counter = StateNotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;((ref) &#123;<br>  <span class="hljs-keyword">return</span> Counter(ref);<br>&#125;);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StateNotifier</span>&lt;<span class="hljs-title">int</span>&gt; </span>&#123;<br>  Counter(<span class="hljs-keyword">this</span>.ref): <span class="hljs-keyword">super</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">final</span> Ref ref;<br><br>  <span class="hljs-keyword">void</span> increment() &#123;<br>    <span class="hljs-comment">// Counter can use the &quot;ref&quot; to read other providers</span><br>    <span class="hljs-keyword">final</span> repository = ref.read(repositoryProvider);<br>    repository.post(<span class="hljs-string">&#x27;...&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这么做可以让Counter内部读取provider状态</p><h4 id="从Widget对象中获取ref"><a href="#从Widget对象中获取ref" class="headerlink" title="从Widget对象中获取ref"></a>从Widget对象中获取ref</h4><p>一般情况下Widget对象中是没有ref对象中，但riverpod提供了几种解决方案</p><ul><li>使用ConsumerWidget替换StatelessWidget</li></ul><p>ConsumerWidget和StatelessWidget基本相同(虽然是继承了StatefulWidget)，只是在build方法中多了一个WidgetRef对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-comment">// use ref to listen to a provider</span><br>    <span class="hljs-keyword">final</span> counter = ref.watch(counterProvider);<br>    <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&#x27;<span class="hljs-subst">$counter</span>&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用ConsumerStatefulWidget+ConsumerState 替换 StatefulWidget+State</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerStatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  HomeViewState createState() =&gt; HomeViewState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeViewState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerState</span>&lt;<span class="hljs-title">HomeView</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    <span class="hljs-comment">// &quot;ref&quot; can be used in all life-cycles of a StatefulWidget.</span><br>    ref.read(counterProvider);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-comment">// We can also use &quot;ref&quot; to listen to a provider inside the build method</span><br>    <span class="hljs-keyword">final</span> counter = ref.watch(counterProvider);<br>    <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&#x27;<span class="hljs-subst">$counter</span>&#x27;</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>使用 HookConsumerWidget 替换 HookWidget</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HookConsumerWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-comment">// HookConsumerWidget allows using hooks inside the build method</span><br>    <span class="hljs-keyword">final</span> state = useState(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// We can also use the ref parameter to listen to providers.</span><br>    <span class="hljs-keyword">final</span> counter = ref.watch(counterProvider);<br>    <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&#x27;<span class="hljs-subst">$counter</span>&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="WidgetRef对象的方法"><a href="#WidgetRef对象的方法" class="headerlink" title="WidgetRef对象的方法"></a>WidgetRef对象的方法</h3><p>这里的<code>WidgetRef</code>对象在读取Provider中的数据时，提供了<code>read</code>、<code>listen</code>和<code>watch</code>方法。至于什么情况下选用哪个方法，这里有三个建议</p><blockquote><ul><li>当我们需要监听变化并且从Provider中获取数据时，比如当数据变化时我们需要重新构建Widget，这时我们可以使用<code>ref.watch</code></li><li>当我们需要监听变化去执行某个动作时，我们可以使用<code>ref.listen</code></li><li>当我们仅需要读取数据不关心数据的变化时，比如点击某个按钮时，根据状态来判断下一步动作时，我们可以使用<code>ref.read</code></li></ul></blockquote><ul><li>ref.watch<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterProvider = StateProvider((_)=&gt; <span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span></span>&#123;<br>  <span class="hljs-keyword">const</span> Home(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> count = ref.watch(counterProvider);<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;riverpod demo&quot;</span>),),<br>        body: Center(<br>          child: Column(<br>            children: [<br>              Text(<span class="hljs-string">&#x27;<span class="hljs-subst">$count</span>&#x27;</span>)<br>            ],<br>          ),<br>        ),<br>        floatingActionButton: FloatingActionButton(onPressed: ()=&gt;&#123;<br>          ref.read(counterProvider.state).state++<br>        &#125;,child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;点击&quot;</span>),),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>ref.read</li></ul><p>使用该方法可以没有任何影响的获取一次provider的状态，但是作者提示我们尽量不要使用该方法，它只是用来解决使用<code>watch|listen</code>不方便的问题，如果可以，尽量使用<code>watch|listen.</code>这里有个使用read方法的示例<a href="https://riverpod.dev/docs/concepts/combining_providers#can-i-read-a-provider-without-listening-to-it">https://riverpod.dev/docs/concepts/combining_providers#can-i-read-a-provider-without-listening-to-it</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterProvider = StateNotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;((ref) =&gt; Counter());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      floatingActionButton: FloatingActionButton(<br>        onPressed: () &#123;<br>          <span class="hljs-comment">// Call `increment()` on the `Counter` class</span><br>          ref.read(counterProvider.notifier).increment();<br>        &#125;,<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ref.listen</li></ul><p>和<code>ref.watch</code>相似，我们也可以使用<code>ref.listen</code>来观察provider。他们的区别就是当provider状态变化时，我们可以调用自己定义的方法。该方法需要两个参数，第一个参数是要监听的provider对象，第二个参数是回调方法，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterProvider = StateNotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;((ref) =&gt; Counter());<br><br><span class="hljs-keyword">final</span> anotherProvider = Provider((ref) &#123;<br>  ref.listen&lt;<span class="hljs-built_in">int</span>&gt;(counterProvider, (<span class="hljs-built_in">int?</span> previousCount, <span class="hljs-built_in">int</span> newCount) &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The counter changed <span class="hljs-subst">$&#123;newCount&#125;</span>&#x27;</span>);<br>  &#125;);<br>  ...<br>&#125;);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> counterProvider = StateNotifierProvider&lt;Counter, <span class="hljs-built_in">int</span>&gt;((ref) =&gt; Counter());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsumerWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;): <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context, WidgetRef ref) &#123;<br>    ref.listen&lt;<span class="hljs-built_in">int</span>&gt;(counterProvider, (<span class="hljs-built_in">int?</span> previousCount, <span class="hljs-built_in">int</span> newCount) &#123;<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The counter changed <span class="hljs-subst">$&#123;newCount&#125;</span>&#x27;</span>);<br>    &#125;);<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="决定订阅什么"><a href="#决定订阅什么" class="headerlink" title="决定订阅什么"></a>决定订阅什么</h3><p>比如我们有一个StreamProvider</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> userProvider = StreamProvider&lt;User&gt;(...);<br></code></pre></td></tr></table></figure><p>我们可以这么去订阅</p><ul><li>通过监听provider本身来同步获取当前状态</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  AsyncValue&lt;User&gt; user = ref.watch(userProvider);<br><br>  <span class="hljs-keyword">return</span> user.when(<br>    loading: () =&gt; <span class="hljs-keyword">const</span> CircularProgressIndicator(),<br>    error: (error, stack) =&gt; <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Oops&#x27;</span>),<br>    data: (user) =&gt; Text(user.name),<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过监听<code>userProvider.stream</code>来获取对应的stream</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  Stream&lt;User&gt; user = ref.watch(userProvider.stream);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过监听<code>userProvider.future</code>来获取一个能得到最新状态的Future</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  Future&lt;User&gt; user = ref.watch(userProvider.future);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用”select”-来决定哪些值变化时进行重建"><a href="#使用”select”-来决定哪些值变化时进行重建" class="headerlink" title="使用”select” 来决定哪些值变化时进行重建"></a>使用”select” 来决定哪些值变化时进行重建</h3><p>比如我们有一个User对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>  <span class="hljs-built_in">String</span> <span class="hljs-keyword">get</span> name;<br>  <span class="hljs-built_in">int</span> <span class="hljs-keyword">get</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是我们在渲染页面时只用到了name属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  User user = ref.watch(userProvider);<br>  <span class="hljs-keyword">return</span> Text(user.name);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况下，如果<code>age</code>属性发生了变化，该Widget就会重建，显然这不是我们想要的。这时候我们可以使用<code>select</code>来选择对象的某些属性来监听</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context, WidgetRef ref) &#123;<br>  <span class="hljs-built_in">String</span> name = ref.watch(userProvider.select((user) =&gt; user.name))<br>  <span class="hljs-keyword">return</span> Text(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，<code>select</code>同样适用于<code>listen</code>方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">ref.listen&lt;<span class="hljs-built_in">String</span>&gt;(<br>  userProvider.select((user) =&gt; user.name),<br>  (<span class="hljs-built_in">String?</span> previousName, <span class="hljs-built_in">String</span> newName) &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The user name changed <span class="hljs-subst">$newName</span>&#x27;</span>);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>需要注意的是，这里没必要一定返回对象的属性，只要复写了<code>==</code>的值都可以正常工作，比如</p><pre><code class="dart">final label = ref.watch(userProvider.select((user) =&gt; &#39;Mr $&#123;user.name&#125;&#39;));</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Flutter更新到2.8了，最近打算重拾一下flutter，写点东西练练手。大家都清楚在flutter中状态管理确实挺麻烦的，从一开始的BLoC到provide、Provider，还有getX、Riverpod等等各式各样的状态管理库，我个人倾向于使用riverpod，它更像一个状态管理库；而getX更像一个开发的框架，实在是太大了:当你使用getX的时候，你是在用getX而不是flutter写应用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>写在2022年初--2021总结</title>
    <link href="https://blog.huangyuanlove.com/2022/01/01/%E5%86%99%E5%9C%A82022%E5%B9%B4%E5%88%9D-2021%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huangyuanlove.com/2022/01/01/%E5%86%99%E5%9C%A82022%E5%B9%B4%E5%88%9D-2021%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-01T14:27:57.000Z</published>
    <updated>2023-05-19T12:51:02.240Z</updated>
    
    <content type="html"><![CDATA[<p>2021年，娃娃出生了，嘿嘿嘿<br>今年似乎也没有学啥，但又不知道时间都花在哪里了。<br>浅尝辄止的学习了一些技术</p><ul><li>vue</li><li>react</li><li>小程序</li><li>鸿蒙</li></ul><p>翻了一丢丢源码</p><ul><li>okhttp</li><li>retrofit</li><li>gson</li></ul><p>了解了一下Android系统启动流程、应用启动流程。然后就是准备重拾flutter，学习一下跨平台技术</p><span id="more"></span><h4 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h4><p>深入学习一下fluter和kotlin<br>多刷一些算法题，用的时候是真有用</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021年，娃娃出生了，嘿嘿嘿&lt;br&gt;今年似乎也没有学啥，但又不知道时间都花在哪里了。&lt;br&gt;浅尝辄止的学习了一些技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vue&lt;/li&gt;
&lt;li&gt;react&lt;/li&gt;
&lt;li&gt;小程序&lt;/li&gt;
&lt;li&gt;鸿蒙&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻了一丢丢源码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;okhttp&lt;/li&gt;
&lt;li&gt;retrofit&lt;/li&gt;
&lt;li&gt;gson&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解了一下Android系统启动流程、应用启动流程。然后就是准备重拾flutter，学习一下跨平台技术&lt;/p&gt;</summary>
    
    
    
    
    <category term="乱七八糟" scheme="https://blog.huangyuanlove.com/tags/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android慢网络及页面监控</title>
    <link href="https://blog.huangyuanlove.com/2021/06/19/Android%E6%85%A2%E7%BD%91%E7%BB%9C%E5%8F%8A%E9%A1%B5%E9%9D%A2%E7%9B%91%E6%8E%A7/"/>
    <id>https://blog.huangyuanlove.com/2021/06/19/Android%E6%85%A2%E7%BD%91%E7%BB%9C%E5%8F%8A%E9%A1%B5%E9%9D%A2%E7%9B%91%E6%8E%A7/</id>
    <published>2021-06-19T06:55:29.000Z</published>
    <updated>2023-05-19T12:51:02.213Z</updated>
    
    <content type="html"><![CDATA[<p>最近在搞Android应用大盘监控，目前需要监控的是慢网络请求及页面的打开和关闭。由于应用中使用的OkHttp进行网络请求，着重看了一下OkHttp源码，还有别人写的一些总结。对于页面的打开关闭行为，我们可以搞个BaseActivity或者在Application中注册生命周期回调就好了。问题在于慢网络监控需要实时上报，而用户行为监控则需要本地落盘保存，在需要的时候再上报，所以如何落盘保存则是一个问题，为此了解了java IO和mmap。</p><span id="more"></span><h2 id="慢网络监控"><a href="#慢网络监控" class="headerlink" title="慢网络监控"></a>慢网络监控</h2><p><strong>嫌长不看直接看结论，代码在这一段的最后。</strong></p><p>在构建<code>OkHttpClient</code>对象时加入<code>eventListener</code>即可，如果会有多个异步网络同时请求，就添加<code>eventListenerFactory</code>。不论是不是同时会有多个异步网络请求，使用<code>eventListenerFactory</code>差距不大。</p><p><strong>比较啰嗦的详解篇</strong></p><p>我们先来看下网络基础内容：</p><ul><li>OSI七层模型和实际应用中的五层模型</li><li>什么是Http</li><li>请求方式、报文结构</li><li>TCP的三次握手、四次挥手</li><li>一次完整的http请求过程</li><li>Http不同版本的差异、优缺点</li><li>http和https的区别</li></ul><p>相关的知识点放在这里了，别人已经写得比较全面了，再抄一遍也没啥意思 :smiley:</p><p><a href="https://juejin.cn/post/6877362691350986766">面试官的这份HTTP灵魂追问你Hold住吗？</a></p><p><a href="https://www.jianshu.com/p/b0aa797608c0">关于HTTP请求你需要知道的一切</a></p><p>当我们使用OkHttp进行网络请求的时候，过程一般是这样的：</p><ol><li>构建<code>OkHttpClient</code></li><li>构建<code>Request</code></li><li>构建<code>Call</code></li><li>使用<code>Call</code>对象进行网络请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">okHttpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>.Builder()<br>        .eventListenerFactory(NetworkListener.get())<br>.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Log.e(TAG,<span class="hljs-string">&quot;addInterceptor before proceed&quot;</span>);<br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> chain.proceed(chain.request());<br>        Log.e(TAG,<span class="hljs-string">&quot;addInterceptor after proceed &quot;</span>);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br>&#125;)<br>.addNetworkInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Log.e(TAG,<span class="hljs-string">&quot;addNetworkInterceptor before proceed&quot;</span>);<br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> chain.proceed(chain.request());<br>        Log.e(TAG,<span class="hljs-string">&quot;addNetworkInterceptor after proceed &quot;</span>);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br>&#125;)<br>        .build();<br><br><span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>        .url(<span class="hljs-string">&quot;.....&quot;</span>)<br>        .build();<br><span class="hljs-type">Call</span> <span class="hljs-variable">call</span> <span class="hljs-operator">=</span> okHttpClient.newCall(request);<br>call.enqueue(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callback</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailure</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call, <span class="hljs-meta">@NotNull</span> IOException e)</span> &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResponse</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call, <span class="hljs-meta">@NotNull</span> Response response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>流程图如下：</p><p><img src="/image/Android/okhttp/OkHttp%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="OkHttp流程图"></p><p>最经典的应该是拦截器部分了，网络对拦截器的分析也挺多了，可以自己翻一下源码总结一下，我也写不出花来 :hushed:</p><p><img src="/image/Android/okhttp/OkHttp%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="OkHttp流程图"></p><p>图片我是用drawio画的，源文件放在了github上，路径 <a href="https://github.com/huangyuanlove/huangyuanlove.github.io/tree/master/image/Android/okhttp">https://github.com/huangyuanlove/huangyuanlove.github.io/tree/master/image/Android/okhttp</a></p><p>下面的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;NetworkListener&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Factory <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Factory</span>() &#123;<br>            <span class="hljs-meta">@NotNull</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> EventListener <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetworkListener</span>();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callStart</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call)</span> &#123;<br>        <span class="hljs-built_in">super</span>.callStart(call);<br>        Log.e(TAG,<span class="hljs-string">&quot;-------callStart---requestId-----&quot;</span>+mRequestId);<br>    &#125;<br><br><span class="hljs-comment">//重写的N个回调方法</span><br>  .<br>  .<br>  .<br>  .<br>  .<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callFailed</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Call call, <span class="hljs-meta">@NotNull</span> IOException ioe)</span> &#123;<br>        <span class="hljs-built_in">super</span>.callFailed(call, ioe);<br>        ioe.printStackTrace();<br>        Log.e(TAG, <span class="hljs-string">&quot;callFailed&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们可以在这些回调方法中做时间统计，超过指定时长则认为是慢网络请求。</p><h2 id="页面打开关闭监控"><a href="#页面打开关闭监控" class="headerlink" title="页面打开关闭监控"></a>页面打开关闭监控</h2><p>结论：在自定义的application中调用一下<code>registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback);</code>就好。在每个Activity的生命周期执行的时候都会回调<code>callback</code>.</p><h4 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h4><p>在Application中注册一下生命周期回调接口:<code>registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback);</code>并重写各种回调方法，记录对应的时间戳+类名。由于生命周期都是在主线程回调，我们不必担心多线程竞争问题。搞个list直接存。</p><h4 id="落盘保存"><a href="#落盘保存" class="headerlink" title="落盘保存"></a>落盘保存</h4><ol><li>在什么时机保存</li><li>如何保存</li></ol><p>对于问题1，我们在了解Handler机制的时候，提到过在<code>MessageQueue</code>里面有个开发过程中不常用的对象:<code>IdleHandle</code>r，查看源码和注释我们得知，是在线程的MessageQueue中没有消息的时候，会去调用这个类的”queueIdle()”方法，并且该方法返回true时，不会被移除队列。</p><p>我们在Application中向MainLooper的MessageQueue中添加一个IdleHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Looper.myQueue().addIdleHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageQueue</span>.IdleHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">queueIdle</span><span class="hljs-params">()</span> &#123;<br>                Log.e(TAG,<span class="hljs-string">&quot;queueIdle,当前线程名称&quot;</span> + Thread.currentThread().getName()+<span class="hljs-string">&quot;,线程id:&quot;</span> +Thread.currentThread().getId());<br>                BehaviorRepository.getInstance(MyApplication.<span class="hljs-built_in">this</span>).storeLifeEvent();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>对于如何保存，一开始考虑的是写到数据库，因为有事务。后来结合业务发现并不需要这么搞，直接写文件就好，需要的时候直接上传文件到服务器，那么我们如何去写文件？想到了mmap这货。当使用mmap方式写文件失败再考虑使用普通java io。于是有了下面：下面代码来源于：<a href="https://www.cnblogs.com/rustfisher/p/11551372.html">https://www.cnblogs.com/rustfisher/p/11551372.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogWriter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;activityLifeRecorder&quot;</span>;<br><br><br>    <span class="hljs-comment">// 注意申请SD卡读写权限</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String logFileDir;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String fileName;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HandlerThread handlerThread;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Handler writerHandler;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LOG_FILE_GROW_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>; <span class="hljs-comment">// log文件每次增长的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">gCurrentLogPos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;                  <span class="hljs-comment">// log文件当前写到的位置 - 注意要单线程处理</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用前必须调用此方法进行准备</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Context context)</span>&#123;<br>        gCurrentLogPos = <span class="hljs-number">0</span>;<br>        logFileDir = context.getCacheDir() + File.separator + <span class="hljs-string">&quot;logs&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == handlerThread) &#123;<br>            handlerThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerThread</span>(<span class="hljs-string">&quot;LL&quot;</span>);<br>            handlerThread.start();<br>        &#125;<br>        writerHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(handlerThread.getLooper());<br><br><br>        <span class="hljs-comment">//可以保存本次打开的日志，只保存三五次打开的日志</span><br>        fileName = <span class="hljs-string">&quot;_&quot;</span> +  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>,Locale.CHINA).format(System.currentTimeMillis()) + <span class="hljs-string">&quot;.txt&quot;</span>;<br>        Log.d(TAG, <span class="hljs-string">&quot;[prepare] file: &quot;</span> + fileName);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fileName;<br>    &#125;<br><br>    <span class="hljs-comment">// 退出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (writerHandler != <span class="hljs-literal">null</span>) &#123;<br>            writerHandler.removeCallbacksAndMessages(<span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (handlerThread != <span class="hljs-literal">null</span>) &#123;<br>            handlerThread.quit();<br>        &#125;<br>    &#125;<br><br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeToFile</span><span class="hljs-params">(String content)</span>&#123;<br>        <span class="hljs-keyword">if</span> (writerHandler != <span class="hljs-literal">null</span>) &#123;<br>            writerHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteRunnable</span>(content));<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        String  content;<br><br>        WriteRunnable( String content) &#123;<br>            <span class="hljs-built_in">this</span>.content = content;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(logFileDir);<br>                <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">mk</span> <span class="hljs-operator">=</span> dir.mkdirs();<br>                    Log.d(TAG, <span class="hljs-string">&quot;make dir &quot;</span> + mk);<br>                &#125;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">eFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(logFileDir + File.separator + fileName);<br>                <span class="hljs-type">byte</span>[] strBytes = content.getBytes();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">randomAccessFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(eFile, <span class="hljs-string">&quot;rw&quot;</span>);<br>                    MappedByteBuffer mappedByteBuffer;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">inputLen</span> <span class="hljs-operator">=</span> strBytes.length;<br>                    <span class="hljs-keyword">if</span> (!eFile.exists()) &#123;<br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">nf</span> <span class="hljs-operator">=</span> eFile.createNewFile();<br>                        Log.d(TAG, <span class="hljs-string">&quot;new log file &quot;</span> + nf);<br>                        mappedByteBuffer = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_WRITE, gCurrentLogPos, LOG_FILE_GROW_SIZE);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        mappedByteBuffer = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_WRITE, gCurrentLogPos, inputLen);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (mappedByteBuffer.remaining() &lt; inputLen) &#123;<br>                        mappedByteBuffer = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_WRITE, gCurrentLogPos, LOG_FILE_GROW_SIZE + inputLen);<br>                    &#125;<br>                    mappedByteBuffer.put(strBytes);<br>                    gCurrentLogPos += inputLen;<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    Log.e(TAG, <span class="hljs-string">&quot;WriteRunnable run: &quot;</span>, e);<br>                    <span class="hljs-keyword">if</span> (!eFile.exists()) &#123;<br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">nf</span> <span class="hljs-operator">=</span> eFile.createNewFile();<br>                        Log.d(TAG, <span class="hljs-string">&quot;new log file &quot;</span> + nf);<br>                    &#125;<br>                    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(eFile, <span class="hljs-literal">true</span>);<br>                    os.write(content.getBytes());<br>                    os.flush();<br>                    os.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                Log.e(TAG, <span class="hljs-string">&quot;写log文件出错: &quot;</span>, e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在搞Android应用大盘监控，目前需要监控的是慢网络请求及页面的打开和关闭。由于应用中使用的OkHttp进行网络请求，着重看了一下OkHttp源码，还有别人写的一些总结。对于页面的打开关闭行为，我们可以搞个BaseActivity或者在Application中注册生命周期回调就好了。问题在于慢网络监控需要实时上报，而用户行为监控则需要本地落盘保存，在需要的时候再上报，所以如何落盘保存则是一个问题，为此了解了java IO和mmap。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Sentry搭建及Android接入</title>
    <link href="https://blog.huangyuanlove.com/2021/05/22/Sentry%E6%90%AD%E5%BB%BA%E5%8F%8AAndroid%E6%8E%A5%E5%85%A5/"/>
    <id>https://blog.huangyuanlove.com/2021/05/22/Sentry%E6%90%AD%E5%BB%BA%E5%8F%8AAndroid%E6%8E%A5%E5%85%A5/</id>
    <published>2021-05-22T00:39:04.000Z</published>
    <updated>2023-05-19T12:51:02.226Z</updated>
    
    <content type="html"><![CDATA[<p>因为sentry可以私有化部署，相比起bugly，我们可以做跟多的单独定制功能，所以决定将需要即时上报的日志放在sentry上。</p><p>搭建环境：</p><ol><li>Ubuntu18.04 64位</li><li>sentry版本21.5.1</li></ol><p>环境要求：</p><ul><li>Docker 19.03.6+</li><li>Compose 1.24.1+</li><li>4 CPU Cores</li><li>8 GB RAM</li><li>20 GB Free Disk Space</li></ul><p>由于sentry需要使用redis、postgreSQL，所以选在了在新的虚拟机上进行部署</p><span id="more"></span><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><p>目前是在Ubuntu18.04上使用deb文件安装的。官方指导在这里<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><p>在 <a href="https://download.docker.com/linux/ubuntu/dists/">https://download.docker.com/linux/ubuntu/dists/</a> 这里选择一下自己ubuntu的系统对应的文件夹(也就是系统版本代号)，比如18.04对应<code>bionic</code>，然后进入<code>pool/stable</code>文件夹，选择对应的系统环境，比如ubuntu 18.04 64位，对应的地址应该是<code>https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/</code>,然后下载最新版本的软件，我现在下载的是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">containerd</span>.io_1.<span class="hljs-number">4</span>.<span class="hljs-number">4</span>-<span class="hljs-number">1</span>_amd64.deb <br><span class="hljs-attribute">docker</span>-ce-cli_20.<span class="hljs-number">10</span>.<span class="hljs-number">6</span>~<span class="hljs-number">3</span>-<span class="hljs-number">0</span>~ubuntu-bionic_amd64.deb <br><span class="hljs-attribute">docker</span>-ce_20.<span class="hljs-number">10</span>.<span class="hljs-number">6</span>~<span class="hljs-number">3</span>-<span class="hljs-number">0</span>~ubuntu-bionic_amd64.deb<br></code></pre></td></tr></table></figure><p>然后按照顺序安装，安装完成后确认是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run hello-world<br></code></pre></td></tr></table></figure><p>这条命令会下载测试镜像并运行，如果安装成功，则会在终端打印对应信息</p><p>如果上面的下载地址无法访问的话，可以使用国内的清华大学镜像源，地址是 <code>https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/dists/bionic/pool/stable/amd64/</code></p><h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h4><p>访问 <a href="https://github.com/docker/compose/releases/tag/1.29.2">https://github.com/docker/compose/releases/tag/1.29.2</a> 下载linux版本，文件名字改成<code>docker-compose</code>，添加执行权限，并复制到<code> /usr/local/bin/</code>文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv docker-compose-Linux-x86_64 docker-compose<br>chmox +x docker-compose<br>sudo cp docker-compose  /usr/local/bin/<br></code></pre></td></tr></table></figure><p>执行 <code>docker-compose -v</code>命令，能打印出版本信息证明安装程国平</p><h4 id="安装sentry"><a href="#安装sentry" class="headerlink" title="安装sentry"></a>安装sentry</h4><p>访问 <a href="https://github.com/getsentry/onpremise">https://github.com/getsentry/onpremise</a> 并克隆下来该仓库，仓库地址为：<code>git@github.com:getsentry/onpremise.git</code> 或者<code> https://github.com/getsentry/onpremise.git</code>,执行文件夹中的<code>install.sh</code>。过程会比较漫长，在这个过程中会让你创建sentry的用户，输入邮箱和密码。这个用户也就是你之后登陆sentry网页使用的账号密码。</p><p>安装过程中需要拉取docker镜像，众所周知的原因，有很大可能会失败，我们可以将docker的镜像源替换为国内的，比如中科大。ubuntu下替换方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/docker/daemon.json<br><span class="hljs-meta prompt_">#</span><span class="language-bash">文件内容</span><br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">保存后执行</span><br>systemctl restart docker.service<br></code></pre></td></tr></table></figure><h4 id="启动及使用"><a href="#启动及使用" class="headerlink" title="启动及使用"></a>启动及使用</h4><p>在上一步安装完成后的控制台会告诉你启动sentry服务的命令<code>docker-compose up -d</code>，</p><p>在浏览器中访问sentry服务器的ip:9000， 输入上一步创建的邮箱和密码就可以登录了。接下来可以跟着引导查看一下基本功能的使用。</p><p>现在我们创建一个Android应用，创建好了之后会有对应的引导提示如何在Android中使用sentry。</p><ol><li><p>添加仓库</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">repositories &#123;<br>  mavenCentral()<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-string">&#x27;io.sentry:sentry-android:4.3.0&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>在Androidmanifest.xml中添加应用信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;io.sentry.dsn&quot;</span> <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;http://b3a3844e753f4734b7ca1d6b154e6e06@192.168.102.181:9000/2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的value值可以在sentry项目设置中找到。</p></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.sentry.Breadcrumb;<br><span class="hljs-keyword">import</span> io.sentry.Sentry;<br><span class="hljs-keyword">import</span> io.sentry.SentryEvent;<br><span class="hljs-keyword">import</span> io.sentry.SentryLevel;<br><span class="hljs-keyword">import</span> io.sentry.protocol.Message;<br><span class="hljs-keyword">import</span> io.sentry.protocol.User;<br><br>Sentry.captureMessage(<span class="hljs-string">&quot;captureMessage INFO&quot;</span>, SentryLevel.INFO);<br>Sentry.captureException(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;exception&quot;</span>));<br>Sentry.captureEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SentryEvent</span>());<br><span class="hljs-comment">//设置全局用户信息</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setEmail(<span class="hljs-string">&quot;a@a.com&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>user.setId(userId);<br>Sentry.setUser(user);<br></code></pre></td></tr></table></figure></li></ol><h4 id="关于混淆"><a href="#关于混淆" class="headerlink" title="关于混淆"></a>关于混淆</h4><p>如果应用经过混淆，我们需要将mapping文件上传到sentry平台，才能定位到错误代码所在位置。</p><p>首先在<code>app/build.gradle</code>中添加plugin：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;io.sentry.android.gradle&#x27;</span><br></code></pre></td></tr></table></figure><p>然后在工程根目录下的<code>build.gradle</code>文件中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;io.sentry:sentry-android-gradle-plugin:1.7.36&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们还需要在项目根目录下添加一个<code>sentry.properties</code>文件，用来配置我们的mapping文件上传到哪个项目中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">defaults.project</span>=<span class="hljs-string">your-project</span><br><span class="hljs-attr">defaults.org</span>=<span class="hljs-string">your-org</span><br><span class="hljs-attr">auth.token</span>=<span class="hljs-string">YOUR_AUTH_TOKEN</span><br><span class="hljs-attr">defaults.url</span>=<span class="hljs-string">your sentry service address</span><br></code></pre></td></tr></table></figure><p>这里的org的值在<code>Organization Settings</code>中查看，是<code>Organization Slug</code>的值，而不是<code>Display Name</code>的值</p><p><img src="/image/sentry_upload_mapping.png" alt="sentry_upload_mapping"></p><p>token值在上图中的 <code>API keys</code>里面，没有的话创建一个新的就好，权限我是用的默认。</p><p>然后我们打个release包，上传成功后会在控制台打印出对应信息。我们可以在项目设置 <code>ProGuard</code>中找到上传的mapping文件。</p><p>如果不希望自动上传mapping，我们可以将其关闭，使用<code>sentry-cli</code>进行手动上传</p><p>在<code>app/build.gradle</code>中添加如下配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs groovy">sentry &#123;<br>    <span class="hljs-comment">// Disables or enables the automatic configuration of ProGuard</span><br>    <span class="hljs-comment">// for Sentry.  This injects a default config for ProGuard so</span><br>    <span class="hljs-comment">// you don&#x27;t need to do it manually.</span><br><br>    <span class="hljs-comment">// Only enable it if you are using sentry-android &lt;= v1.7,</span><br>    <span class="hljs-comment">// sentry-android &gt;= v2.0 already does it automatically.</span><br>    autoProguardConfig <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment">// Enables or disables the automatic upload of mapping files</span><br>    <span class="hljs-comment">// during a build.  If you disable this, you&#x27;ll need to manually</span><br>    <span class="hljs-comment">// upload the mapping files with sentry-cli when you do a release.</span><br>    autoUpload <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">// Disables or enables the automatic configuration of Native Symbols</span><br>    <span class="hljs-comment">// for Sentry. This executes sentry-cli automatically so</span><br>    <span class="hljs-comment">// you don&#x27;t need to do it manually.</span><br>    <span class="hljs-comment">// Default is disabled.</span><br>    uploadNativeSymbols <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment">// Does or doesn&#x27;t include the source code of native code for Sentry.</span><br>    <span class="hljs-comment">// This executes sentry-cli with the --include-sources param. automatically so</span><br>    <span class="hljs-comment">// you don&#x27;t need to do it manually.</span><br>    <span class="hljs-comment">// Default is disabled.</span><br>    includeNativeSources <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>sentry-cli的安装在这里 <a href="https://docs.sentry.io/product/cli/installation/">https://docs.sentry.io/product/cli/installation/</a></p><p>sentry-cli的配置 <a href="https://docs.sentry.io/product/cli/configuration/">https://docs.sentry.io/product/cli/configuration/</a></p><p>sentry-cli 的使用 <a href="https://docs.sentry.io/product/cli/dif/#proguard-mapping-upload">https://docs.sentry.io/product/cli/dif/#proguard-mapping-upload</a></p><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为sentry可以私有化部署，相比起bugly，我们可以做跟多的单独定制功能，所以决定将需要即时上报的日志放在sentry上。&lt;/p&gt;
&lt;p&gt;搭建环境：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ubuntu18.04 64位&lt;/li&gt;
&lt;li&gt;sentry版本21.5.1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;环境要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 19.03.6+&lt;/li&gt;
&lt;li&gt;Compose 1.24.1+&lt;/li&gt;
&lt;li&gt;4 CPU Cores&lt;/li&gt;
&lt;li&gt;8 GB RAM&lt;/li&gt;
&lt;li&gt;20 GB Free Disk Space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于sentry需要使用redis、postgreSQL，所以选在了在新的虚拟机上进行部署&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
    <category term="运维" scheme="https://blog.huangyuanlove.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="linux" scheme="https://blog.huangyuanlove.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Android中的单元测试</title>
    <link href="https://blog.huangyuanlove.com/2021/04/25/Android%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.huangyuanlove.com/2021/04/25/Android%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2021-04-25T02:18:51.000Z</published>
    <updated>2023-05-19T12:51:02.211Z</updated>
    
    <content type="html"><![CDATA[<h4 id="纯java代码的单元测试"><a href="#纯java代码的单元测试" class="headerlink" title="纯java代码的单元测试"></a>纯java代码的单元测试</h4><p>这里的纯java代码指的是不包含Android包中的代码，我们使用Junit写单元测试即可。</p><p>比如我们有一个方法是用来格式化数字，返回保留两位小数后的字符串，方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">numberFormat</span><span class="hljs-params">(<span class="hljs-type">double</span> number)</span>&#123;<br>  <span class="hljs-keyword">return</span> String.format(Locale.getDefault(),<span class="hljs-string">&quot;%.2f&quot;</span>,number);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们的单元测试可以这么写，依赖一下junit测试框架<code>testImplementation &#39;junit:junit:4.+&#39;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleUnitTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNumberFormat</span><span class="hljs-params">()</span>&#123;<br>        assertEquals(<span class="hljs-string">&quot;0.23&quot;</span>,Util.numberFormat(<span class="hljs-number">0.232323</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><p>这里说明一下，我们在写单元测试的时候，经常会需要初始化一些数据，但我们又不想在每个测试方法中都调用一遍初始化的方法，这里测试框架给出了四个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@BeforeClass</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><span class="hljs-meta">@After</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><span class="hljs-meta">@AfterClass</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@BeforeClass:只会执行一次，修饰的方法必须是静态的</li><li>@AfterClass：只会执行一次，修饰的方法必须是静态的</li><li>@Before：每次调用测试方法时都会执行一次</li><li>@After：每次测试方法执行完成后都会执行一次</li></ul><h4 id="代码中包含Android代码"><a href="#代码中包含Android代码" class="headerlink" title="代码中包含Android代码"></a>代码中包含Android代码</h4><p>但是，假如我们的代码中不小心”混入”了一些调用Android包的功能，比如验证邮箱的有效性，代码可能是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.util.Patterns;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmailAddress</span><span class="hljs-params">(String address)</span>&#123;<br>  <span class="hljs-keyword">return</span> Patterns.EMAIL_ADDRESS.matcher(address).matches();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里导入了 android.util包，如果使用junit的话，在单元测试代码中会报一个空指针异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmailAddress</span><span class="hljs-params">()</span>&#123;<br>  Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;gg@gg.com&quot;</span>));<br>  Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;huangyuan@chunyu.me&quot;</span>));<br>  Assert.assertFalse(Util.isEmailAddress(<span class="hljs-string">&quot;wwww&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs verilog">java<span class="hljs-variable">.lang</span><span class="hljs-variable">.NullPointerException</span><br>at com<span class="hljs-variable">.huangyuanlove</span><span class="hljs-variable">.tdd_demo</span><span class="hljs-variable">.Util</span><span class="hljs-variable">.isEmailAddress</span>(Util<span class="hljs-variable">.java</span>:<span class="hljs-number">15</span>)<br>at com<span class="hljs-variable">.huangyuanlove</span><span class="hljs-variable">.tdd_demo</span><span class="hljs-variable">.ExampleUnitTest</span><span class="hljs-variable">.testEmailAddress</span>(ExampleUnitTest<span class="hljs-variable">.java</span>:<span class="hljs-number">27</span>)<br>at sun<span class="hljs-variable">.reflect</span><span class="hljs-variable">.NativeMethodAccessorImpl</span><span class="hljs-variable">.invoke0</span>(Native Method)<br>at sun<span class="hljs-variable">.reflect</span><span class="hljs-variable">.NativeMethodAccessorImpl</span><span class="hljs-variable">.invoke</span>(NativeMethodAccessorImpl<span class="hljs-variable">.java</span>:<span class="hljs-number">62</span>)<br>at sun<span class="hljs-variable">.reflect</span><span class="hljs-variable">.DelegatingMethodAccessorImpl</span><span class="hljs-variable">.invoke</span>(DelegatingMethodAccessorImpl<span class="hljs-variable">.java</span>:<span class="hljs-number">43</span>)<br>at java<span class="hljs-variable">.lang</span><span class="hljs-variable">.reflect</span><span class="hljs-variable">.Method</span><span class="hljs-variable">.invoke</span>(Method<span class="hljs-variable">.java</span>:<span class="hljs-number">498</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.model</span><span class="hljs-variable">.FrameworkMethod</span>$<span class="hljs-number">1</span><span class="hljs-variable">.runReflectiveCall</span>(FrameworkMethod<span class="hljs-variable">.java</span>:<span class="hljs-number">59</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.internal</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.model</span><span class="hljs-variable">.ReflectiveCallable</span><span class="hljs-variable">.run</span>(ReflectiveCallable<span class="hljs-variable">.java</span>:<span class="hljs-number">12</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.model</span><span class="hljs-variable">.FrameworkMethod</span><span class="hljs-variable">.invokeExplosively</span>(FrameworkMethod<span class="hljs-variable">.java</span>:<span class="hljs-number">56</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.internal</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.statements</span><span class="hljs-variable">.InvokeMethod</span><span class="hljs-variable">.evaluate</span>(InvokeMethod<span class="hljs-variable">.java</span>:<span class="hljs-number">17</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">3</span><span class="hljs-variable">.evaluate</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">306</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.BlockJUnit4ClassRunner</span>$<span class="hljs-number">1</span><span class="hljs-variable">.evaluate</span>(BlockJUnit4ClassRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">100</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span><span class="hljs-variable">.runLeaf</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">366</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.BlockJUnit4ClassRunner</span><span class="hljs-variable">.runChild</span>(BlockJUnit4ClassRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">103</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.BlockJUnit4ClassRunner</span><span class="hljs-variable">.runChild</span>(BlockJUnit4ClassRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">63</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">4</span><span class="hljs-variable">.run</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">331</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">1</span><span class="hljs-variable">.schedule</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">79</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span><span class="hljs-variable">.runChildren</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">329</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span><span class="hljs-variable">.access</span>$<span class="hljs-number">100</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">66</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">2</span><span class="hljs-variable">.evaluate</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">293</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span>$<span class="hljs-number">3</span><span class="hljs-variable">.evaluate</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">306</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runners</span><span class="hljs-variable">.ParentRunner</span><span class="hljs-variable">.run</span>(ParentRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">413</span>)<br>at org<span class="hljs-variable">.junit</span><span class="hljs-variable">.runner</span><span class="hljs-variable">.JUnitCore</span><span class="hljs-variable">.run</span>(JUnitCore<span class="hljs-variable">.java</span>:<span class="hljs-number">137</span>)<br>at com<span class="hljs-variable">.intellij</span><span class="hljs-variable">.junit4</span><span class="hljs-variable">.JUnit4IdeaTestRunner</span><span class="hljs-variable">.startRunnerWithArgs</span>(JUnit4IdeaTestRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">68</span>)<br>at com<span class="hljs-variable">.intellij</span><span class="hljs-variable">.rt</span><span class="hljs-variable">.junit</span><span class="hljs-variable">.IdeaTestRunner</span>$Repeater<span class="hljs-variable">.startRunnerWithArgs</span>(IdeaTestRunner<span class="hljs-variable">.java</span>:<span class="hljs-number">33</span>)<br>at com<span class="hljs-variable">.intellij</span><span class="hljs-variable">.rt</span><span class="hljs-variable">.junit</span><span class="hljs-variable">.JUnitStarter</span><span class="hljs-variable">.prepareStreamsAndStart</span>(JUnitStarter<span class="hljs-variable">.java</span>:<span class="hljs-number">230</span>)<br>at com<span class="hljs-variable">.intellij</span><span class="hljs-variable">.rt</span><span class="hljs-variable">.junit</span><span class="hljs-variable">.JUnitStarter</span><span class="hljs-variable">.main</span>(JUnitStarter<span class="hljs-variable">.java</span>:<span class="hljs-number">58</span>)<br></code></pre></td></tr></table></figure><p>因为我们的junit是跑在jvm上的，默认并没有加载android的包，这时候我们可以使用<a href="http://robolectric.org/">Robolectric</a>这个三方包来做测试。在gradle中添加一下依赖<code>testImplementation &#39;org.robolectric:robolectric:4.2&#39;</code>,<strong>别问为啥不用4.4,因为我还没整明白，Shadows方法不能用</strong></p><p>在我们的单元测试类上加下注解，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(RobolectricTestRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UtilTestWithRobolectric</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmailAddress</span><span class="hljs-params">()</span>&#123;<br>        Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;gg@gg.com&quot;</span>));<br>        Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;huangyuan@chunyu.me&quot;</span>));<br>        Assert.assertFalse(Util.isEmailAddress(<span class="hljs-string">&quot;wwww&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了这个，我们还可以使用Robolectric来测试一些页面行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.test.core.app.ActivityScenario;<br><span class="hljs-keyword">import</span> androidx.test.core.app.ApplicationProvider;<br><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.robolectric.RobolectricTestRunner;<br><span class="hljs-keyword">import</span> org.robolectric.Shadows;<br><span class="hljs-keyword">import</span> org.robolectric.shadows.ShadowAlertDialog;<br><span class="hljs-keyword">import</span> org.robolectric.shadows.ShadowToast;<br><span class="hljs-meta">@RunWith(RobolectricTestRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UtilTestWithRobolectric</span> &#123;<br>    <span class="hljs-keyword">private</span> ActivityScenario&lt;MainActivity&gt; scenario;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initScenario</span><span class="hljs-params">()</span>&#123;<br>         scenario = ActivityScenario.launch(MainActivity.class);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testScenario</span><span class="hljs-params">()</span>&#123;<br>        Assert.assertNotNull(scenario);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEmailAddress</span><span class="hljs-params">()</span>&#123;<br>        Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;gg@gg.com&quot;</span>));<br>        Assert.assertTrue(Util.isEmailAddress(<span class="hljs-string">&quot;huangyuan@chunyu.me&quot;</span>));<br>        Assert.assertFalse(Util.isEmailAddress(<span class="hljs-string">&quot;wwww&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//是否弹出toast</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testShowToast</span><span class="hljs-params">()</span>&#123;<br>        scenario.onActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityScenario</span>.ActivityAction&lt;MainActivity&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">perform</span><span class="hljs-params">(MainActivity activity)</span> &#123;<br>                <span class="hljs-type">Toast</span> <span class="hljs-variable">toast</span> <span class="hljs-operator">=</span> ShadowToast.getLatestToast();<br>                Assert.assertNull(toast);<br><br>                activity.findViewById(R.id.show_toast).performClick();<br>                toast = ShadowToast.getLatestToast();<br>                Assert.assertNotNull(toast);<br><br>                <span class="hljs-type">ShadowToast</span> <span class="hljs-variable">shadowToast</span> <span class="hljs-operator">=</span> Shadows.shadowOf(toast);<br>                Assert.assertEquals(<span class="hljs-string">&quot;show_toast&quot;</span>,ShadowToast.getTextOfLatestToast());<br>                Assert.assertEquals(Toast.LENGTH_SHORT,toast.getDuration());<br><br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>  <span class="hljs-comment">//是否展示Dialog</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testShowDialog</span><span class="hljs-params">()</span>&#123;<br>        scenario.onActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityScenario</span>.ActivityAction&lt;MainActivity&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">perform</span><span class="hljs-params">(MainActivity activity)</span> &#123;<br>                <span class="hljs-type">AlertDialog</span> <span class="hljs-variable">dialog</span> <span class="hljs-operator">=</span> ShadowAlertDialog.getLatestAlertDialog();<br>                Assert.assertNull(dialog);<br>                activity.findViewById(R.id.show_toast).performClick();<br><br>                dialog = ShadowAlertDialog.getLatestAlertDialog();<br>                Assert.assertNotNull(dialog);<br><br>                <span class="hljs-type">ShadowAlertDialog</span> <span class="hljs-variable">shadowDialog</span> <span class="hljs-operator">=</span> Shadows.shadowOf(dialog);<br>                Assert.assertEquals(<span class="hljs-string">&quot;Hello！&quot;</span>, shadowDialog.getMessage());<br><br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>  <span class="hljs-comment">//是否跳转到了指定页面</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGoToLogin</span><span class="hljs-params">()</span>&#123;<br><br>        scenario.onActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityScenario</span>.ActivityAction&lt;MainActivity&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">perform</span><span class="hljs-params">(MainActivity activity)</span> &#123;<br>                activity.findViewById(R.id.login).performClick();<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">expectedIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(activity, LoginActivity.class);<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">actual</span> <span class="hljs-operator">=</span> Shadows.shadowOf(activity).getNextStartedActivity();<br>                Assert.assertEquals(expectedIntent.getComponent(),actual.getComponent());<br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里的<code>ActivityScenario</code>是使用的 androidx.test.core.app包下的类，需要依赖<code>testImplementation &#39;androidx.test:core:1.1.0&#39;</code></p><p>当然在<code>Robolectric</code>中也有对应的创建Activity的方法，不过在4.4版本中被废弃了，也推荐使用androidx.test包中创建Activity的方法。</p><h4 id="Mock和Mockito"><a href="#Mock和Mockito" class="headerlink" title="Mock和Mockito"></a>Mock和Mockito</h4><p>如何测试一个没有返回值的方法，一般是来看这个方法有没有得到调用。<br>假如我们有如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginPresenter</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserManager</span><span class="hljs-params">(UserManager userManager)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userManager = userManager;<br>    &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String userName,String password)</span>&#123;<br>        userManager.performLogin(userName,password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们要验证<code>mUserManager</code>的一些行为，首先要 mock UserManager 这个类，mock 这个类的方式是：<br><code>Mockito.mock(UserManager.class);</code><br>mock 了<code>UserManager</code>类之后，我们就可以开始测试了,验证一个对象的方法调用情况的方法是：<br><code>Mockito.verify(objectToVerify).methodToVerify(arguments);</code><br>其中，<code>objectToVerify</code>和<code>methodToVerify</code>分别是你想要验证的对象和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogin</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">UserManager</span> <span class="hljs-variable">userManager</span> <span class="hljs-operator">=</span> Mockito.mock(UserManager.class);<br>  <span class="hljs-type">LoginPresenter</span> <span class="hljs-variable">loginPresenter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginPresenter</span>();<br>  loginPresenter.setUserManager(userManager);<br>  loginPresenter.login(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>  Mockito.verify(userManager).performLogin(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再假如我们在登录的时候需要先验证密码强度，但是我们测试的时候不关心这个验证逻辑，希望不管传入的密码是啥，都可以通过验证。我们就需要干预某些mock对象的方法行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginWithVerifyPassword</span><span class="hljs-params">(PasswordValidator passwordValidator, String userName,String password)</span>&#123;<br>  <span class="hljs-keyword">if</span>(passwordValidator.verifyPassword(password))&#123;<br>    userManager.performLogin(userName,password);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;密码不正确&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordValidator</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verifyPassword</span><span class="hljs-params">(String password)</span>&#123;<br>    <span class="hljs-keyword">return</span> password != <span class="hljs-literal">null</span> &amp;&amp; password.length() &gt;<span class="hljs-number">5</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要mock一下PasswordValidator这个类中verifyPassword的行为,这种指定 mock 对象的某个方法，让它返回特定值的写法如下：<br><code>Mockito.when(mockObject.targetMethod(args)).thenReturn(desiredReturnValue);</code>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLoginWithPasswordValidator</span><span class="hljs-params">()</span> &#123;<br>  LoginPresenter.<span class="hljs-type">PasswordValidator</span> <span class="hljs-variable">passwordValidator</span> <span class="hljs-operator">=</span> Mockito.mock(LoginPresenter.PasswordValidator.class);<br>  <span class="hljs-comment">//验证方法行为是否被改变</span><br>  Mockito.when(passwordValidator.verifyPassword(ArgumentMatchers.any())).thenReturn(<span class="hljs-literal">true</span>);<br>  Assert.assertTrue(passwordValidator.verifyPassword(<span class="hljs-string">&quot;&quot;</span>));<br>  Assert.assertTrue(passwordValidator.verifyPassword(<span class="hljs-literal">null</span>));<br>  Assert.assertTrue(passwordValidator.verifyPassword(<span class="hljs-string">&quot;123&quot;</span>));<br>  Assert.assertTrue(passwordValidator.verifyPassword(<span class="hljs-string">&quot;321321321&quot;</span>));<br><br>  <span class="hljs-comment">//验证登录方法是否被调用</span><br>  <span class="hljs-type">UserManager</span> <span class="hljs-variable">userManager</span> <span class="hljs-operator">=</span> Mockito.mock(UserManager.class);<br>  <span class="hljs-type">LoginPresenter</span> <span class="hljs-variable">loginPresenter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginPresenter</span>();<br>  loginPresenter.setUserManager(userManager);<br>  loginPresenter.loginWithVerifyPassword(passwordValidator, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>  Mockito.verify(userManager).performLogin(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Androidx-test"><a href="#Androidx-test" class="headerlink" title="Androidx.test"></a>Androidx.test</h4><p>最近在看Androidx包下的测试框架，对于我们来讲，单元测试不是很多，测试代码跑在模拟器或者真机上带来的时间消耗还是可以接受的。有时间撸一下对应的代码</p><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;纯java代码的单元测试&quot;&gt;&lt;a href=&quot;#纯java代码的单元测试&quot; class=&quot;headerlink&quot; title=&quot;纯java代码的单元测试&quot;&gt;&lt;/a&gt;纯java代码的单元测试&lt;/h4&gt;&lt;p&gt;这里的纯java代码指的是不包含Android包中的代码，我们使用Junit写单元测试即可。&lt;/p&gt;
&lt;p&gt;比如我们有一个方法是用来格式化数字，返回保留两位小数后的字符串，方法如下&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;numberFormat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; number)&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; String.format(Locale.getDefault(),&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%.2f&amp;quot;&lt;/span&gt;,number);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么我们的单元测试可以这么写，依赖一下junit测试框架&lt;code&gt;testImplementation &amp;#39;junit:junit:4.+&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; org.junit.Assert.*;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ExampleUnitTest&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testNumberFormat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;0.23&amp;quot;&lt;/span&gt;,Util.numberFormat(&lt;span class=&quot;hljs-number&quot;&gt;0.232323&lt;/span&gt;));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>PMS及apk安装过程</title>
    <link href="https://blog.huangyuanlove.com/2021/04/05/PMS%E5%8F%8Aapk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
    <id>https://blog.huangyuanlove.com/2021/04/05/PMS%E5%8F%8Aapk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</id>
    <published>2021-04-05T05:35:36.000Z</published>
    <updated>2023-05-19T12:51:02.226Z</updated>
    
    <content type="html"><![CDATA[<p>先从如何使用代码安装一个apk开始。</p><p>在7.0之前，我们可以直接指定apk的路径进行安装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.Action_View);<br><span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/sdcard/a.apk&quot;</span>;<br>intent.setDataAndType(Uri.parse(<span class="hljs-string">&quot;file://&quot;</span> + filepath),<span class="hljs-string">&quot;application/vnd.android.package-archive&quot;</span>);<br>startActivity(intent);<br></code></pre></td></tr></table></figure><p>在7.0及以后，需要使用FileProvider进行安装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">apk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(...);<br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_VIEW);<br>intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);<br><span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> FileProvider.getUriForFile(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;com.example.demo.fileprovider&quot;</span>, apk);<br>intent.setDataAndType(uri, <span class="hljs-string">&quot;application/vnd.android.package-archive&quot;</span>);<br>startActivity(intent);<br></code></pre></td></tr></table></figure><p>不管是哪个版本，我们都需要调用<code>intent.setDataAndType</code>方法，我们在aosp源码中找到了对应的Activity：在<code>packages/apps/PackageInstaller</code>文件夹下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.InstallStart&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:excludeFromRecents</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span> <span class="hljs-attr">android:priority</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.VIEW&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.INSTALL_PACKAGE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;content&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:mimeType</span>=<span class="hljs-string">&quot;application/vnd.android.package-archive&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span> <span class="hljs-attr">android:priority</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.INSTALL_PACKAGE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;package&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;content&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span> <span class="hljs-attr">android:priority</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.content.pm.action.CONFIRM_PERMISSIONS&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="PackageInstaller准备工作"><a href="#PackageInstaller准备工作" class="headerlink" title="PackageInstaller准备工作"></a>PackageInstaller准备工作</h3><h4 id="com-android-packageinstaller-InstallStart"><a href="#com-android-packageinstaller-InstallStart" class="headerlink" title="com.android.packageinstaller.InstallStart"></a>com.android.packageinstaller.InstallStart</h4><p><code>InstallStart</code>继承自Activity，先看注释：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Select which activity is the first visible activity of the installation and forward the intent to</span><br><span class="hljs-comment"> * it.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>很清楚了，判断需要打开哪个页面。</p><p>我们来看<code>onCreate</code>方法中的关键地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">nextActivity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(intent);<br>nextActivity.setFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);<br><br><span class="hljs-comment">// The the installation source as the nextActivity thinks this activity is the source, hence</span><br><span class="hljs-comment">// set the originating UID and sourceInfo explicitly</span><br>nextActivity.putExtra(PackageInstallerActivity.EXTRA_CALLING_PACKAGE, callingPackage);<br>nextActivity.putExtra(PackageInstallerActivity.EXTRA_ORIGINAL_SOURCE_INFO, sourceInfo);<br>nextActivity.putExtra(Intent.EXTRA_ORIGINATING_UID, originatingUid);<br><br><span class="hljs-keyword">if</span> (PackageInstaller.ACTION_CONFIRM_PERMISSIONS.equals(intent.getAction())) &#123;<br>    nextActivity.setClass(<span class="hljs-built_in">this</span>, PackageInstallerActivity.class);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-type">Uri</span> <span class="hljs-variable">packageUri</span> <span class="hljs-operator">=</span> intent.getData();<br><br>    <span class="hljs-keyword">if</span> (packageUri != <span class="hljs-literal">null</span> &amp;&amp; (packageUri.getScheme().equals(ContentResolver.SCHEME_FILE)<br>                               || packageUri.getScheme().equals(ContentResolver.SCHEME_CONTENT))) &#123;<br>        <span class="hljs-comment">// Copy file to prevent it from being changed underneath this process</span><br>        nextActivity.setClass(<span class="hljs-built_in">this</span>, InstallStaging.class);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (packageUri != <span class="hljs-literal">null</span> &amp;&amp; packageUri.getScheme().equals(<br>        PackageInstallerActivity.SCHEME_PACKAGE)) &#123;<br>        nextActivity.setClass(<span class="hljs-built_in">this</span>, PackageInstallerActivity.class);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>        result.putExtra(Intent.EXTRA_INSTALL_RESULT,<br>                        PackageManager.INSTALL_FAILED_INVALID_URI);<br>        setResult(RESULT_FIRST_USER, result);<br><br>        nextActivity = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (nextActivity != <span class="hljs-literal">null</span>) &#123;<br>    startActivity(nextActivity);<br>&#125;<br>finish();<br></code></pre></td></tr></table></figure><p>在7.0之后的版本上，由于使用FIleProvider，会隐藏共享文件的真实路径，并将路径转换成:Uri路径，这样就会跳转到<code>InstallStaging</code>这个类</p><h4 id="com-android-packageinstaller-InstallStaging"><a href="#com-android-packageinstaller-InstallStaging" class="headerlink" title="com.android.packageinstaller.InstallStaging"></a>com.android.packageinstaller.InstallStaging</h4><p>同样先看顶部注释</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/**<br> * If a package gets installed <span class="hljs-keyword">from</span> an content URI this step loads <span class="hljs-keyword">the</span> package <span class="hljs-keyword">and</span> turns <span class="hljs-keyword">it</span> <span class="hljs-keyword">into</span><br> * <span class="hljs-keyword">and</span> installation <span class="hljs-keyword">from</span> a <span class="hljs-built_in">file</span>. Then <span class="hljs-keyword">it</span> re-starts <span class="hljs-keyword">the</span> installation <span class="hljs-keyword">as</span> usual.<br> */<br></code></pre></td></tr></table></figure><p>如果是从Uri安装的，会先转化成文件，然后再进行安装</p><p>我们找到对应的方法，是在onResume中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onResume();<br><br>    <span class="hljs-comment">// This is the first onResume in a single life of the activity</span><br>    <span class="hljs-keyword">if</span> (mStagingTask == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// File does not exist, or became invalid</span><br>        <span class="hljs-keyword">if</span> (mStagedFile == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// Create file delayed to be able to show error</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                mStagedFile = TemporaryFileManager.getStagedFile(<span class="hljs-built_in">this</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                showError();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        mStagingTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StagingAsyncTask</span>();<br>        mStagingTask.execute(getIntent().getData());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StagingAsyncTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AsyncTask</span>&lt;Uri, Void, Boolean&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Boolean <span class="hljs-title function_">doInBackground</span><span class="hljs-params">(Uri... params)</span> &#123;<br>        <span class="hljs-keyword">if</span> (params == <span class="hljs-literal">null</span> || params.length &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">packageUri</span> <span class="hljs-operator">=</span> params[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> getContentResolver().openInputStream(packageUri)) &#123;<br>            <span class="hljs-comment">// Despite the comments in ContentResolver#openInputStream the returned stream can</span><br>            <span class="hljs-comment">// be null.</span><br>            <span class="hljs-keyword">if</span> (in == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(mStagedFile)) &#123;<br>                <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> bytesRead;<br>                <span class="hljs-keyword">while</span> ((bytesRead = in.read(buffer)) &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// Be nice and respond to a cancellation</span><br>                    <span class="hljs-keyword">if</span> (isCancelled()) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    out.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | SecurityException | IllegalStateException e) &#123;<br>            Log.w(LOG_TAG, <span class="hljs-string">&quot;Error staging apk from content URI&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPostExecute</span><span class="hljs-params">(Boolean success)</span> &#123;<br>        <span class="hljs-keyword">if</span> (success) &#123;<br>            <span class="hljs-comment">// Now start the installation again from a file</span><br>            <span class="hljs-type">Intent</span> <span class="hljs-variable">installIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(getIntent());<br>            installIntent.setClass(InstallStaging.<span class="hljs-built_in">this</span>, DeleteStagedFileOnResult.class);<br>            installIntent.setData(Uri.fromFile(mStagedFile));<br><br>            <span class="hljs-keyword">if</span> (installIntent.getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class="hljs-literal">false</span>)) &#123;<br>                installIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);<br>            &#125;<br><br>            installIntent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);<br>            startActivity(installIntent);<br><br>            InstallStaging.<span class="hljs-built_in">this</span>.finish();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            showError();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里创建了<code>StagingAsyncTask</code>, 将uri(最开始传入的apk文件的uri，也是task中的packageUri)中的内容写入到mStagedFile中；如果写入成功，则跳转到<code>DeleteStagedFileOnResult</code>页面</p><h4 id="com-android-packageinstaller-DeleteStagedFileOnResult"><a href="#com-android-packageinstaller-DeleteStagedFileOnResult" class="headerlink" title="com.android.packageinstaller.DeleteStagedFileOnResult"></a>com.android.packageinstaller.DeleteStagedFileOnResult</h4><p>先看顶部注释</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Trampoline activity. Calls PackageInstallerActivity and deletes staged install file onResult.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>作为中间层的页面，打开PackageInstallerActivity，并且在返回的时候删除暂存文件。没啥好说的，直接到PackageInstallerActivity</p><h4 id="com-android-packageinstaller-PackageInstallerActivity"><a href="#com-android-packageinstaller-PackageInstallerActivity" class="headerlink" title="com.android.packageinstaller.PackageInstallerActivity"></a>com.android.packageinstaller.PackageInstallerActivity</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This activity is launched when a new application is installed via side loading</span><br><span class="hljs-comment"> * The package is first parsed and the user is notified of parse errors via a dialog.</span><br><span class="hljs-comment"> * If the package is successfully parsed, the user is notified to turn on the install unknown</span><br><span class="hljs-comment"> * applications setting. A memory check is made at this point and the user is notified of out</span><br><span class="hljs-comment"> * of memory conditions if any. If the package is already existing on the device,</span><br><span class="hljs-comment"> * a confirmation dialog (to replace the existing package) is presented to the user.</span><br><span class="hljs-comment"> * Based on the user response the package is then installed by launching InstallAppConfirm</span><br><span class="hljs-comment"> * sub activity. All state transitions are handled in this activity</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>粗略的描述了应用程序的安装过程：先对安装包进行解析，解析失败则弹窗通知；解析成功后，通知用户打开”安装未知应用程序”设置，进行内容检查，如果内存不足，则通知用户；如果设备上已经存在该应用，则通知用户进行替换，然后根据用户响应，通过启动InstallAppConfirm来安装软件包。</p><p>我们来看onCreate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle icicle)</span> &#123;<br>      <span class="hljs-built_in">super</span>.onCreate(<span class="hljs-literal">null</span>);<br><br>      <span class="hljs-keyword">if</span> (icicle != <span class="hljs-literal">null</span>) &#123;<br>          mAllowUnknownSources = icicle.getBoolean(ALLOW_UNKNOWN_SOURCES_KEY);<br>      &#125;<br><br>      mPm = getPackageManager();<br>      mIpm = AppGlobals.getPackageManager();<br>      mAppOpsManager = (AppOpsManager) getSystemService(Context.APP_OPS_SERVICE);<br>      mInstaller = mPm.getPackageInstaller();<br>      mUserManager = (UserManager) getSystemService(Context.USER_SERVICE);<br>。<br>      。<br>      。<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">wasSetUp</span> <span class="hljs-operator">=</span> processPackageUri(packageUri);<br>      <span class="hljs-keyword">if</span> (!wasSetUp) &#123;<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-comment">// load dummy layout with OK button disabled until we override this layout in</span><br>      <span class="hljs-comment">// startInstallConfirm</span><br>      bindUi(R.layout.install_confirm, <span class="hljs-literal">false</span>);<br>      checkIfAllowedAndInitiateInstall();<br>  &#125;<br></code></pre></td></tr></table></figure><p>一开始初始化需要的各种对象，PackageManager、IPackageManager、IPackageManager、UserManager、PackageInstaller等；</p><p>瞄一眼<code>processPackageUri</code>方法：根据Uri拿到scheme,然后根据scheme类型拿到packageInfo;如果scheme既不是<code>package</code>也不是<code>file</code>，则抛出<code>IllegalArgumentException</code>异常。</p><p><code>bindUi</code>是设置页面按钮的点击事件。</p><p>看下<code>checkIfAllowedAndInitiateInstall</code>方法：如果允许安装未知来源或者该应用不是未知来源，则调用<code>initiateInstall</code>方法进行安装；在<code>initiateInstall</code>方法中，获取包名信息，进入判断设备上是否已经安装该应用流程，最后调用<code>startInstallConfirm</code>初始化确认安装界面，列出应用所需权限信息</p><p>总结一下这些步骤：</p><ul><li>根据Uri中的scheme不同，跳转到不同页面</li><li>InstallStart将content协议转化为file协议，跳转到InstallStaging，然后跳转到PackageInstallerActivity</li><li>在PackageInstallerActivity，对协议进行处理，解析文件得到PackageInfo</li><li>对未知来源apk进行处理，初始化页面</li></ul><h3 id="PackageInstaller安装apk"><a href="#PackageInstaller安装apk" class="headerlink" title="PackageInstaller安装apk"></a>PackageInstaller安装apk</h3><p>当我们点击安装页面中确认按钮时，调用<code>onClick</code>方法，接着调用<code>startInstall</code>打开<code>InstallInstalling</code>页面进行安装。老规矩，先看顶部注释</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">/**<br> * Send <span class="hljs-keyword">package</span> to the <span class="hljs-keyword">package</span> manager <span class="hljs-keyword">and</span> handle results from <span class="hljs-keyword">package</span> manager. Once the<br> * installation succeeds, start &#123;@link InstallSuccess&#125; <span class="hljs-keyword">or</span> &#123;@link InstallFailed&#125;.<br> * &lt;p&gt;This has two phases: First <span class="hljs-keyword">send</span> the data to the <span class="hljs-keyword">package</span> manager, then <span class="hljs-keyword">wait</span> <span class="hljs-keyword">until</span> the <span class="hljs-keyword">package</span><br> * manager processed the result.&lt;<span class="hljs-regexp">/p&gt;</span><br><span class="hljs-regexp"> */</span><br></code></pre></td></tr></table></figure><p>主要用于向包管理器发送包的信息，并处理回调，安装成功则打开<code>InstallSuccess</code>,失败则打开<code>InstallFailed</code></p><h4 id="com-android-packageinstaller-InstallInstalling"><a href="#com-android-packageinstaller-InstallInstalling" class="headerlink" title="com.android.packageinstaller.InstallInstalling"></a>com.android.packageinstaller.InstallInstalling</h4><p>看下onCreate做了啥：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br><br>    setContentView(R.layout.install_installing);<br><br>    <span class="hljs-type">ApplicationInfo</span> <span class="hljs-variable">appInfo</span> <span class="hljs-operator">=</span> getIntent()<br>            .getParcelableExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO);<br>    mPackageURI = getIntent().getData();<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;package&quot;</span>.equals(mPackageURI.getScheme())) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            getPackageManager().installExistingPackage(appInfo.packageName);<br>            launchSuccess();<br>        &#125; <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;<br>            launchFailure(PackageManager.INSTALL_FAILED_INTERNAL_ERROR, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">File</span> <span class="hljs-variable">sourceFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(mPackageURI.getPath());<br>        PackageUtil.initSnippetForNewApp(<span class="hljs-built_in">this</span>, PackageUtil.getAppSnippet(<span class="hljs-built_in">this</span>, appInfo,<br>                sourceFile), R.id.app_snippet);<br><br>        <span class="hljs-keyword">if</span> (savedInstanceState != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//----1------</span><br>            mSessionId = savedInstanceState.getInt(SESSION_ID);<br>            mInstallId = savedInstanceState.getInt(INSTALL_ID);<br><br>            <span class="hljs-comment">// Reregister for result; might instantly call back if result was delivered while</span><br>            <span class="hljs-comment">// activity was destroyed</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                InstallEventReceiver.addObserver(<span class="hljs-built_in">this</span>, mInstallId,<br>                        <span class="hljs-built_in">this</span>::launchFinishBasedOnResult);<br>            &#125; <span class="hljs-keyword">catch</span> (EventResultPersister.OutOfIdsException e) &#123;<br>                <span class="hljs-comment">// Does not happen</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            PackageInstaller.<span class="hljs-type">SessionParams</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageInstaller</span>.SessionParams(<br>                    PackageInstaller.SessionParams.MODE_FULL_INSTALL);<br>            params.installFlags = PackageManager.INSTALL_FULL_APP;<br>            params.referrerUri = getIntent().getParcelableExtra(Intent.EXTRA_REFERRER);<br>            params.originatingUri = getIntent()<br>                    .getParcelableExtra(Intent.EXTRA_ORIGINATING_URI);<br>            params.originatingUid = getIntent().getIntExtra(Intent.EXTRA_ORIGINATING_UID,<br>                    UID_UNKNOWN);<br>            params.installerPackageName =<br>                    getIntent().getStringExtra(Intent.EXTRA_INSTALLER_PACKAGE_NAME);<br><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(mPackageURI.getPath());<br>            <span class="hljs-keyword">try</span> &#123;<br>                PackageParser.<span class="hljs-type">PackageLite</span> <span class="hljs-variable">pkg</span> <span class="hljs-operator">=</span> PackageParser.parsePackageLite(file, <span class="hljs-number">0</span>);<br>                params.setAppPackageName(pkg.packageName);<br>                params.setInstallLocation(pkg.installLocation);<br>                params.setSize(<br>                        PackageHelper.calculateInstalledSize(pkg, <span class="hljs-literal">false</span>, params.abiOverride));<br>            &#125; <span class="hljs-keyword">catch</span> (PackageParser.PackageParserException e) &#123;<br>                Log.e(LOG_TAG, <span class="hljs-string">&quot;Cannot parse package &quot;</span> + file + <span class="hljs-string">&quot;. Assuming defaults.&quot;</span>);<br>                Log.e(LOG_TAG,<br>                        <span class="hljs-string">&quot;Cannot calculate installed size &quot;</span> + file + <span class="hljs-string">&quot;. Try only apk size.&quot;</span>);<br>                params.setSize(file.length());<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                Log.e(LOG_TAG,<br>                        <span class="hljs-string">&quot;Cannot calculate installed size &quot;</span> + file + <span class="hljs-string">&quot;. Try only apk size.&quot;</span>);<br>                params.setSize(file.length());<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//-------2-------</span><br>                mInstallId = InstallEventReceiver<br>                        .addObserver(<span class="hljs-built_in">this</span>, EventResultPersister.GENERATE_NEW_ID,<br>                                <span class="hljs-built_in">this</span>::launchFinishBasedOnResult);<br>            &#125; <span class="hljs-keyword">catch</span> (EventResultPersister.OutOfIdsException e) &#123;<br>                launchFailure(PackageManager.INSTALL_FAILED_INTERNAL_ERROR, <span class="hljs-literal">null</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//-------3-------</span><br>                mSessionId = getPackageManager().getPackageInstaller().createSession(params);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                launchFailure(PackageManager.INSTALL_FAILED_INTERNAL_ERROR, <span class="hljs-literal">null</span>);<br>            &#125;<br>        &#125;<br><br>        mSessionCallback = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstallSessionCallback</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在onCreate方法中会对<code>package</code>和<code>content</code>协议的Uri进袭姑娘处理，我们关注一下content协议的uri处理部分:</p><p>首先判断savedInstanceState是否为空，不为空则从中获取mSessionId和mInstallId，然后向InstallEventReceiver注册一个观察者。</p><p>如果为空，则构建一个 PackageInstaller.SessionParams对象，在注释2处同样注册了一个观察者，然后在注释3处创建并返回sessionId</p><ul><li><p>这里创建mSessionId时，在createSession方法内部会通过<code>IPackageInstaller</code>与<code>PackageInstallerService</code>进行进程间通信，最终调用的是<code>PackageInstaller</code>的<code>createSession</code>方法来创建并返回的sessionId</p></li><li><p>这里注册的观察者是<code>launchFinishBasedOnResult</code>方法，根据安装结果不同，跳转到不同的页面(安装成功、安装失败)</p></li><li><p>这里的InstallEventReceiver是继承自BroadcastReceiver的广播接收器，可以看作是一个中间层，真正保存观察者的类是EventResultPersister，对于<code>EventResultPersister</code>注释是这样的：<strong>Persists results of events and calls back observers when a matching result arrives.</strong></p></li></ul><p>我们接着看InstallInstalling的onResume方法</p><h4 id="com-android-packageinstaller-InstallInstalling-1"><a href="#com-android-packageinstaller-InstallInstalling-1" class="headerlink" title="com.android.packageinstaller.InstallInstalling"></a>com.android.packageinstaller.InstallInstalling</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onResume();<br><br>    <span class="hljs-comment">// This is the first onResume in a single life of the activity</span><br>    <span class="hljs-keyword">if</span> (mInstallingTask == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">PackageInstaller</span> <span class="hljs-variable">installer</span> <span class="hljs-operator">=</span> getPackageManager().getPackageInstaller();<br>        PackageInstaller.<span class="hljs-type">SessionInfo</span> <span class="hljs-variable">sessionInfo</span> <span class="hljs-operator">=</span> installer.getSessionInfo(mSessionId);<br><br>        <span class="hljs-keyword">if</span> (sessionInfo != <span class="hljs-literal">null</span> &amp;&amp; !sessionInfo.isActive()) &#123;<br>            mInstallingTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstallingAsyncTask</span>();<br>            mInstallingTask.execute();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// we will receive a broadcast when the install is finished</span><br>            mCancelButton.setEnabled(<span class="hljs-literal">false</span>);<br>            setFinishOnTouchOutside(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>&#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Send the package to the package installer and then register a event result observer that</span><br><span class="hljs-comment">     * will call &#123;<span class="hljs-doctag">@link</span> #launchFinishBasedOnResult(int, int, String)&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstallingAsyncTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AsyncTask</span>&lt;Void, Void,<br>            PackageInstaller.Session&gt; &#123;<br>        <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> isDone;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> PackageInstaller.Session <span class="hljs-title function_">doInBackground</span><span class="hljs-params">(Void... params)</span> &#123;<br>            PackageInstaller.Session session;<br>            <span class="hljs-keyword">try</span> &#123;<br>                session = getPackageManager().getPackageInstaller().openSession(mSessionId);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            session.setStagingProgress(<span class="hljs-number">0</span>);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(mPackageURI.getPath());<br><br>                <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file)) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">sizeBytes</span> <span class="hljs-operator">=</span> file.length();<br>                    <span class="hljs-keyword">try</span> (<span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> session<br>                            .openWrite(<span class="hljs-string">&quot;PackageInstaller&quot;</span>, <span class="hljs-number">0</span>, sizeBytes)) &#123;<br>                        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>                        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">numRead</span> <span class="hljs-operator">=</span> in.read(buffer);<br><br>                            <span class="hljs-keyword">if</span> (numRead == -<span class="hljs-number">1</span>) &#123;<br>                                session.fsync(out);<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br><br>                            <span class="hljs-keyword">if</span> (isCancelled()) &#123;<br>                                session.close();<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br><br>                            out.write(buffer, <span class="hljs-number">0</span>, numRead);<br>                            <span class="hljs-keyword">if</span> (sizeBytes &gt; <span class="hljs-number">0</span>) &#123;<br>                                <span class="hljs-type">float</span> <span class="hljs-variable">fraction</span> <span class="hljs-operator">=</span> ((<span class="hljs-type">float</span>) numRead / (<span class="hljs-type">float</span>) sizeBytes);<br>                                session.addProgress(fraction);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> session;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException | SecurityException e) &#123;<br>                Log.e(LOG_TAG, <span class="hljs-string">&quot;Could not write package&quot;</span>, e);<br><br>                session.close();<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                    isDone = <span class="hljs-literal">true</span>;<br>                    notifyAll();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPostExecute</span><span class="hljs-params">(PackageInstaller.Session session)</span> &#123;<br>            <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">broadcastIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(BROADCAST_ACTION);<br>                broadcastIntent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND);<br>                broadcastIntent.setPackage(<br>                        getPackageManager().getPermissionControllerPackageName());<br>                broadcastIntent.putExtra(EventResultPersister.EXTRA_ID, mInstallId);<br><br>                <span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pendingIntent</span> <span class="hljs-operator">=</span> PendingIntent.getBroadcast(<br>                        InstallInstalling.<span class="hljs-built_in">this</span>,<br>                        mInstallId,<br>                        broadcastIntent,<br>                        PendingIntent.FLAG_UPDATE_CURRENT);<br><br>                session.commit(pendingIntent.getIntentSender());<br>                mCancelButton.setEnabled(<span class="hljs-literal">false</span>);<br>                setFinishOnTouchOutside(<span class="hljs-literal">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                getPackageManager().getPackageInstaller().abandonSession(mSessionId);<br><br>                <span class="hljs-keyword">if</span> (!isCancelled()) &#123;<br>                    launchFailure(PackageManager.INSTALL_FAILED_INVALID_APK, <span class="hljs-literal">null</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里根据mSessionId获取到安装会话的详细信息，如果sessionInfo不空并且是活动的，接着会创建<code>InstallingAsyncTask</code>任务并立即执行。该任务将APK信息通过IO流的形式写入 PackageInstaller.Session中。</p><p>之后，在onPostExecute方法中创建一个PendingIntent，并通过 PackageInstaller.Session 的commit方法将IntentSender发送出去。这里的 <code>PackageInstaller.Session.commit</code>方法，调用的是<code>IPackageInstallerSession</code>的commit方法，进行进程间通信，最终会调用PackageInstallerSession的commit方法。</p><h4 id="com-android-server-pm-PackageInstallerSession"><a href="#com-android-server-pm-PackageInstallerSession" class="headerlink" title="com.android.server.pm.PackageInstallerSession"></a>com.android.server.pm.PackageInstallerSession</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> IntentSender statusReceiver, <span class="hljs-type">boolean</span> forTransfer)</span> &#123;<br>     Preconditions.checkNotNull(statusReceiver);<br><br>     <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> wasSealed;<br>     <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>        <br>         <span class="hljs-keyword">final</span> <span class="hljs-type">PackageInstallObserverAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageInstallObserverAdapter</span>(<br>                 mContext, statusReceiver, sessionId,<br>                 isInstallerDeviceOwnerOrAffiliatedProfileOwnerLocked(), userId);<br>         mRemoteObserver = adapter.getBinder();<br><span class="hljs-comment">//·······省略一些代码·······//</span><br>         <span class="hljs-comment">// Client staging is fully done at this point</span><br>         mClientProgress = <span class="hljs-number">1f</span>;<br>         computeProgressLocked(<span class="hljs-literal">true</span>);<br><br>         <span class="hljs-comment">// This ongoing commit should keep session active, even though client</span><br>         <span class="hljs-comment">// will probably close their end.</span><br>         mActiveCount.incrementAndGet();<br><br>         mCommitted = <span class="hljs-literal">true</span>;<br>         mHandler.obtainMessage(MSG_COMMIT).sendToTarget();<br>     &#125;<br><br>     <span class="hljs-keyword">if</span> (!wasSealed) &#123;<br>         <span class="hljs-comment">// Persist the fact that we&#x27;ve sealed ourselves to prevent</span><br>         <span class="hljs-comment">// mutations of any hard links we create. We do this without holding</span><br>         <span class="hljs-comment">// the session lock, since otherwise it&#x27;s a lock inversion.</span><br>         mCallback.onSessionSealedBlocking(<span class="hljs-built_in">this</span>);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>在这里将相关信息封装为PackageInstallObserverAdapter对象，然后再向mHandler发送一个<code>MSG_COMMIT</code>的消息，在这个handler的callback中是这么处理的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Handler.<span class="hljs-type">Callback</span> <span class="hljs-variable">mHandlerCallback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>.Callback() &#123;<br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>           <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>         <br>               <span class="hljs-keyword">case</span> MSG_COMMIT:<br>                   <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>                       <span class="hljs-keyword">try</span> &#123;<br>                           commitLocked();<span class="hljs-comment">//-------1-------</span><br>                       &#125; <span class="hljs-keyword">catch</span> (PackageManagerException e) &#123;<br>                           <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">completeMsg</span> <span class="hljs-operator">=</span> ExceptionUtils.getCompleteMessage(e);<br>                           Slog.e(TAG,<br>                                   <span class="hljs-string">&quot;Commit of session &quot;</span> + sessionId + <span class="hljs-string">&quot; failed: &quot;</span> + completeMsg);<br>                           destroyInternal();<br>                           dispatchSessionFinished(e.error, completeMsg, <span class="hljs-literal">null</span>);<br>                       &#125;<br>                   &#125;<br>                   <span class="hljs-keyword">break</span>;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>   &#125;;<br></code></pre></td></tr></table></figure><p>在注释1处调用了commitLocked，在该方法中调用了PackageManagerService对象的installStage方法</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">mPm.installStage(mPackageName, stageDir, localObserver, params,<br><span class="hljs-built_in">        mInstallerPackageName,</span> mInstallerUid, user, mSigningDetails)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>在commitLocked方法中如果抛出了PackageManagerException，则会调用<code>dispatchSessionFinished</code>方法，向mHandler发送一个<code>MSG_ON_PACKAGE_INSTALLED</code>消息，调用<code>observer.onPackageInstalled(packageName, returnCode, message, extras);</code>这里的<code>observer</code>对象是<code>.PackageInstallerSession.commit</code>方法通过<code>adapter.getBinder()</code>方法获取到的<code>IPackageInstallObserver2</code>对象。</p><p>简单来讲，也就两个步骤：</p><ul><li>将APK信息通过IO流写入到PackageInstaller.Session中</li><li>调用PackageInstaller.Session的commit方法，发送消息到handler，最终交给PMS处理。</li></ul><h3 id="PMS介入安装过程"><a href="#PMS介入安装过程" class="headerlink" title="PMS介入安装过程"></a>PMS介入安装过程</h3><p>上面提到在commitLocked方法中，调用了<code>PackageManagerService</code>对象的installStage方法。老规矩，先看下<code>PackageManagerService</code>类的顶部注释，挺长的不贴了，主要介绍了两个锁对象以及这两个锁对象的使用方法注意事项。看下installStage方法</p><h4 id="com-android-server-pm-PackageManagerService"><a href="#com-android-server-pm-PackageManagerService" class="headerlink" title="com.android.server.pm.PackageManagerService"></a>com.android.server.pm.PackageManagerService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">installStage</span><span class="hljs-params">(String packageName, File stagedDir,</span><br><span class="hljs-params">                  IPackageInstallObserver2 observer, PackageInstaller.SessionParams sessionParams,</span><br><span class="hljs-params">                  String installerPackageName, <span class="hljs-type">int</span> installerUid, UserHandle user,</span><br><span class="hljs-params">                  PackageParser.SigningDetails signingDetails)</span> &#123;<br>    <span class="hljs-keyword">if</span> (DEBUG_INSTANT) &#123;<br>        <span class="hljs-keyword">if</span> ((sessionParams.installFlags &amp; PackageManager.INSTALL_INSTANT_APP) != <span class="hljs-number">0</span>) &#123;<br>            Slog.d(TAG, <span class="hljs-string">&quot;Ephemeral install of &quot;</span> + packageName);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">VerificationInfo</span> <span class="hljs-variable">verificationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VerificationInfo</span>(<br>        sessionParams.originatingUri, sessionParams.referrerUri,<br>        sessionParams.originatingUid, installerUid);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">OriginInfo</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> OriginInfo.fromStagedFile(stagedDir);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> mHandler.obtainMessage(INIT_COPY);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">installReason</span> <span class="hljs-operator">=</span> fixUpInstallReason(installerPackageName, installerUid,<br>                                                 sessionParams.installReason);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">InstallParams</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstallParams</span>(origin, <span class="hljs-literal">null</span>, observer,<br>                                                   sessionParams.installFlags, installerPackageName, sessionParams.volumeUuid,<br>                                                   verificationInfo, user, sessionParams.abiOverride,<br>                                                   sessionParams.grantedRuntimePermissions, signingDetails, installReason);<br>    params.setTraceMethod(<span class="hljs-string">&quot;installStage&quot;</span>).setTraceCookie(System.identityHashCode(params));<br>    msg.obj = params;<span class="hljs-comment">//-------1-------</span><br><br>    Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="hljs-string">&quot;installStage&quot;</span>,<br>                          System.identityHashCode(msg.obj));<br>    Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="hljs-string">&quot;queueInstall&quot;</span>,<br>                          System.identityHashCode(msg.obj));<br><br>    mHandler.sendMessage(msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是创建了一个类型为<code>INIT_COPY</code>的Message对象，然后通过发送到mHandler。注意注释1处的msg.obj的值，是一个<code>InstallParams</code>对象(继承自HandlerParams)，后面会用到。我们接着看mHanlder的处理</p><h4 id="com-android-server-pm-PackageManagerService-1"><a href="#com-android-server-pm-PackageManagerService-1" class="headerlink" title="com.android.server.pm.PackageManagerService"></a>com.android.server.pm.PackageManagerService</h4><p>这里的mHandler是继承自Handler的<code>PackageHandler</code>对象，是PMS的内部类，我们看下具体的处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">doHandleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>           <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>               <span class="hljs-keyword">case</span> INIT_COPY: &#123;<br>                   <span class="hljs-type">HandlerParams</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> (HandlerParams) msg.obj;<br>                   <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> mPendingInstalls.size();<br>                   <span class="hljs-keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="hljs-string">&quot;init_copy idx=&quot;</span> + idx + <span class="hljs-string">&quot;: &quot;</span> + params);<br>                   <span class="hljs-comment">// If a bind was already initiated we dont really</span><br>                   <span class="hljs-comment">// need to do anything. The pending install</span><br>                   <span class="hljs-comment">// will be processed later on.</span><br>                   <span class="hljs-keyword">if</span> (!mBound) &#123;<br>                       Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="hljs-string">&quot;bindingMCS&quot;</span>,<br>                               System.identityHashCode(mHandler));<br>                       <span class="hljs-comment">// If this is the only one pending we might</span><br>                       <span class="hljs-comment">// have to bind to the service again.</span><br>                       <span class="hljs-keyword">if</span> (!connectToService()) &#123;<br>                           Slog.e(TAG, <span class="hljs-string">&quot;Failed to bind to media container service&quot;</span>);<br>                           params.serviceError();<br>                           Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="hljs-string">&quot;bindingMCS&quot;</span>,<br>                                   System.identityHashCode(mHandler));<br>                           <span class="hljs-keyword">if</span> (params.traceMethod != <span class="hljs-literal">null</span>) &#123;<br>                               Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, params.traceMethod,<br>                                       params.traceCookie);<br>                           &#125;<br>                           <span class="hljs-keyword">return</span>;<br>                       &#125; <span class="hljs-keyword">else</span> &#123;<br>                           <span class="hljs-comment">// Once we bind to the service, the first</span><br>                           <span class="hljs-comment">// pending request will be processed.</span><br>                           mPendingInstalls.add(idx, params);<br>                       &#125;<br>                   &#125; <span class="hljs-keyword">else</span> &#123;<br>                       mPendingInstalls.add(idx, params);<br>                       <span class="hljs-comment">// Already bound to the service. Just make</span><br>                       <span class="hljs-comment">// sure we trigger off processing the first request.</span><br>                       <span class="hljs-keyword">if</span> (idx == <span class="hljs-number">0</span>) &#123;<br>                           mHandler.sendEmptyMessage(MCS_BOUND);<br>                       &#125;<br>                   &#125;<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>           &#125;<br></code></pre></td></tr></table></figure><p>mBound表示是否绑定了<code>DefaultContainerService</code>服务，没有绑定的话则重新绑定，绑定成功后则将参数添加到<code>mPendingInstalls</code>中等待处理；</p><p>绑定服务的代码在这里:<code>DefaultContainerConnection</code>也是PMS的内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">private</span> <span class="hljs-type">DefaultContainerConnection</span> <span class="hljs-variable">mDefContainerConn</span> <span class="hljs-operator">=</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultContainerConnection</span>();<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultContainerConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServiceConnection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceConnected</span><span class="hljs-params">(ComponentName name, IBinder service)</span> &#123;<br>        <span class="hljs-keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="hljs-string">&quot;onServiceConnected&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">IMediaContainerService</span> <span class="hljs-variable">imcs</span> <span class="hljs-operator">=</span> IMediaContainerService.Stub<br>                .asInterface(Binder.allowBlocking(service));<br>        mHandler.sendMessage(mHandler.obtainMessage(MCS_BOUND, imcs));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceDisconnected</span><span class="hljs-params">(ComponentName name)</span> &#123;<br>        <span class="hljs-keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="hljs-string">&quot;onServiceDisconnected&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，绑定成功后会发送一个类型为<code>MCS_BOUND</code>的Message对象到mHandler。当然这里发送的消息是带有Object参数，而上面<code>INIT_COPY</code>中的最后发送的消息是不带有Object参数的。</p><p>这里我们直接探讨正常流程，也就是服务已经绑定，并且mPendingInstalls中有待处理的数据，也就是走<code>INIT_COPY</code>中的最后一条分支。</p><p>这时候在PackageHandler里面会走这个分支：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mPendingInstalls.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-type">HandlerParams</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> mPendingInstalls.get(<span class="hljs-number">0</span>);<br>                        <span class="hljs-keyword">if</span> (params != <span class="hljs-literal">null</span>) &#123;<br>                            Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="hljs-string">&quot;queueInstall&quot;</span>,<br>                                    System.identityHashCode(params));<br>                            Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="hljs-string">&quot;startCopy&quot;</span>);<br>                            <span class="hljs-keyword">if</span> (params.startCopy()) &#123;<br>                                <span class="hljs-comment">// We are done...  look for more work or to</span><br>                                <span class="hljs-comment">// go idle.</span><br>                                <span class="hljs-keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,<br>                                        <span class="hljs-string">&quot;Checking for more work or unbind...&quot;</span>);<br>                                <span class="hljs-comment">// Delete pending install</span><br>                                <span class="hljs-keyword">if</span> (mPendingInstalls.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                                    mPendingInstalls.remove(<span class="hljs-number">0</span>);<br>                                &#125;<br>                                <span class="hljs-keyword">if</span> (mPendingInstalls.size() == <span class="hljs-number">0</span>) &#123;<br>                                    <span class="hljs-keyword">if</span> (mBound) &#123;<br>                                        <span class="hljs-keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,<br>                                                <span class="hljs-string">&quot;Posting delayed MCS_UNBIND&quot;</span>);<br>                                        removeMessages(MCS_UNBIND);<br>                                        <span class="hljs-type">Message</span> <span class="hljs-variable">ubmsg</span> <span class="hljs-operator">=</span> obtainMessage(MCS_UNBIND);<br>                                        <span class="hljs-comment">// Unbind after a little delay, to avoid</span><br>                                        <span class="hljs-comment">// continual thrashing.</span><br>                                        sendMessageDelayed(ubmsg, <span class="hljs-number">10000</span>);<br>                                    &#125;<br>                                &#125; <span class="hljs-keyword">else</span> &#123;<br>                                    <span class="hljs-comment">// There are more pending requests in queue.</span><br>                                    <span class="hljs-comment">// Just post MCS_BOUND message to trigger processing</span><br>                                    <span class="hljs-comment">// of next pending install.</span><br>                                    <span class="hljs-keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,<br>                                            <span class="hljs-string">&quot;Posting MCS_BOUND for next work&quot;</span>);<br>                                    mHandler.sendEmptyMessage(MCS_BOUND);<br>                                &#125;<br>                            &#125;<br>                            Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);<br>                        &#125;<br>                    &#125;<br></code></pre></td></tr></table></figure><p>调用<code>params.startCopy()</code>之后，会将当前安装任务从列表中移除，接着处理下一个安装任务；这里的params是上面说到的<code>InstallParams</code>实例。</p><p>看下<code>HandlerParams.startCopy</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startCopy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> res;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="hljs-string">&quot;startCopy &quot;</span> + mUser + <span class="hljs-string">&quot;: &quot;</span> + <span class="hljs-built_in">this</span>);<br><br>        <span class="hljs-keyword">if</span> (++mRetries &gt; MAX_RETRIES) &#123;<br>            Slog.w(TAG, <span class="hljs-string">&quot;Failed to invoke remote methods on default container service. Giving up&quot;</span>);<br>            mHandler.sendEmptyMessage(MCS_GIVE_UP);<br>            handleServiceError();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            handleStartCopy();<br>            res = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        <span class="hljs-keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="hljs-string">&quot;Posting install MCS_RECONNECT&quot;</span>);<br>        mHandler.sendEmptyMessage(MCS_RECONNECT);<br>        res = <span class="hljs-literal">false</span>;<br>    &#125;<br>    handleReturnCode();<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的MAX_RETRIES值被定义为4，尝试次数超过4次，则放弃这个安装请求。如果没有超过，则执行<code>handleStartCopy</code>方法，该方法的具体实现在<code>InstallParams</code>中。该方法的具体实现代码很长，这里抄一下注释</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Invoke remote method to get package information and install</span><br><span class="hljs-comment"> * location values. Override install location based on default</span><br><span class="hljs-comment"> * policy if needed and then create install arguments based</span><br><span class="hljs-comment"> * on the install location.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>通过IMediaContainerService跨进程调用DefaultContainerService的getMinimalPackageInfo方法，轻量级解析apk并获取到apk的少量信息，封装到PackageInfoLite对象中。然后确认安装未知，创建InstallArgs对象。这里的InstallArgs是个抽象类，在PMS有三个对应的子类：</p><ul><li>FileInstallArgs:处理安装到非ASEC存储空间的APK，也就是内部存储空间(Data分区)</li><li>AsecInstallArgs:处理安装到ASEC中(mnt&#x2F;asec，也就是存储卡)中的apk</li><li>MoveInstallArgs:处理已安装的APK在存储中移动的逻辑</li></ul><p>复制完成后，会接着调用<code>handleReturnCode</code>方法，该方法中只是调用了<code>processPendingInstall</code>方法，看下这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">mHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>               mHandler.removeCallbacks(<span class="hljs-built_in">this</span>);<br>                <span class="hljs-comment">// Result object to be returned</span><br>               <span class="hljs-type">PackageInstalledInfo</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageInstalledInfo</span>();<br>               res.setReturnCode(currentStatus);<br>               res.uid = -<span class="hljs-number">1</span>;<br>               res.pkg = <span class="hljs-literal">null</span>;<br>               res.removedInfo = <span class="hljs-literal">null</span>;<br>               <span class="hljs-keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;<br>                   args.doPreInstall(res.returnCode);<span class="hljs-comment">//-------1-------</span><br>                   <span class="hljs-keyword">synchronized</span> (mInstallLock) &#123;<br>                       installPackageTracedLI(args, res);<span class="hljs-comment">//-------2-------</span><br>                   &#125;<br>                   args.doPostInstall(res.returnCode, res.uid);<span class="hljs-comment">//-------3-------</span><br>               &#125;<br>               ......<br>           &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>注释1处会检查apk状态，确保安装环境可靠，否则清除复制的apk文件，在注释3处进行安装后的收尾工作；</p><p>主要看下注释2处的方法，该方法内部会调用PMS的installPackageLI方法，这个方法也挺长的，简单说下这个方法做了什么：</p><ul><li>创建PackageParser，解析apk</li><li>检查APK是否已经安装</li><li>如果PackageSetting中存在要安装的apk信息，则表示要替换安装，需要进行签名校验，确保替换安装是安全的</li><li>如果是替换安装，则调用replacePackageLIF方法，如果是安装新的apk，调用installNewPackageLIF方法。</li></ul><p>我们以安装新的apk为例</p><ol><li>扫描APK，将apk信息存储在PackageParser.Package类型的newPackage中，一个Package的信息包含了一个base apk和N个split APK</li><li>更新该APK对应的PackageSetting信息</li><li>如果安装成功，则为新应用准备数据；如果安装失败，则删除APK</li></ol><p>总结一下</p><ol><li>PackageINstaller安装APK时会将APK的信息交由PMS处理，PMS则通过PackageHandler发送消息来驱动APK的复制和安装工作</li><li>PMS发送INIT_COPY和MCS_BOUND类型的消息，驱动PackageHandler来绑定DefaultContainerService，完成APK的复制等工作</li><li>进行APK的安装前检查，安装APK及安装后的收尾工作</li></ol><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先从如何使用代码安装一个apk开始。&lt;/p&gt;
&lt;p&gt;在7.0之前，我们可以直接指定apk的路径进行安装&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(Intent.Action_View);&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;/sdcard/a.apk&amp;quot;&lt;/span&gt;;&lt;br&gt;intent.setDataAndType(Uri.parse(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;file://&amp;quot;&lt;/span&gt; + filepath),&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;application/vnd.android.package-archive&amp;quot;&lt;/span&gt;);&lt;br&gt;startActivity(intent);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在7.0及以后，需要使用FileProvider进行安装&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;apk&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;File&lt;/span&gt;(...);&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(Intent.ACTION_VIEW);&lt;br&gt;intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&lt;br&gt;intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; FileProvider.getUriForFile(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;com.example.demo.fileprovider&amp;quot;&lt;/span&gt;, apk);&lt;br&gt;intent.setDataAndType(uri, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;application/vnd.android.package-archive&amp;quot;&lt;/span&gt;);&lt;br&gt;startActivity(intent);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不管是哪个版本，我们都需要调用&lt;code&gt;intent.setDataAndType&lt;/code&gt;方法，我们在aosp源码中找到了对应的Activity：在&lt;code&gt;packages/apps/PackageInstaller&lt;/code&gt;文件夹下&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;.InstallStart&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-tag&quot;&gt;          &lt;span class=&quot;hljs-attr&quot;&gt;android:exported&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-tag&quot;&gt;          &lt;span class=&quot;hljs-attr&quot;&gt;android:excludeFromRecents&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;intent-filter&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:priority&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;android.intent.action.VIEW&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;android.intent.action.INSTALL_PACKAGE&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;android.intent.category.DEFAULT&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:scheme&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:scheme&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:mimeType&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;application/vnd.android.package-archive&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;intent-filter&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:priority&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;android.intent.action.INSTALL_PACKAGE&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;android.intent.category.DEFAULT&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:scheme&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:scheme&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;package&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:scheme&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;intent-filter&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:priority&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;android.content.pm.action.CONFIRM_PERMISSIONS&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;android.intent.category.DEFAULT&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android启动过程</title>
    <link href="https://blog.huangyuanlove.com/2021/03/04/Android%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://blog.huangyuanlove.com/2021/03/04/Android%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2021-03-04T04:12:36.000Z</published>
    <updated>2023-05-19T12:51:02.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android启动过程"><a href="#Android启动过程" class="headerlink" title="Android启动过程"></a>Android启动过程</h2><p>从Zygote启动过程开始，省略掉了前面的解析.rc文件等步骤</p><span id="more"></span><h4 id="Zygote-启动过程"><a href="#Zygote-启动过程" class="headerlink" title="Zygote 启动过程"></a>Zygote 启动过程</h4><div id="sequence-0"></div><p><img src="/image/Android/aosp/zygote_start.png" alt="zygote_startr"></p><p>解释一下：</p><ol><li>解析init.zygote.rc中的参数，创建AppRuntime并调用AppRuntime.start()方法</li><li>调用AndroidRuntime的startVM()方法创建虚拟机，再调用startReg()注册JNI函数</li><li>通过JNI方式调用ZygoteInit.main()，第一次进入java世界</li><li>registerZygoteSocket()建立socket通道，zygote作为通信的服务端，用于响应客户端请求</li><li>preload()预加载通用类、drawable和color资源、openGL以及共享库以及WebView，用于提高app启动效率</li><li>zygote完成大部分工作，接下来再通过startSystemServer(),fork得力助手system-server进行，也是上层framework的运行载体</li><li>zygote功成身退，调用runSelectLoop()，随时待命，当接收到请求创建新进行请求时立即唤醒并执行相应工作。</li></ol><h4 id="SystemService-启动流程"><a href="#SystemService-启动流程" class="headerlink" title="SystemService 启动流程"></a>SystemService 启动流程</h4><p><img src="/image/Android/aosp/start_system_server.png" alt="start_system_server"></p><p>上图前4个步骤运行在Zygote进行，从第五步开始是运行在新创建的system_server,这是fork机制实现的。</p><p>RuntimeInit.java 中 invokeStaticMain 方法通过创建并抛出异常 ZygoteInit.MethodAndArgsCaller，在 ZygoteInit.java 中的 main()方法会捕捉该异常，并调用 caller.run()，再通过反射便会调用到 SystemServer.main()方法，在该方法中创建SystemServer对象并执行run方法。<br>在该方法中执行了如下操作</p><ul><li><p>设置系统时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (System.currentTimeMillis() &lt; EARLIEST_SUPPORTED_TIME) &#123;<br>              Slog.w(TAG, <span class="hljs-string">&quot;System clock is before 1970; setting to 1970.&quot;</span>);<br>              SystemClock.setCurrentTimeMillis(EARLIEST_SUPPORTED_TIME);<br>          &#125;<br></code></pre></td></tr></table></figure></li><li><p>变更虚拟机库文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SystemProperties.set(<span class="hljs-string">&quot;persist.sys.dalvik.vm.lib.2&quot;</span>, VMRuntime.getRuntime().vmLibrary());<br></code></pre></td></tr></table></figure></li><li><p>Mmmmmm… more memory!（清除vm内存增长限制）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">VMRuntime.getRuntime().clearGrowthLimit();<br></code></pre></td></tr></table></figure></li><li><p>Prepare the main looper thread (this thread)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">android.os.Process.setThreadPriority(<br>             android.os.Process.THREAD_PRIORITY_FOREGROUND);<br>         android.os.Process.setCanSelfBackground(<span class="hljs-literal">false</span>);<br>         Looper.prepareMainLooper();<br>         Looper.getMainLooper().setSlowLogThresholdMs(<br>                 SLOW_DISPATCH_THRESHOLD_MS, SLOW_DELIVERY_THRESHOLD_MS);<br></code></pre></td></tr></table></figure></li><li><p>Initialize native services</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.loadLibrary(<span class="hljs-string">&quot;android_servers&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>检测上次关机过程是否失败，该方法可能不会返回</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">performPendingShutdown();<br></code></pre></td></tr></table></figure></li><li><p>Initialize the system context</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">createSystemContext();<span class="hljs-comment">//这里需要区分system_server进程和app进程：http://gityuan.com/2017/04/02/android-application/</span><br></code></pre></td></tr></table></figure></li><li><p>Create the system service manager</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">mSystemServiceManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemServiceManager</span>(mSystemContext);<br><span class="hljs-comment">//将 mSystemServiceManager 添加到本地服务的成员 sLocalServiceObjects</span><br>LocalServices.addService(SystemServiceManager.class, mSystemServiceManage<br>r);<br></code></pre></td></tr></table></figure><ul><li>Start services  startBootstrapServices();<blockquote><p>该方法所创建的服务:DeviceIdentifiersPolicyService、ActivityManagerService、PowerManagerService、RecoverySystemService、LightsService、DisplayManagerService、PackageManagerService、 UserManagerService、 SensorService.</p></blockquote><p>  startCoreServices();</p><blockquote><p>启动服务 BatteryService，UsageStatsService，WebViewUpdateService。</p></blockquote><p>  startOtherServices();</p><blockquote><p>这里启动的服务挺多的，捡主要的写一下：VibratorService、NetworkManagementService、IpSecService、NetworkStatsService、WindowManagerService、InputManagerService、AlarmManagerService</p></blockquote></li></ul><p>SystemServer 启动各种服务中最后的一个环节便是 AMS.systemReady()，到此, System_server 主线程的启动工作总算完成, 进入 Looper.loop()状态,等待 其他线程通过 handler 发送消息到主线再处理。<script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">title:Zygote启动过程participant App_main.cppparticipant AndroidRuntime.cppparticipant ZygoteInit.javaparticipant ZygoteConnection.javaparticipant Zygote.javaApp_main.cpp -> App_main.cpp : 1:mainApp_main.cpp -> AndroidRuntime.cpp: 2:startAndroidRuntime.cpp -> AndroidRuntime.cpp:3:startVMAndroidRuntime.cpp -> AndroidRuntime.cpp: 4:startRegAndroidRuntime.cpp -> ZygoteInit.java: 5:mainZygoteInit.java -> ZygoteInit.java : 6:registerZygoteSocketZygoteInit.java -> ZygoteInit.java : 7:preloadZygoteInit.java -> ZygoteInit.java : 8:startSystemServerZygoteInit.java -> Zygote.java : 9:forkSystemServerZygoteInit.java -> ZygoteInit.java : 10:runSelectLoopZygoteInit.java -> ZygoteConnection.java: 11:runOnceZygoteConnection.java -> Zygote.java: 12:forkAndSpecialize</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Android启动过程&quot;&gt;&lt;a href=&quot;#Android启动过程&quot; class=&quot;headerlink&quot; title=&quot;Android启动过程&quot;&gt;&lt;/a&gt;Android启动过程&lt;/h2&gt;&lt;p&gt;从Zygote启动过程开始，省略掉了前面的解析.rc文件等步骤&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>写在2021年初-2020总结</title>
    <link href="https://blog.huangyuanlove.com/2021/01/02/%E5%86%99%E5%9C%A82021%E5%B9%B4%E5%88%9D-2020%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.huangyuanlove.com/2021/01/02/%E5%86%99%E5%9C%A82021%E5%B9%B4%E5%88%9D-2020%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-02T13:58:47.000Z</published>
    <updated>2023-05-19T12:51:02.240Z</updated>
    
    <content type="html"><![CDATA[<p>2020年，多灾多难的一年，但是在这一年完成了人生的一件大事：举办了婚礼.</p><span id="more"></span><h4 id="2020年干了啥"><a href="#2020年干了啥" class="headerlink" title="2020年干了啥"></a>2020年干了啥</h4><ul><li>了解了以下Android Jetpack</li><li>重温数据结构，看了点算法课程</li><li>简单的学了iOS开发</li><li>简单学习了正则</li><li>简单了解鸿蒙应用开发</li><li>了解Gradle插件开发</li></ul><p>《软技能 代码之外的生存指南》</p><p>《代码整洁之道》</p><p>《Android设计模式之禅》</p><p>总体来看，似乎也没干啥</p><h4 id="2021年目标"><a href="#2021年目标" class="headerlink" title="2021年目标"></a>2021年目标</h4><ol><li>Android系统架构、启动流程、系统服务</li><li>算法，一定要刷题</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;2020年，多灾多难的一年，但是在这一年完成了人生的一件大事：举办了婚礼.&lt;/p&gt;</summary>
    
    
    
    
    <category term="乱七八糟" scheme="https://blog.huangyuanlove.com/tags/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio插件开发</title>
    <link href="https://blog.huangyuanlove.com/2020/12/13/AndroidStudio%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>https://blog.huangyuanlove.com/2020/12/13/AndroidStudio%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</id>
    <published>2020-12-13T14:42:42.000Z</published>
    <updated>2023-05-19T12:51:02.210Z</updated>
    
    <content type="html"><![CDATA[<p>写了个类似<code>Butter Knife</code>的<a href="https://github.com/huangyuanlove/AndroidAnnotation">开发库</a>，但是并没有与其配套的AndroidStudio插件，抽时间研究了以下IDEA的api文档，撸了一个对应的插件，<a href="https://github.com/huangyuanlove/AndroidAnnotation-Plugin">源码在这里</a></p><p>代码参考<a href="https://github.com/avast/android-butterknife-zelezny">https://github.com/avast/android-butterknife-zelezny</a></p><p>所用到的知识点：</p><ol><li>查找文件</li><li>解析xml</li><li>写文件<br>IDEA插件开发文档：<a href="https://jetbrains.org/intellij/sdk/docs/intro/welcome.html">https://jetbrains.org/intellij/sdk/docs/intro/welcome.html</a><span id="more"></span></li></ol><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>官方推荐创建gradle项目，这里贴个图，创建过程按照官网叙述的创建就好</p><p><a href="https://jetbrains.org/intellij/sdk/docs/tutorials/build_system/prerequisites.html">https://jetbrains.org/intellij/sdk/docs/tutorials/build_system/prerequisites.html</a></p><p>这里说明一下，如果想要在AndroidStudio中进行debug，阅读一下这个</p><p><a href="https://jetbrains.org/intellij/sdk/docs/products/android_studio.html">https://jetbrains.org/intellij/sdk/docs/products/android_studio.html</a></p><p>也就是在项目根目录的的<code>build.gradle</code>中配置 <code>intellij</code>和<code>runIde</code>，具体含义可在网页中找到，这里不再赘述</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// See https://github.com/JetBrains/gradle-intellij-plugin/</span><br>intellij &#123;<br>    version <span class="hljs-string">&#x27;201.8743.12&#x27;</span><br>    type <span class="hljs-string">&#x27;IC&#x27;</span><br>    plugins = [<span class="hljs-string">&#x27;android&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>]<br>&#125;<br>runIde &#123;<br>    <span class="hljs-comment">// Absolute path to installed target 3.5 Android Studio to use as IDE Development Instance</span><br>    <span class="hljs-comment">// The &quot;Contents&quot; directory is macOS specific.</span><br><span class="hljs-comment">//    ideDirectory &#x27;/Applications/Android Studio.app/Contents&#x27; //for mac</span><br><span class="hljs-comment">//    ideDirectory &#x27;/home/huangyuan/androidStudio&#x27; //for linux</span><br>    ideDirectory <span class="hljs-string">&#x27;G:\\AndroidStudio&#x27;</span> <span class="hljs-comment">//for window</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/Android/AndroidStudioPlugin/create_plugin_gradle.png" alt="create_plugin_gradle"></p><h4 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h4><p>创建一个继承AnAction 的类，这里创建的方式有两种，一个是直接创建java类，然后再去注册；另外一个就是通过想到直接创建(就像我们创建Activity一样)；</p><p>具体可以看这里 <a href="https://jetbrains.org/intellij/sdk/docs/tutorials/action_system/working_with_custom_actions.html">https://jetbrains.org/intellij/sdk/docs/tutorials/action_system/working_with_custom_actions.html</a></p><p>这里我们需要解析layout文件(xml文件)并且还要写入文件，所以就直接继承<code>BaseGenerateAction</code>，重写其中的两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> AnActionEvent e)</span> &#123;<br>   <span class="hljs-comment">// Using the event, evaluate the context, and enable or disable the action.</span><br>    e.getPresentation().setEnabledAndVisible(e.getProject() != <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> AnActionEvent event)</span> &#123;<br>    <span class="hljs-comment">// Using the event, implement an action. For example, create and show a dialog.</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当工程处于indexing的时候，我们不想让插件生效，可以实现<code>DumbAware</code>接口，继续向<code>actionPerformed</code>方法中添加逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> AnActionEvent event)</span> &#123;<br>    <span class="hljs-comment">//获取工程对象，具体信息可以看这里 https://jetbrains.org/intellij/sdk/docs/basics/project_structure.html</span><br>    <span class="hljs-type">Project</span> <span class="hljs-variable">project</span> <span class="hljs-operator">=</span> event.getData(PlatformDataKeys.PROJECT);<br>    <span class="hljs-keyword">if</span>(project ==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">Editor</span> <span class="hljs-variable">editor</span> <span class="hljs-operator">=</span> event.getData(PlatformDataKeys.EDITOR);<br>    <span class="hljs-keyword">if</span>(editor ==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">DumbService</span> <span class="hljs-variable">dumbService</span> <span class="hljs-operator">=</span> DumbService.getInstance(project);<br>    <span class="hljs-keyword">if</span> (dumbService.isDumb()) &#123;<br>        dumbService.showDumbModeNotification(<span class="hljs-string">&quot;ViewInject plugin is not available during indexing&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//这里是我们自己的逻辑</span><br>    analyze(project, editor);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h4><p>我们可以获取到当前光标所指向的位置，也可以获取当前选中的字符，我们从官方文档中找到我们自己需要的东西：需要看一下PSI(Program Structure Interface),具体信息在这里<a href="https://jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi.html">https://jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi.html</a></p><p>关键信息在<a href="https://jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi_elements.html">PSI element</a> 和 <a href="https://jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi_files.html">PSI Files</a>，项目的中的具体逻辑在<code>GetLayoutFileUtil.java</code>，这里比较麻烦一些，用到了<code>Module</code>和<code>GlobalSearchScope</code>这两个类，<a href="https://jetbrains.org/intellij/sdk/docs/reference_guide/project_model/module.html">具体可以看这里https://jetbrains.org/intellij/sdk/docs/reference_guide&#x2F;project_model&#x2F;module.html</a>，就不再抄一遍+翻译了</p><h4 id="解析文件"><a href="#解析文件" class="headerlink" title="解析文件"></a>解析文件</h4><p>这里我们拿到了对应的<code>layout.xml</code>文件对象，一个<code>PsiFile</code>对象，调用文件的遍历方法<code>layoutFile.accept(PsiElementVisitor visitor)</code>，这里我们传入<code>XmlRecursiveElementVisitor</code>实例对象，在解析xml的过程中，我们可能会遇到<code>&lt;include&gt;</code>标签，需要继续解析该标签下的xml文件，这里搞个递归。</p><h4 id="展示解析内容"><a href="#展示解析内容" class="headerlink" title="展示解析内容"></a>展示解析内容</h4><p>解析出来的数据存入ArrayList中，在解析过程中，保存了对应id、判断是否引用了android name space中id、将id的值转化为对应的字段名字、保存了是是否为自定义的view等信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String id;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isAndroidNS</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">public</span> String nameFull; <span class="hljs-comment">// element name with package</span><br><span class="hljs-keyword">public</span> String name; <span class="hljs-comment">// element name</span><br><span class="hljs-keyword">public</span> String fieldName; <span class="hljs-comment">// name of variable</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isValid</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">used</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isClick</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>展示解析内容使用<code>javax.swing</code>组件，这个也没什么好说的。</p><p><img src="/image/Android/AndroidStudioPlugin/AndroidAnnotation.png" alt="show_android_annotation_info"></p><p>在展示面板上提供的全选功能；提供了生成代码的两种格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@BindView(idStr = &quot;xxxx&quot;)</span> <span class="hljs-comment">//可在library、application中使用</span><br><span class="hljs-meta">@BindView(id = R.id.xxx)</span> <span class="hljs-comment">//仅在application中使用</span><br></code></pre></td></tr></table></figure><p>因为在library中生成的R文件中的变量不是final类型，并且application中的R文件变量，在gradle plugin  5.0之后也不再是final的，所以建议使用idStr的方式，也是默认生成的代码</p><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><p>为了方便，写入文件的时候使用的是<code>PsiClass</code>对象进行操作的，<a href="https://upsource.jetbrains.com/idea-ce/file/idea-ce-4b94ba01122752d7576eb9d69638b6e89d1671b7/java/java-psi-api/src/com/intellij/psi/PsiClass.java">源码在这里</a>，至于如何操作PsiFile，<a href="https://jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi.html">可以看这里</a>。写入文件的过程，看起来个使用<code>javapoet</code>差不多，<a href="https://github.com/square/javapoet">javapoet可以看这里，github上直接搜索即可</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateClick</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">for</span> (ElementBean element : mElements) &#123;<br>    <span class="hljs-keyword">if</span> (element.isClick) &#123;<br>      <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>      method.append(<span class="hljs-string">&quot;@ClickResponder(&quot;</span> + element.getGenerateValue(generateId) + <span class="hljs-string">&quot;)&quot;</span>);<br>      method.append(<span class="hljs-string">&quot;public void onClick&quot;</span> + Utils.capitalize(element.fieldName) + <span class="hljs-string">&quot; (View v) &#123;&#125;&quot;</span>);<br>      mClass.add(mFactory.createMethodFromText(method.toString(), mClass));<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在写入类字段的时候，需要判断是否需要添加前缀，在<code>Constant</code>中列举了一些需要特殊处理的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateFields</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (ElementBean element : mElements) &#123;<br>        <span class="hljs-keyword">if</span> (!element.used) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">injection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        injection.append(<span class="hljs-string">&quot;@BindView&quot;</span>);<br>        injection.append(<span class="hljs-string">&#x27;(&#x27;</span>);<br>        injection.append(element.getGenerateValue(generateId));<br>        injection.append(<span class="hljs-string">&quot;)&quot;</span>);<br>        <span class="hljs-keyword">if</span> (element.nameFull != <span class="hljs-literal">null</span> &amp;&amp; element.nameFull.length() &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// custom package+class</span><br>            injection.append(element.nameFull);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Constant.paths.containsKey(element.name)) &#123; <span class="hljs-comment">// listed class</span><br>            injection.append(Constant.paths.get(element.name));<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// android.widget</span><br>            injection.append(<span class="hljs-string">&quot;android.widget.&quot;</span>);<br>            injection.append(element.name);<br>        &#125;<br>        injection.append(<span class="hljs-string">&quot; &quot;</span>);<br>        injection.append(element.fieldName);<br>        injection.append(<span class="hljs-string">&quot;;&quot;</span>);<br>        mClass.add(mFactory.createFieldFromText(injection.toString(), mClass));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写入完成后格式化一下代买，要不然写入的字段会是这样：<code>android.widget.TextView userNameTextView</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JavaCodeStyleManager</span> <span class="hljs-variable">styleManager</span> <span class="hljs-operator">=</span> JavaCodeStyleManager.getInstance(mProject);<br>styleManager.optimizeImports(mFile);<br>styleManager.shortenClassReferences(mClass);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ReformatCodeProcessor</span>(mProject, mClass.getContainingFile(), <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>).runWithoutProgress();<br></code></pre></td></tr></table></figure><p>到此为止，就已经完成了我们的工作。</p><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;写了个类似&lt;code&gt;Butter Knife&lt;/code&gt;的&lt;a href=&quot;https://github.com/huangyuanlove/AndroidAnnotation&quot;&gt;开发库&lt;/a&gt;，但是并没有与其配套的AndroidStudio插件，抽时间研究了以下IDEA的api文档，撸了一个对应的插件，&lt;a href=&quot;https://github.com/huangyuanlove/AndroidAnnotation-Plugin&quot;&gt;源码在这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码参考&lt;a href=&quot;https://github.com/avast/android-butterknife-zelezny&quot;&gt;https://github.com/avast/android-butterknife-zelezny&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所用到的知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查找文件&lt;/li&gt;
&lt;li&gt;解析xml&lt;/li&gt;
&lt;li&gt;写文件&lt;br&gt;IDEA插件开发文档：&lt;a href=&quot;https://jetbrains.org/intellij/sdk/docs/intro/welcome.html&quot;&gt;https://jetbrains.org/intellij/sdk/docs/intro/welcome.html&lt;/a&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
    <category term="Plugin" scheme="https://blog.huangyuanlove.com/tags/Plugin/"/>
    
  </entry>
  
  <entry>
    <title>gradle自定义插件</title>
    <link href="https://blog.huangyuanlove.com/2020/11/26/gradle%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/"/>
    <id>https://blog.huangyuanlove.com/2020/11/26/gradle%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/</id>
    <published>2020-11-25T23:06:31.000Z</published>
    <updated>2023-05-19T12:51:02.234Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.huangyuanlove.com/2018/11/09/groovy%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/">groovy 语法入门</a><br><a href="https://blog.huangyuanlove.com/2018/11/11/gradle%E5%9F%BA%E7%A1%80/">gradle 基础</a><br><a href="https://blog.huangyuanlove.com/2018/11/19/gradle%E4%BB%BB%E5%8A%A1/">gradle 任务</a><br><a href="https://blog.huangyuanlove.com/2018/12/09/gradle%E6%8F%92%E4%BB%B6/">gradle 插件</a><br><a href="https://blog.huangyuanlove.com/2018/12/19/gradle-java%E6%8F%92%E4%BB%B6/">gradle-java 插件</a><br><a href="https://blog.huangyuanlove.com/2018/12/22/gradle-android%E6%8F%92%E4%BB%B6/">gradle-android 插件</a></p><p>前面简单的写了点关于gradle的以及gradle插件的东西,现在我们来看一下如何自定义插件,<strong>本篇文章是基于AndroidStudio、Android工程进行讲述</strong>。</p><span id="more"></span><h4 id="存放插件源码"><a href="#存放插件源码" class="headerlink" title="存放插件源码"></a>存放插件源码</h4><p>我们可以在以下几个地方存放我们的插件源码</p><h5 id="Build-Script"><a href="#Build-Script" class="headerlink" title="Build Script"></a>Build Script</h5><p>每个module中都会有build.gradle文件，我们可以在该文件中编写一些所需要的插件功能，好处是可以被自动编译并且包含在构建脚本的class path中(项目根目录下的build.gradle中buildScript中使用classPath依赖的插件)，坏处是不能被其他模块访问，插件功能没办法重用。</p><h5 id="buildSrc-Module"><a href="#buildSrc-Module" class="headerlink" title="buildSrc Module"></a><code>buildSrc</code> Module</h5><p>根据所选语言的不同，我们可以把插件代码放在<code>rootProjectDir/buildSrc/src/main/java</code>、<code>rootProjectDir/buildSrc/src/main/groovy</code>、<code>rootProjectDir/buildSrc/src/main/kotlin</code> 文件夹下，同样的，我们也不需要做额外的操作就可以在其他module中使用，但是不能在其他项目中引用</p><h5 id="Standalone-Project"><a href="#Standalone-Project" class="headerlink" title="Standalone Project"></a>Standalone Project</h5><p>我们可以为插件单独创建一个项目或者一个module，将它编译为jar包或者其他形式发布出去，使得其他项目可以引用</p><h4 id="编写插件代码"><a href="#编写插件代码" class="headerlink" title="编写插件代码"></a>编写插件代码</h4><h5 id="先看下写在Build-Script中的构建脚本。"><a href="#先看下写在Build-Script中的构建脚本。" class="headerlink" title="先看下写在Build Script中的构建脚本。"></a>先看下写在<code>Build Script</code>中的构建脚本。</h5><p>这里的<code>Build Script</code>指的是每个module都会有<code>build.gradle</code>文件，我们对每个module的某些编译配置选项也会在这里配置.<br><strong>首先需要明确的是，我们可以在<code>build.gradle</code>文件编写Groovy、Java代码</strong>，还可以回顾一下之前写的一坨文章看一下。<br><strong>以下代码我是在resource1模块的build.gradle文件中编写</strong><br>先声明一个继承自<code>org.gradle.api.Plugin.Plugin</code>的类</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Plugin</span>&lt;Project&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-type">void</span> apply(Project project) &#123;<br>        project.task(<span class="hljs-string">&quot;greeting&quot;</span>) &#123;<br>            doLast &#123;<br>                println(<span class="hljs-string">&quot;hello &quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后apply一下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> MyPlugin<br></code></pre></td></tr></table></figure><p>这时候点击<code>Sync Now</code>,会在对应的module中Tasks–&gt;other分组中展示；双击该任务或者使用命令行可执行(.&#x2F;gradlew resource1:greeting);<br>如果想要像<code>apply plugin: &#39;com.android.library&#39;</code>这种进行配置该如果办？我们可以这么做</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Plugin</span>&lt;Project&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-type">void</span> apply(Project project) &#123;<br>        <span class="hljs-keyword">def</span> extension = project.extensions.create(<span class="hljs-string">&quot;myPlugin&quot;</span>, MyPluginExtension)<br>        project.task(<span class="hljs-string">&quot;greeting&quot;</span>) &#123;<br>            doLast &#123;<br>                println(<span class="hljs-string">&quot;$extension.greeter ,$extension.message&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPluginExtension</span> &#123;<br>    <span class="hljs-keyword">def</span> message = <span class="hljs-string">&quot;default message from MyPluginExtension&quot;</span><br>    <span class="hljs-keyword">def</span> greeter = <span class="hljs-string">&quot;default greeter from MyPluginExtension&quot;</span><br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> MyPlugin<br>myPlugin &#123;<br>    message = <span class="hljs-string">&quot;hi&quot;</span><br>    greeter = <span class="hljs-string">&quot;xuan&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是，<code>project.extensions.create</code>方法中传入的第一个参数是我们在<code>build.gradle</code>文件配置块的名字；<br>另外，我们需要注意一个作用域的问题：如果我们想要在定义的类中使用一些三方的依赖包，需要在<strong>工程根目录下的build.gralde</strong>文件中<strong>buildscript</strong>使用classpath添加依赖，比如我想使用<code>commons-lang3</code>中的StringUtil来判断字符串是否为空，则</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildscript &#123;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;org.apache.commons:commons-lang3:3.11&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在module中的build.gradle文件中使用，别忘了导入包。</p><h5 id="在buildSrc-Module中"><a href="#在buildSrc-Module中" class="headerlink" title="在buildSrc Module中"></a>在<code>buildSrc</code> Module中</h5><p>我们在工程中新建一个名字为<code>buildSrc</code>的文件夹，和各个module同级，然后按照module的格式，创建src&#x2F;main&#x2F;groovy|java|kotlin&#x2F;package_name、build.gradle文件，将上面写的插件实现复制过来，<br>文件夹结构看起像这样<br><img src="/image/gradle/gradle-plugin/gradle-plugin-with-buildSrc.png" alt="gradle-plugin-buildSrc"><br>然后在build.gradle文件中引入我们所需要的依赖、plugin等，看起来像这样</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;java-gradle-plugin&#x27;</span><br>&#125;<br>java &#123;<br>    sourceCompatibility = JavaVersion.VERSION_1_7<br>    targetCompatibility = JavaVersion.VERSION_1_7<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的pluginds相当于 <code>apply plugin:&#39;java-gradle-plugin&#39;</code>,这个插件是官方推荐使用的，相当于我们引用了<code>java</code>和<code>groovy</code>，并且添加了<code>gradleApi()</code>的依赖,可以看这里<a href="https://docs.gradle.org/nightly/userguide/custom_plugins.html">https://docs.gradle.org/nightly/userguide/custom_plugins.html</a>。<br>我们还需要给我们的plugin取个名字，这里有两种方案</p><ol><li>官方现在推荐<br>在<code>build.gradle</code>中配置<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs groovy">gradlePlugin &#123;<br>    plugins &#123;<br>        simplePlugin &#123;<br>            id = <span class="hljs-string">&#x27;first-plugin&#x27;</span><br>            implementationClass = <span class="hljs-string">&#x27;com.huangyuanlove.plugin.FirstPlugin&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>之前的写法<br>创建<code>main/resources/META-INF/gradle-plugins</code>文件夹，并在该文件夹下新建<code>first-plugin.properties</code>文件(这里的first-plugin就是插件的id)，在该文件中声明实现插件的类<code>implementation-class=com.huangyuanlove.plugin.FirstPlugin</code></li></ol><p>引用这个插件：<br>在使用这个插件的moudle中，</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;first-plugin&#x27;</span><br>greeting&#123;<br>    message=<span class="hljs-string">&quot;hi&quot;</span><br>    greeter=<span class="hljs-string">&quot;xuan&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后同步一下就可以使用了</p><h5 id="作为一个独立模块"><a href="#作为一个独立模块" class="headerlink" title="作为一个独立模块"></a>作为一个独立模块</h5><ol><li>编写、构建、发布<br>和上面差不多，新建一个<code>java library module</code>,然后像上面一样引入<code>java-gradle-plugin</code>,配置好插件id。<br>在独立模块中我们需要将插件发布一下，然后再依赖.<br>文件夹结构看起来像下面这样<br><img src="/image/gradle/gradle-plugin/gradle-plugin-with-module.png" alt="gradle-plugin-module"></li></ol><p>引入<code>maven</code>,配置一下发布信息，看起来像下面这样</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;java-library&#x27;</span><br>    id <span class="hljs-string">&#x27;kotlin&#x27;</span><br>    id <span class="hljs-string">&#x27;java-gradle-plugin&#x27;</span><br>    id <span class="hljs-string">&#x27;maven&#x27;</span><br>&#125;<br><br>java &#123;<br>    sourceCompatibility = JavaVersion.VERSION_1_7<br>    targetCompatibility = JavaVersion.VERSION_1_7<br>&#125;<br><br>dependencies &#123;<br>    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;</span><br>&#125;<br>uploadArchives&#123; <span class="hljs-comment">//当前项目可以发布到本地文件夹中</span><br>    repositories &#123;<br>        mavenDeployer &#123;<br>            repository(<span class="hljs-attr">url:</span> uri(<span class="hljs-string">&#x27;/Users/huangyuan/maven_repo&#x27;</span>)) <span class="hljs-comment">//定义本地maven仓库的地址</span><br>            pom.groupId = <span class="hljs-string">&#x27;com.example.mygradleplugin&#x27;</span>   <span class="hljs-comment">//groupId</span><br>            pom.artifactId = <span class="hljs-string">&#x27;myplugin&#x27;</span>  <span class="hljs-comment">//artifactId</span><br>            pom.version = <span class="hljs-string">&#x27;1.0.2&#x27;</span> <span class="hljs-comment">//版本号</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同步一下，就会看到该模块的task中多了一个upload.uploadArchives任务，执行之后会在maven仓库对应的文件夹下看到发布的jar包</p><ol start="2"><li>依赖、引用<br>在项目根目录中，添加一下仓库地址，然后使用classpath进行依赖<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs groovy">buildscript &#123;<br>    repositories &#123;<br>        <span class="hljs-comment">//添加该maven仓库，</span><br>        maven &#123;<br>            url uri(<span class="hljs-string">&#x27;/Users/huangyuan/maven_repo&#x27;</span>)<br>        &#125;<br>    &#125;<br>    dependencies &#123;<br>        <span class="hljs-comment">//添加发布的plugin的依赖</span><br>        classpath <span class="hljs-string">&#x27;com.example.mygradleplugin:myplugin:1.0.2&#x27;</span><br>    &#125;<br>&#125;<br><br>allprojects &#123;<br>    repositories &#123;<br>        maven &#123;<br>            url uri(<span class="hljs-string">&#x27;/Users/huangyuan/maven_repo&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>引用和上面一样，没什么好说的</li></ol><h4 id="进行调试"><a href="#进行调试" class="headerlink" title="进行调试"></a>进行调试</h4><p>当插件工作不是预期的结果时，我们可能需要进行断点调试(当然打日志的方法也不错)，在之前的版本中还需要新增remote配置，然后以debug方式执行这个任务，现在在AndroidStudio中(4.1.1版本)中，只需要在侧边找打这个任务，右键菜单debug执行就好了</p><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.huangyuanlove.com/2018/11/09/groovy%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/&quot;&gt;groovy 语法入门&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.huangyuanlove.com/2018/11/11/gradle%E5%9F%BA%E7%A1%80/&quot;&gt;gradle 基础&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.huangyuanlove.com/2018/11/19/gradle%E4%BB%BB%E5%8A%A1/&quot;&gt;gradle 任务&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.huangyuanlove.com/2018/12/09/gradle%E6%8F%92%E4%BB%B6/&quot;&gt;gradle 插件&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.huangyuanlove.com/2018/12/19/gradle-java%E6%8F%92%E4%BB%B6/&quot;&gt;gradle-java 插件&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.huangyuanlove.com/2018/12/22/gradle-android%E6%8F%92%E4%BB%B6/&quot;&gt;gradle-android 插件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前面简单的写了点关于gradle的以及gradle插件的东西,现在我们来看一下如何自定义插件,&lt;strong&gt;本篇文章是基于AndroidStudio、Android工程进行讲述&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
    <category term="gradle" scheme="https://blog.huangyuanlove.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android打包流程</title>
    <link href="https://blog.huangyuanlove.com/2020/11/11/Android%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/"/>
    <id>https://blog.huangyuanlove.com/2020/11/11/Android%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/</id>
    <published>2020-11-11T14:12:20.000Z</published>
    <updated>2023-05-19T12:51:02.214Z</updated>
    
    <content type="html"><![CDATA[<p>现在的Android开发大部分是在AndroidStudio中进行的，当我们想要得到APK文件的时候，点一下RUN，或者执行一下<code>gradlew assembleDebug</code> 就可以了，那么在这个过程中到底发生了什么，我们来详细看一下。<br>构建的过程大致可以划分为两个过程：编译和打包<br>编译：编译器(compileer)通过编译source code、AIDL files、source filse、dependednce files，最终生成Dex(s)文件和编译后的资源文件<br>打包：打包器(APK packager)利用签名文件(KeyStore)和上一步编译过程中生成的Dex(s)文件、编译后的资源文件打包成最终的APK文件</p><span id="more"></span><h4 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h4><p>一个几乎是最简化的构建流程<br><img src="/image/gradle/apk%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B--%E6%9C%80%E7%AE%80.png" alt="最简化的构建流程" title="最简化的构建流程"><br>上图中的菱形表示一些构建操作，矩形表示输入或者输出文件</p><h4 id="初见细节"><a href="#初见细节" class="headerlink" title="初见细节"></a>初见细节</h4><p><img src="/image/gradle/apk%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B.png" alt="稍微有点细节的构建流程" title="稍微有点细节的构建流程"></p><p>编译打包流程</p><ol><li><p>使用aapt&#x2F;aapt2编译资源文件生成resource.arsc和R.java</p></li><li><p>使用AIDL处理aidl文件，生成java文件</p></li><li><p>使用javac编译java文件，生成class文件</p></li><li><p>(proguard混淆如果有)使用DX&#x2F;D8&#x2F;R8处理class文件，生成最终需要的dex文件</p></li><li><p>使用Android NDK处理native代码生成.so文件</p></li><li><p>使用apkbuilder生成未签名的apk文件</p></li><li><p>使用apksigner对apk进行签名，生成签名后的apk文件</p></li><li><p>使用zipalign工具，对已签名的apk文件进行优化(只有v1签名才有这一步，v2签名的apk会在zipalign后签名被破坏）。</p></li></ol><h4 id="终章"><a href="#终章" class="headerlink" title="终章"></a>终章</h4><p>这是一张流传已久的网图，找到的图已经有包浆了，又重新画了一遍<br>在图的最下方有示例说明：</p><ol><li>矩形表示文件</li><li>椭圆表示工具</li><li>箭头表示输出</li><li>空心圆表示输入</li></ol><p><img src="/image/gradle/apk%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8Bfinal.png" alt="最终构建流程" title="最终构建流程"></p><p>既然都是调用的工具，我们同样可以自己写脚本运行这些工具进行打包，调用的工具详细信息可以在这里找到 <a href="https://developer.android.com/studio/command-line?hl=zh_cn">https://developer.android.com/studio/command-line?hl=zh_cn</a></p><p>文中图片的源文件在 &#x2F;image&#x2F;apk打包流程.drawio ,使用drawio绘制;</p><hr><p>以上</p><p>参考：</p><ol><li><a href="https://www.zhihu.com/search?type=content&amp;q=Android%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B">https://www.zhihu.com/search?type=content&amp;q=Android%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B</a></li><li><a href="https://juejin.im/post/6882328361294069773">https://juejin.im/post/6882328361294069773</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在的Android开发大部分是在AndroidStudio中进行的，当我们想要得到APK文件的时候，点一下RUN，或者执行一下&lt;code&gt;gradlew assembleDebug&lt;/code&gt; 就可以了，那么在这个过程中到底发生了什么，我们来详细看一下。&lt;br&gt;构建的过程大致可以划分为两个过程：编译和打包&lt;br&gt;编译：编译器(compileer)通过编译source code、AIDL files、source filse、dependednce files，最终生成Dex(s)文件和编译后的资源文件&lt;br&gt;打包：打包器(APK packager)利用签名文件(KeyStore)和上一步编译过程中生成的Dex(s)文件、编译后的资源文件打包成最终的APK文件&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
    <category term="gradle" scheme="https://blog.huangyuanlove.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式--上</title>
    <link href="https://blog.huangyuanlove.com/2020/09/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%8A/"/>
    <id>https://blog.huangyuanlove.com/2020/09/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E4%B8%8A/</id>
    <published>2020-09-24T12:05:59.000Z</published>
    <updated>2023-09-14T02:36:06.336Z</updated>
    
    <content type="html"><![CDATA[<p>如果你有一个问题，你想到可以用正则来解决，那么你有两个问题了。</p><p>Some people, when confronted with a problem, think “I know,i’ll use regular expressions.” Now they have two problems</p><span id="more"></span><h3 id="写正则过程"><a href="#写正则过程" class="headerlink" title="写正则过程"></a>写正则过程</h3><ol><li><p>先分解</p><p>这个问题可以分成几个子问题，是否可以用多个正则来完成(密码强度校验，一个校验大小写，一个校验数字标点，一个校验强度)</p></li><li><p>解决子问题</p><p>某个位置上可能有多个字符？那就用字符组。某个位置上可能有多个字符串？那就用多选结构。出现的次数不确定？那就用量词。对出现的位置有要求？那就用锚点锁定位置</p></li><li><p>套皮</p><p>也就是把如何解决子问题转化为正则表达式</p></li><li><p>调试</p><p>复杂⼀点的正则表达式不能⼀次写对，这是很正常的</p></li></ol><p>测试网页：<a href="https://regex101.com/">https://regex101.com/</a></p><h3 id="正则功能s"><a href="#正则功能s" class="headerlink" title="正则功能s"></a>正则功能s</h3><pre><code class="mermaid" >graph TBA(正则功能)A1(校验数据的有效性)A2(查找符合要求的文本内容)A3(对文本进行切割,替换等操作)A-->A1A-->A2A-->A3</code></pre><h3 id="正则元字符"><a href="#正则元字符" class="headerlink" title="正则元字符"></a>正则元字符</h3><pre><code class="mermaid" >graph LRA(正则元字符)A-->B(特殊单字符)B-->B1(.任意字符)B-->B2(\d 任意数字\D 任意非数字)B-->B3(\w 任意字母数字下划线 \W任意非字母谁下划线)B-->B4(\s任意空白符  \S 任意非空白符)A-->C(空白符)C-->C1(\r 回车符)C-->C2(\n 换行符)C-->C3(\f 换页符)C-->C4(\t 制表符)C-->C5(\v 垂直制表符)C-->C6(\s 任意空白符)A-->D(范围)D-->D1("|或,如ab|bc 代表ab或bc")D-->D2("[...]多选一，括号中任意单个元素")D-->D3("[a-z]匹配a到z之间的任意单个元素(按ASCII表，包含a,z)")D-->D4("[^...]取反，不能是括号中的任意单个元素")A-->E(量词)E-->E1(*含义: 0到多次)E-->E2(+含义: 1到多次)E-->E3(?含义: 0到1次)E-->E4("{m}含义: 出现m次")E-->E5("{m,}含义: 出现至少m次")E-->E6("{m,n}含义: m到n次")A-->F(断言)F-->F1(单词边界)F-->F2(行的开始/结束)F-->F3(环视)</code></pre><p>示例：</p><ol><li>匹配某个网络资源：以 http:&#x2F;&#x2F; 或者https:&#x2F;&#x2F; 或者ftp:&#x2F;&#x2F;开头</li><li>第一位固定为1，第二位可能是3-9，第三位到第11位可以是任意数字</li></ol><h3 id="量词与贪婪"><a href="#量词与贪婪" class="headerlink" title="量词与贪婪"></a>量词与贪婪</h3><p>举例：<br>有字符串”aaabb”，有正则表达式”a+”，问有多少个匹配结果<br>有字符串”aaabb”，有正则表达式”a*”，问有多少个匹配结果</p><h4 id="贪婪匹配-Greedy"><a href="#贪婪匹配-Greedy" class="headerlink" title="贪婪匹配(Greedy)"></a>贪婪匹配(Greedy)</h4><p>有字符串”aaabb”，有正则表达式”a*”，问有多少个匹配结果 的匹配过程</p><table><thead><tr><th>匹配</th><th>开始</th><th>结束</th><th>说明</th><th>匹配内容</th></tr></thead><tbody><tr><td>第一次</td><td>0</td><td>3</td><td>到第一个字母b发现不满足，输出aaa</td><td>aaa</td></tr><tr><td>第二次</td><td>3</td><td>3</td><td>匹配剩下的bb，发现匹配不上，输出空字符串</td><td>空字符串</td></tr><tr><td>第三次</td><td>4</td><td>4</td><td>匹配剩下的b，发现匹配不上，输出空字符串</td><td>空字符串</td></tr><tr><td>第四次</td><td>5</td><td>5</td><td>匹配剩下空字符串，发现匹配不上，输出空字符串</td><td>空字符串</td></tr></tbody></table><h4 id="非贪婪模式-Lazy"><a href="#非贪婪模式-Lazy" class="headerlink" title="非贪婪模式(Lazy)"></a>非贪婪模式(Lazy)</h4><p>有字符串”aaabb”，有正则表达式”a*?”，问有多少个匹配结果<br>9个结果</p><p>在python2.7中只能匹配到空串，在java8中只能匹配到空串，  在python3.7.7中可以匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">r&quot;a*?&quot;</span>,<span class="hljs-string">&quot;aaabb&quot;</span>)<br>[<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>re.findall(<span class="hljs-string">r&quot;a*?&quot;</span>,<span class="hljs-string">&quot;aaabb&quot;</span>)<br>[<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br></code></pre></td></tr></table></figure><p>示例：查找双引号之间的单词</p><p>字符串如下 “the little cat” is a toy,it looks “a little bad”</p><p>贪婪：”.*”</p><p>非贪婪:”.*?”</p><h4 id="独占模式"><a href="#独占模式" class="headerlink" title="独占模式"></a>独占模式</h4><p>一般不怎么用</p><p>示例：</p><p>we found “the little cat” is in the hat, we like “the little cat”</p><p>其中双引号中的单词看成一个单词，即the little cat 是一个单词</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><pre><code class="mermaid" >graph LRA("贪婪、非贪婪、独占")A-->A1(贪婪匹配)A1-->A11("表示次数的量词，默认是贪婪的<br/>满足要求的情况下，尽可能按最长去匹配")A1-->A12("回溯：后面匹配不上，会吐出已匹配的再尝试")A-->A2(非贪婪匹配)A2-->A21("量词元字符后加?(英文问号),<br/>满足要求的情况下，尽可能按最短去进行匹配")A2-->A22("回溯：后面匹配不上，会匹配更长再接着尝试")A-->A3(独占模式)A3-->A31("量词元字符后加+(英文加号)<br/>满足要求的情况下，尽可能按最长去匹配")A3-->A32(不会发生回溯,匹配不上即失败)</code></pre><h3 id="分组与引用"><a href="#分组与引用" class="headerlink" title="分组与引用"></a>分组与引用</h3><p>匹配身份证号：15位或18位数字</p><h4 id="分组与编号"><a href="#分组与编号" class="headerlink" title="分组与编号"></a>分组与编号</h4><p>括号在正则中可以用于分组，被括号括起来的部分“子表达式”会被保存成一个子组。第几个括号就是第几个分组</p><h4 id="不保存子组"><a href="#不保存子组" class="headerlink" title="不保存子组"></a>不保存子组</h4><p>可以在括号里面使用 ?: 不保存子组。</p><h4 id="括号嵌套"><a href="#括号嵌套" class="headerlink" title="括号嵌套"></a>括号嵌套</h4><p>我们只需要数左括号（开括号）是第几个，就可以确定是第几个子组</p><p>假设时间格式是 2020-05-10 20:23:05 。</p><p>((\d{4})-(\d{2})-(\d{2})) ((\d{2}):(\d{2}):(\d{2}))</p><p>日期分组编号是 1，时间分组编号是 5，年月日对应的分组编号分别是 2，3，4，时分秒的分组编号分别是 6，7，8。</p><h4 id="命名分组"><a href="#命名分组" class="headerlink" title="命名分组"></a>命名分组</h4><p>由于编号得数在第几个位置，后续如果发现正则有问题，改动了括号的个数，还可能导致编号发生变化，因此一些编程语言提供了命名分组（named grouping），这样和数字相比更容易辨识，不容易出错。命名分组的格式为(<code>?P&lt;分组名&gt;正则</code>)。</p><h4 id="分组引用"><a href="#分组引用" class="headerlink" title="分组引用"></a>分组引用</h4><p>在知道了分组引用的编号 （number）后，大部分情况下，我们就可以使用 “反斜扛 + 编号”，即 \number 的方式来进行引用</p><h4 id="分组引用在查找中使用"><a href="#分组引用在查找中使用" class="headerlink" title="分组引用在查找中使用"></a>分组引用在查找中使用</h4><p>前面出现的单词再次出现：(\w+)\1</p><p><a href="https://regex101.com/r/Adg1Og/4">https://regex101.com/r/Adg1Og/4</a></p><h4 id="分组引用在替换中使用"><a href="#分组引用在替换中使用" class="headerlink" title="分组引用在替换中使用"></a>分组引用在替换中使用</h4><p>我们可以使用反向引用，在得到的结果中，去拼出来我们想要的结果</p><p><a href="https://regex101.com/r/Adg1Og/5">https://regex101.com/r/Adg1Og/5</a></p><pre><code class="mermaid" >graph LRA("正则分组")A-->A1("功能")A1-->A11("将某部分子表达式看成一个整体，在后续查找或替换引用分组")A-->A2("分组编号")A2-->A21(第几个括号就是第几个分组)A2-->A22("非捕获分组使用(?:正则)")A2-->A23("括号嵌套只需要看左括号的序号")A2-->A24("命名分组(?P[名称]正则)")A-->A3("分组引用")A3-->A31("查找：查找重复出现的部分")A3-->A32("替换：对原有内容格式进行改写")A-->A4("文本编辑")</code></pre><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><h4 id="不区分大小写模式（Case-Insensitive）"><a href="#不区分大小写模式（Case-Insensitive）" class="headerlink" title="不区分大小写模式（Case-Insensitive）"></a>不区分大小写模式（Case-Insensitive）</h4><p>示例：如要查找单词 cat，我们并不需要关心单词是 CAT、Cat，还是 cat</p><p>reg &#x3D; <code>[Cc][Aa][Tt]</code></p><p>当我们把模式修饰符放在整个正则前面时，就表示整个正则表达式都是不区分大小写的。模式修饰符是通过 (? 模式标识) 的方式来表示的。  我们只需要把模式修饰符放在对应的正则前，就可以使用指定的模式了。</p><p>由于不分大小写的英文是 Case-Insensitive，那么对应的模式标识就是 I 的小写字母 i，所以不区分大小写的 cat 就可以写成 (?i)cat。</p><p>text&#x3D;<code>cat\n CAT\nCat</code></p><p>我们也可以用它来尝试匹配两个连续出现的 cat，如下图所示，你会发现，即便是第一个 cat 和第二个 cat 大小写不一致，也可以匹配上。</p><p><a href="https://regex101.com/r/x1lg4P/1">https://regex101.com/r/x1lg4P/1</a></p><p>如果我们想要前面匹配上的结果，和第二次重复时的大小写一致，那该怎么做呢？我们只需要用括号把**修饰符和正则 cat **部分括起来，加括号相当于作用范围的限定，让不区分大小写只作用于这个括号里的内容</p><p><a href="https://regex101.com/r/x1lg4P/2">https://regex101.com/r/x1lg4P/2</a></p><p>需要注意的是，这里正则写成了 ((?i)cat) \1，而不是 ((?i)(cat)) \1。也就是说，我们给修饰符和 cat 整体加了个括号，而原来 cat 部分的括号去掉了。如果 cat 保留原来的括号，即 ((?i)(cat)) \1，这样正则中就会有两个子组，虽然结果也是对的，但这其实没必要</p><p>如果用正则匹配，实现部分区分大小写，另一部分不区分大小写，这该如何操作呢？就比如说我现在想要，the cat 中的 the 不区分大小写，cat 区分大小写</p><p>也就是 ((?i)the) cat</p><p><a href="https://regex101.com/r/x1lg4P/3">https://regex101.com/r/x1lg4P/3</a></p><h4 id="单行模式"><a href="#单行模式" class="headerlink" title="单行模式"></a>单行模式</h4><p>单行的英文表示是 Single Line，单行模式对应的修饰符是 (?s)</p><p><a href="https://regex101.com/r/Adg1Og/1">https://regex101.com/r/Adg1Og/1</a></p><h4 id="多行匹配模式（Multiline）"><a href="#多行匹配模式（Multiline）" class="headerlink" title="多行匹配模式（Multiline）"></a>多行匹配模式（Multiline）</h4><p>通常情况下，^匹配整个字符串的开头，$ 匹配整个字符串的结尾。多行匹配模式改变的就是 ^ 和 $ 的匹配行为</p><p><a href="https://regex101.com/r/Adg1Og/2">https://regex101.com/r/Adg1Og/2</a></p><p>多行模式的作用在于，使 ^ 和 $ 能匹配上每行的开头或结尾，我们可以使用模式修饰符号 (?m) 来指定这个模式。</p><p><a href="https://regex101.com/r/Adg1Og/3">https://regex101.com/r/Adg1Og/3</a></p><h4 id="注释模式（Comment）"><a href="#注释模式（Comment）" class="headerlink" title="注释模式（Comment）"></a>注释模式（Comment）</h4><p>正则中注释模式是使用 (?#comment) 来表示。</p><pre><code class="mermaid" >graph LRA(正则匹配模式<br>Match Mode)A-->A1(不区分大小写模式<br>Case-Insensitive)A1-->A11("作用：正则不区分英文字母的大小写")A1-->A12("修饰符：(?i)")A-->A2(点号通配模式<br>Dot All)A2-->A21("作用：英文的点号可以匹配任意字符，包括换行")A2-->A22("修饰符：(?s)")A-->A3(多行模式<br>Multiline)A3-->A31("作用：^或$默认是匹配整个字符串的开头或结尾<br>多行模式使得他们能匹配每行的开头或结尾")A3-->A32("修饰符：(?m)")A-->A4(注释模式<br>Comment)A4-->A41("作用：添加注释")A4-->A42("修饰符：(?#comment)")</code></pre><p>问题：</p><p>提取html中head标签中的所有内容</p><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>简单来说，断言是指对匹配到的文本位置有要求。比如，去查找一个单词，我们要查找 tom，但其它的单词，比如 tomorrow 中也包含了 tom。</p><h4 id="单词边界（Word-Boundary）"><a href="#单词边界（Word-Boundary）" class="headerlink" title="单词边界（Word Boundary）"></a>单词边界（Word Boundary）</h4><p>我们想要把下面文本中的 tom 替换成 jerry。注意一下，在文本中出现了 tomorrow 这个单词，tomorrow 也是以 tom 开头的。</p><blockquote><p>tom asked me if I would go fishing with him tomorrow.</p></blockquote><p>利用前面学到的知识，我们如果直接替换，会出现下面这种结果。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex">替换前：tom asked me if I would go fishing with him tomorrow.<br>替换后：jerry asked me if I would go fishing with him jerryorrow.<br></code></pre></td></tr></table></figure><p>单词的组成一般可以用元字符 \w+ 来表示，\w 包括了大小写字母、下划线和数字（即 [A-Za-z0-9_]）。那如果我们能找出单词的边界，也就是当出现了\w 表示的范围以外的字符，比如引号、空格、标点、换行等这些符号，我们就可以在正则中使用\b 来表示单词的边界。 \b 中的 b 可以理解为是边界（Boundary）这个单词的首字母。</p><table><thead><tr><th></th><th>tom</th><th>\btom</th><th>tom\b</th><th>\btom\b</th></tr></thead><tbody><tr><td>tom</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>tomorrow</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>atom</td><td>√</td><td>×</td><td>√</td><td>×</td></tr><tr><td>atomic</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h4 id="行的开始或结束"><a href="#行的开始或结束" class="headerlink" title="行的开始或结束"></a>行的开始或结束</h4><p>可以参考<strong>空白符</strong>和<strong>匹配模式</strong></p><h4 id="环视（-Look-Around）"><a href="#环视（-Look-Around）" class="headerlink" title="环视（ Look Around）"></a>环视（ Look Around）</h4><p>比如我们要提取六位数字的邮政编码，不能简单的写<code>\d&#123;6&#125;</code>，这样的话，11位数字的手机号码也能匹配，也就是说，除了文本本身组成符合这 6 位数的规则外，这 6 位数左边或右边都不能是数字。正则是通过环视来解决这个问题的</p><table><thead><tr><th>正则</th><th>名称</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>(?&lt;=Y)</code></td><td>肯定逆序环视<br>positive-lookbehind</td><td>左边是Y</td><td><code>(?&lt;=\d)th</code>:左边是数字的th，能匹配9th</td></tr><tr><td><code>(?&lt;!Y)</code></td><td>否定逆序环视<br>negative-lookbehind</td><td>左边不是Y</td><td><code>(?&lt;!\d)th</code>:左边不是数字的th，能匹配health</td></tr><tr><td><code>(?=Y)</code></td><td>肯定顺序环视<br>positive-lookhead</td><td>右边是Y</td><td><code>six(?=\d)</code>:右边是数字的siz，能匹配six6</td></tr><tr><td><code>(?!Y)</code></td><td>否定逆序环视<br>negative-lookhead</td><td>右边不是Y</td><td><code>hi(?!\d)</code>:右边不是数字的hi，能匹配high</td></tr></tbody></table><h4 id="环视与子组"><a href="#环视与子组" class="headerlink" title="环视与子组"></a>环视与子组</h4><p>环视中虽然也有括号，但不会保存成子组。保存成子组的一般是匹配到的文本内容，后续用于替换等操作，而环视是表示对文本左右环境的要求，即环视只匹配位置，不匹配文本内容</p><pre><code class="mermaid" >graph LRA(断言)--> A1(单词边界)A1-->A11(\b匹配单词边界)A-->A2(行的开始/结束)A2-->A21("^匹配行的开始<br>多行模式时，可以匹配任意行开头")A2-->A22("$匹配行的结束<br>多行模式时，可以匹配任意行结尾")A2-->A23("\A仅匹配整个字符串的开始<br/>不支持多行模式")A2-->A24("\Z仅匹配整个字符串结束<br/>不支持多行模式")A-->A3(环视)A3-->A31("(?=Y)X:匹配前面是Y的X")A3-->A32("(?!Y)X:匹配前面不是Y的X")A3-->A33("X(?=Y):匹配后面是Y的X")A3-->A34("X(?!Y):匹配后面不是Y的X")</code></pre><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果你有一个问题，你想到可以用正则来解决，那么你有两个问题了。&lt;/p&gt;
&lt;p&gt;Some people, when confronted with a problem, think “I know,i’ll use regular expressions.” Now they have two problems&lt;/p&gt;</summary>
    
    
    
    
    <category term="正则" scheme="https://blog.huangyuanlove.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>MMKV与SharedPreference</title>
    <link href="https://blog.huangyuanlove.com/2020/08/23/MMKV%E4%B8%8ESharedPreference/"/>
    <id>https://blog.huangyuanlove.com/2020/08/23/MMKV%E4%B8%8ESharedPreference/</id>
    <published>2020-08-23T03:31:39.000Z</published>
    <updated>2023-05-19T12:51:02.225Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于SP的”种种问题”,萌发了想要使用写文件的方式替换掉sp的想法，发现腾讯开源MMKV是个不错的选择。</p><span id="more"></span><h5 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h5><ol><li>SharedPreferences</li><li>ContentProvider</li><li>文件</li><li>数据库</li></ol><h5 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h5><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>时间开销</td><td>这里说的时间开销包括了CPU时间和&#x2F;0时间，在I&#x2F;O优化中我就多次提到相比CPU和内存，I&#x2F;0存储的速度是非常慢的。但是如果存储方法中比如编解码或者加密&#x2F;解密等设计的比较复杂，整个数据存储过程也会出现CPU时间变得更长的情况</td></tr><tr><td>正确性</td><td>选择存储方案的时候，第一个需要判断它是否靠谱。这套存储方案设计是否完备，有没有支持多线程或者跨进程同步操作。内部是否健壮，有没有考虑异常情况下数据的校验和恢复，比如采用双写或者备份文件策略，即使主文件因为系统底层导致损坏，也可以一定程度 上恢复大部分数据</td></tr><tr><td>空间开销</td><td>即使相同的数据如果使用不同的编码方式，最后占用的存储空间也会有所不同。举一个简单的例子，相同的数据所占的空间大小是XML&gt;JSON&gt;ProtocolBuffer。除了编码方式的差异，在一些场景我们可能还需要引入压缩策略来进-步减少存储空间，例如zip、lzma等。数据存储的空间开销还需要考虑内存空间的占用量，整个存储过程会不会导致应用出现大量GC、OOM等</td></tr><tr><td>安全</td><td>应用中可能会有一些非常敏感的数据,即使它们存储在&#x2F;data&#x2F;data中，我们依然必须将它们加密。例如微信的聊天数据是存储在加密的数据库中，一些些账号相关的数据我们也要单独做加密落地。根据加密强度的不同，可以选择RSA、AES、chacha20、 TEA这些常用的加密算法</td></tr><tr><td>开发成本</td><td>有些存储方案看起来非常高大上，但是需要业务做很大改造才能接入。这里我们当然希望能无缝的接入到业务中，在整个开发过程越简单越好</td></tr><tr><td>兼容性</td><td>业务不停地向前演进，我们的存储字段或者格式有时候也会不得不有所变化。兼容性首先要考虑的是向前、向后的兼容性，老的数据在升级时能否迁移过来，新的数据在老版本能否降级使用。兼容性另外一个需要考虑的可能是多语言的问题，不同的语言是否支持转换</td></tr></tbody></table><h4 id="sp的N宗罪"><a href="#sp的N宗罪" class="headerlink" title="sp的N宗罪"></a>sp的N宗罪</h4><ol><li>跨进程不安全</li><li>加载缓慢：异步加载，但是异步加载线程没有设置优先级，如果这时候主线程读取数据需要等待加载线程执行完毕(也就是主线程等待低优先级线程锁的问题)</li><li>全量写入：无论是commit还是apply，即使改动一个条目，也会把全部内容写到文件</li><li>卡顿：异步落盘机制在应用崩溃时会导致数据丢失</li></ol><p>下面是SP操作源码的简介图，来源：<a href="https://juejin.im/entry/6844903488271417351">https://juejin.im/entry/6844903488271417351</a></p><p><img src="/image/Android/MMKV/apply.png" alt="linux-io"></p><p><img src="/image/Android/MMKV/commit.png" alt="linux-io"></p><h4 id="SP优化"><a href="#SP优化" class="headerlink" title="SP优化"></a>SP优化</h4><p>可以在Application中重写getSharedPreference方法，返回自己实现的sp。我们可以自己将多次读写进行合并</p><h4 id="MMKV与SP"><a href="#MMKV与SP" class="headerlink" title="MMKV与SP"></a>MMKV与SP</h4><table><thead><tr><th>关键要素</th><th>SP</th><th>MMKV</th></tr></thead><tbody><tr><td>正确性</td><td>差<br>跨进程和apply机制导致数据丢失</td><td>优<br>使用mmap和文件 锁保证数据完整</td></tr><tr><td>时间开销</td><td>差<br>全量写入、卡顿</td><td>优<br>1.使用mmap<br/>2.修改插入文件尾部，无需全量写入</td></tr><tr><td>空间开销</td><td>差<br>使用XML，格式比较冗余</td><td>良<br/>使用Protocol Buffer,但是增量更新可能会导致部分冗余</td></tr><tr><td>安全</td><td>差<br/>完全明文存储，没有支持加密与权限校验，不适合存放敏感数据</td><td>良<br/>使用Protocol Buffer,不是完全明文。没有支持加密与权限校验，不适合存放敏感数据</td></tr><tr><td>开发成本</td><td>优<br/>系统支持，非常简单</td><td>良<br/>需要引入单独库，有一定的改造成本</td></tr><tr><td>兼容性</td><td>优<br/>支持前后兼容</td><td>优<br/>支持前后兼容，支持导入<br/>SharedPreferences历史数据，但注意<br/>转换后版本无法回退</td></tr></tbody></table><h4 id="MMKV原理：来源https-github-com-Tencent-MMKV"><a href="#MMKV原理：来源https-github-com-Tencent-MMKV" class="headerlink" title="MMKV原理：来源https://github.com/Tencent/MMKV"></a>MMKV原理：来源<a href="https://github.com/Tencent/MMKV">https://github.com/Tencent/MMKV</a></h4><ol><li><p>内存准备</p><p>通过 mmap 内存映射文件，提供一段可供随时写入的内存块，App 只管往里面写数据，由操作系统负责将内存回写到文件，不必担心 crash 导致数据丢失。</p><p><img src="/image/Android/MMKV/Linux-storage-stack.png" alt="Linux-storage-stack"></p></li></ol><p>简化版<br>   <img src="/image/Android/MMKV/linux-io.png" alt="linux-io"></p><ol start="2"><li><p>数据组织</p><p>数据序列化方面我们选用 protobuf 协议，pb 在性能和空间占用上都有不错的表现。考虑到我们要提供的是通用 kv 组件，key 可以限定是 string 字符串类型，value 则多种多样（int&#x2F;bool&#x2F;double 等）。要做到通用的话，考虑将 value 通过 protobuf 协议序列化成统一的内存块（buffer），然后就可以将这些 KV 对象序列化到内存中。</p></li><li><p>写入优化</p><p>标准 protobuf 不提供增量更新的能力，每次写入都必须全量写入。考虑到主要使用场景是频繁地进行写入更新，我们需要有增量更新的能力：将增量 kv 对象序列化后，直接 append 到内存末尾；这样同一个 key 会有新旧若干份数据，最新的数据在最后；那么只需在程序启动第一次打开 mmkv 时，不断用后读入的 value 替换之前的值，就可以保证数据是最新有效的。</p></li><li><p>空间增长</p><p>使用 append 实现增量更新带来了一个新的问题，就是不断 append 的话，文件大小会增长得不可控。例如同一个 key 不断更新的话，是可能耗尽几百 M 甚至上 G 空间，而事实上整个 kv 文件就这一个 key，不到 1k 空间就存得下。这明显是不可取的。我们需要在性能和空间上做个折中：以内存 pagesize 为单位申请空间，在空间用尽之前都是 append 模式；当 append 到文件末尾时，进行文件重整、key 排重，尝试序列化保存排重结果；排重后空间还是不够用的话，将文件扩大一倍，直到空间足够。</p></li><li><p>数据有效性</p><p>考虑到文件系统、操作系统都有一定的不稳定性，我们另外增加了 crc 校验，对无效数据进行甄别。在 iOS 微信现网环境上，我们观察到有平均约 70万日次的数据校验不通过。</p></li></ol><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p><a href="https://github.com/Tencent/MMKV">https://github.com/Tencent/MMKV</a> github上有对应的示例</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.0xffffff.org/2017/05/01/41-linux-io/">聊聊 Linux IO</a><br><a href="https://tech.meituan.com/2017/05/19/about-desk-io.html">磁盘I&#x2F;O那些事</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-cache/index.html">Linux 内核的文件 Cache 管理机制介绍</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-directio/index.html">Linux 中直接 I&#x2F;O 机制的介绍</a><br><a href="https://developer.android.com/reference/android/os/MemoryFile">MemoryFile</a><br><a href="https://developer.android.com/reference/java/nio/MappedByteBuffer">MappedByteBuffer</a><br><a href="https://juejin.im/entry/6844903488271417351">彻底搞懂 SharedPreferences</a><br><a href="https://developer.ibm.com/zh/articles/j-5things1/">Java 对象序列化</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;鉴于SP的”种种问题”,萌发了想要使用写文件的方式替换掉sp的想法，发现腾讯开源MMKV是个不错的选择。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter异常处理</title>
    <link href="https://blog.huangyuanlove.com/2020/07/27/Flutter%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://blog.huangyuanlove.com/2020/07/27/Flutter%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-07-27T13:04:53.000Z</published>
    <updated>2023-05-19T12:51:02.219Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter异常和Java异常类似，都是代码运行时发生的错误事件，我们可以通过与Java类似的try-catch机制来捕获这个异常，和java不同的地方在于 Dart 采用事件循环的机制来运行任务，各个任务的运行状态是互相独立的，也就是说，即便某个任务出现了异常我们没有捕获它，Dart 程序也不会退出，只会导致当前任务后续的代码不会被执行，用户仍可以继续使用其他功能。</p><span id="more"></span><p>dart中的异常分为App异常和Framework异常，根据来源不同，捕获方式也不同。App异常我们可以通过try–catch或者异步调用中的catchError捕获；Framework中的异常可以通过自定义ErrorWidget.builder进行捕获+展示</p><h3 id="App异常的捕获方式"><a href="#App异常的捕获方式" class="headerlink" title="App异常的捕获方式"></a>App异常的捕获方式</h3><p>App异常，就是应用代码的异常，通常由未处理应用层其他模块所抛出的异常引起。根据异常代码的执行时序，App异常可以分为两类，即同步异常和异步异常:同步异常可以通过try-catch机制捕获，异步异常则需要采用Future 提供的catchError语句捕获。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//异常捕获</span><br><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-keyword">throw</span> StateError(<span class="hljs-string">&quot;this is a dart exception&quot;</span>);<br><br>&#125;<span class="hljs-keyword">catch</span> (e)&#123;<br>  <span class="hljs-built_in">print</span>(e);<br>&#125;<br><br><br>Future.delayed(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">1</span>))<br>.then((value) =&gt; <span class="hljs-keyword">throw</span> StateError(<span class="hljs-string">&quot;this is a dart exception in future&quot;</span>) )<br>.catchError((e)=&gt;<span class="hljs-built_in">print</span>(e));<br><br><br><span class="hljs-comment">//无法捕获</span><br><span class="hljs-keyword">try</span>&#123;<br>  Future.delayed(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">1</span>))<br>      .then((value) =&gt; <span class="hljs-keyword">throw</span> StateError(<span class="hljs-string">&quot;this is a dart exception in future by try catch&quot;</span>) );<br>&#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>  <span class="hljs-built_in">print</span>(e);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，这两种方式是不能混用的。无法使用try- -catch去捕获一个异步调用所抛出的异常的。如果我们想集中管理代码中的所有异常，Flutter 也提供了Zone.runZoned 方法。我们可以给代码执行对象指定一-个Zone，在Dart中，Zone表示一个代码执行的环境范围，其概念类似沙盒，不同沙盒之间是互相隔离的。如果我们想要观察沙盒中代码执行出现的异常，沙盒提供了onError回调函数，拦截那些在代码执行对象中的未捕获异常。<br>在下面的代码中，我们将可能抛出异常的语句放置在了Zone里。可以看到，在没有使用try-catch和catchError的情况下，无论是同步异常还是异步异常，都可以通过Zone直接捕获到:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//runZoned</span><br>runZoned(() &#123;<br>  <span class="hljs-keyword">throw</span> StateError(<span class="hljs-string">&quot;this is a dart exception in future&quot;</span>);<br>  <br>&#125;, onError: (<span class="hljs-built_in">dynamic</span> e, StackTrace stack) &#123;<br>  <span class="hljs-built_in">print</span>(e);<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;catch exception by zone&quot;</span>);<br>&#125;);<br><br><br>runZoned(() &#123;<br>  Future.delayed(<span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">1</span>))<br>      .then((value) =&gt;<br>  <span class="hljs-keyword">throw</span> StateError(<span class="hljs-string">&quot;this is a dart exception in future by try catch&quot;</span>));<br>&#125;, onError: (<span class="hljs-built_in">dynamic</span> e, StackTrace stack) &#123;<br>  <span class="hljs-built_in">print</span>(e);<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;catch future exception by zone&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="Framework-异常捕获"><a href="#Framework-异常捕获" class="headerlink" title="Framework 异常捕获"></a>Framework 异常捕获</h2><p>Framework异常，就是Flutter框架引发的异常，通常是由应用代码触发了Flutter 框架底层的异常判断引起的。比如，当布局错误时(具体一点就是Text控件的构造方法传入null)，Flutter 就会自动展示一个包含错误信息的红色页面，这其实是因为，Flutter 框架在调用build方法构建页面时进行了try- -catch的处理，并提供了一个ErrorWidget，用于在出现异常时进行信息提示:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//abstract class ComponentElement extends Element </span><br><span class="hljs-comment">//StatelessElement extends  ComponentElement</span><br><span class="hljs-comment">// StatefulElement extends  ComponentElement</span><br><br>built = ErrorWidget.builder(<br>        _debugReportException(<br>          ErrorDescription(<span class="hljs-string">&#x27;building <span class="hljs-subst">$this</span>&#x27;</span>),<br>          e,<br>          stack,<br>          informationCollector: () <span class="hljs-keyword">sync</span>* &#123;<br>            <span class="hljs-keyword">yield</span> DiagnosticsDebugCreator(DebugCreator(<span class="hljs-keyword">this</span>));<br>          &#125;,<br>        )<br></code></pre></td></tr></table></figure><p>这个页面反馈的信息比较丰富，适合开发期定位问题。但我们并不想让用户看到这种错误信息，希望给用户展示一个更加友好的页面。因此，我们通常会重写ErrorWidget.builder方法，返回我们自定义的展示信息，下面我们直接返回了一个居中的Text控件:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">ErrorWidget.builder = (FlutterErrorDetails flutterErrorDetails) &#123;<br>     <span class="hljs-keyword">return</span> Scaffold(<br>       body: Center(<br>         child: Text(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;flutterErrorDetails.exception&#125;</span>&quot;</span>),<br>       ),<br>     );<br>   &#125;;<br></code></pre></td></tr></table></figure><h4 id="异常统一处理"><a href="#异常统一处理" class="headerlink" title="异常统一处理"></a>异常统一处理</h4><p>为了集中处理框架异常，Flutter 提供了FlutterError类，这个类的onError属性会在接收到框架异常时执行相应的回调。因此，要实现自定义捕获逻辑，我们只要为它提供一个自定义的错误处理回调即可。<br>在下面的代码中，我们使用Zone提供的handleUncaughtError语句，将Flutter框架的异常统- -转发到当前的Zone中，这样我们就可以统一使用Zone去处理应用内的所有异常了:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-keyword">void</span> main() &#123;<br>  FlutterError.onError = (FlutterErrorDetails details) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-comment">//转发至zone</span><br>    Zone.current.handleUncaughtError(details.exception, details.stack);<br>  &#125;;<br><br>  runZoned&lt;Future&lt;<span class="hljs-built_in">Null</span>&gt;&gt;(() <span class="hljs-keyword">async</span> &#123;<br>    runApp(MyApp());<br>  &#125;, onError: (error, stackTrace) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-comment">//在这里处理异常 搞个channel，转发到原生，上报到bugly平台</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------&quot;</span>);<br>    <span class="hljs-built_in">print</span>(error);<br>    <span class="hljs-built_in">print</span>(stackTrace);<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------&quot;</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Flutter异常和Java异常类似，都是代码运行时发生的错误事件，我们可以通过与Java类似的try-catch机制来捕获这个异常，和java不同的地方在于 Dart 采用事件循环的机制来运行任务，各个任务的运行状态是互相独立的，也就是说，即便某个任务出现了异常我们没有捕获它，Dart 程序也不会退出，只会导致当前任务后续的代码不会被执行，用户仍可以继续使用其他功能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
    <category term="Flutter" scheme="https://blog.huangyuanlove.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>JetPack-sunflower</title>
    <link href="https://blog.huangyuanlove.com/2020/03/12/JetPack-sunflower/"/>
    <id>https://blog.huangyuanlove.com/2020/03/12/JetPack-sunflower/</id>
    <published>2020-03-11T17:46:26.000Z</published>
    <updated>2023-05-19T12:51:02.222Z</updated>
    
    <content type="html"><![CDATA[<p>2018年谷歌I&#x2F;O 发布了一系列辅助android开发者的实用工具，合称Jetpack，以帮助开发者构建出色的 Android 应用。<br>sunflower with java，A gardening app illustrating Android development best practices with Android Jetpack.<br>sunflower的java版本：园艺应用程序，说明了使用Android Jetpack进行Android开发的最佳做法。<br>源码地址 <a href="https://github.com/huangyuanlove/sunflower_java">https://github.com/huangyuanlove/sunflower_java</a> 本项目完全来自于kotlin版本的<strong>代码翻译</strong><br>kotlin版本 <a href="https://github.com/android/sunflower">https://github.com/android/sunflower</a></p><span id="more"></span><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ol><li>主页分为两个tab，默认tab展示已经栽种的植物，另外一个tab展示所有可栽种植物；</li><li>点击每个植物进入到植物详情</li><li>单Activity</li><li>ViewModel从数据库中读取数据，返回LiveData对象，并将对象绑定到视图中</li><li>展示了创建数据库、数据对象以及ViewModel、Repository过程<h4 id="JetPack组件"><a href="#JetPack组件" class="headerlink" title="JetPack组件"></a>JetPack组件</h4></li><li>lifecycle</li><li>navigation</li><li>room</li><li>work</li><li>liveData</li><li>databinding</li></ol><h4 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h4><ol><li>主页：MainActivity -&gt; HomeViewPagerFragment</li><li>我的花园：GardenFragment</li><li>植物目录：PlantListFragment</li><li>植物详情：PlantDetailFragment</li><li>数据来源：assets中的plants.json</li></ol><h4 id="结构简介"><a href="#结构简介" class="headerlink" title="结构简介"></a>结构简介</h4><ol><li>adapter:包含DatabindingAdapter,ListViewAdapter</li><li>data:数据库、实体类、DAO</li><li>utilities:常量字段</li><li>viewmodels:各个视图所需的ViewModel</li><li>widget:自定义控件</li><li>workers:初始化数据库</li><li>*Fragment:视图UI</li></ol><h4 id="流程简介"><a href="#流程简介" class="headerlink" title="流程简介"></a>流程简介</h4><ol><li>AppDatabase单例模式，在GardenFragment中会进行初始化，这时会将plants.json写入数据库；</li><li>在PlantListFragment中，读取数据库中植物信息并展示在页面上；点击右上角按钮，会筛选植物</li><li>点击植物进入详情</li><li>在详情页点击加号添加植物，则会出现在GardenFragment中，同时加号隐藏</li></ol><hr><p>以上</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2018年谷歌I&amp;#x2F;O 发布了一系列辅助android开发者的实用工具，合称Jetpack，以帮助开发者构建出色的 Android 应用。&lt;br&gt;sunflower with java，A gardening app illustrating Android development best practices with Android Jetpack.&lt;br&gt;sunflower的java版本：园艺应用程序，说明了使用Android Jetpack进行Android开发的最佳做法。&lt;br&gt;源码地址 &lt;a href=&quot;https://github.com/huangyuanlove/sunflower_java&quot;&gt;https://github.com/huangyuanlove/sunflower_java&lt;/a&gt; 本项目完全来自于kotlin版本的&lt;strong&gt;代码翻译&lt;/strong&gt;&lt;br&gt;kotlin版本 &lt;a href=&quot;https://github.com/android/sunflower&quot;&gt;https://github.com/android/sunflower&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.huangyuanlove.com/tags/Android/"/>
    
  </entry>
  
</feed>
